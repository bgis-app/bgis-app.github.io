!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e():"function"==typeof define&&define.amd?define([],e):"object"==typeof exports?exports["bgis-core"]=e():t["bgis-core"]=e()}(self,(function(){return(()=>{"use strict";var t={};(t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})})(t);const e=function(){function t(t){this.propagationStopped,this.defaultPrevented,this.type=t,this.target=null}return t.prototype.preventDefault=function(){this.defaultPrevented=!0},t.prototype.stopPropagation=function(){this.propagationStopped=!0},t}(),n="propertychange",o=function(){function t(){this.disposed=!1}return t.prototype.dispose=function(){this.disposed||(this.disposed=!0,this.disposeInternal())},t.prototype.disposeInternal=function(){},t}();function i(t,e){return t>e?1:t<e?-1:0}function r(t,e,n){var o=t.length;if(t[0]<=e)return 0;if(e<=t[o-1])return o-1;var i=void 0;if(n>0){for(i=1;i<o;++i)if(t[i]<e)return i-1}else if(n<0){for(i=1;i<o;++i)if(t[i]<=e)return i}else for(i=1;i<o;++i){if(t[i]==e)return i;if(t[i]<e)return"function"==typeof n?n(e,t[i-1],t[i])>0?i-1:i:t[i-1]-e<e-t[i]?i-1:i}return o-1}function s(t,e){for(var n=Array.isArray(e)?e:[e],o=n.length,i=0;i<o;i++)t[t.length]=n[i]}function a(t,e){var n=t.length;if(n!==e.length)return!1;for(var o=0;o<n;o++)if(t[o]!==e[o])return!1;return!0}function l(){return!0}function u(){return!1}function c(){}var h="function"==typeof Object.assign?Object.assign:function(t,e){if(null==t)throw new TypeError("Cannot convert undefined or null to object");for(var n=Object(t),o=1,i=arguments.length;o<i;++o){var r=arguments[o];if(null!=r)for(var s in r)r.hasOwnProperty(s)&&(n[s]=r[s])}return n};function p(t){for(var e in t)delete t[e]}var d,f="function"==typeof Object.values?Object.values:function(t){var e=[];for(var n in t)e.push(t[n]);return e},g=(d=function(t,e){return d=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},d(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function n(){this.constructor=t}d(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});const v=function(t){function n(e){var n=t.call(this)||this;return n.eventTarget_=e,n.pendingRemovals_=null,n.dispatching_=null,n.listeners_=null,n}return g(n,t),n.prototype.addEventListener=function(t,e){if(t&&e){var n=this.listeners_||(this.listeners_={}),o=n[t]||(n[t]=[]);-1===o.indexOf(e)&&o.push(e)}},n.prototype.dispatchEvent=function(t){var n="string"==typeof t?new e(t):t,o=n.type;n.target||(n.target=this.eventTarget_||this);var i,r=this.listeners_&&this.listeners_[o];if(r){var s=this.dispatching_||(this.dispatching_={}),a=this.pendingRemovals_||(this.pendingRemovals_={});o in s||(s[o]=0,a[o]=0),++s[o];for(var l=0,u=r.length;l<u;++l)if(!1===(i="handleEvent"in r[l]?r[l].handleEvent(n):r[l].call(this,n))||n.propagationStopped){i=!1;break}if(--s[o],0===s[o]){var h=a[o];for(delete a[o];h--;)this.removeEventListener(o,c);delete s[o]}return i}},n.prototype.disposeInternal=function(){this.listeners_&&p(this.listeners_)},n.prototype.getListeners=function(t){return this.listeners_&&this.listeners_[t]||void 0},n.prototype.hasListener=function(t){return!!this.listeners_&&(t?t in this.listeners_:Object.keys(this.listeners_).length>0)},n.prototype.removeEventListener=function(t,e){var n=this.listeners_&&this.listeners_[t];if(n){var o=n.indexOf(e);-1!==o&&(this.pendingRemovals_&&t in this.pendingRemovals_?(n[o]=c,++this.pendingRemovals_[t]):(n.splice(o,1),0===n.length&&delete this.listeners_[t]))}},n}(o),_="change",y="error",m="contextmenu",w="click",C="keydown",x="keypress",E="touchmove",b="wheel";function T(t,e,n,o,i){if(o&&o!==t&&(n=n.bind(o)),i){var r=n;n=function(){t.removeEventListener(e,n),r.apply(this,arguments)}}var s={target:t,type:e,listener:n};return t.addEventListener(e,n),s}function P(t,e,n,o){return T(t,e,n,o,!0)}function O(t){t&&t.target&&(t.target.removeEventListener(t.type,t.listener),p(t))}var R=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function o(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}(),S=function(t){function e(){var e=t.call(this)||this;return e.on=e.onInternal,e.once=e.onceInternal,e.un=e.unInternal,e.revision_=0,e}return R(e,t),e.prototype.changed=function(){++this.revision_,this.dispatchEvent(_)},e.prototype.getRevision=function(){return this.revision_},e.prototype.onInternal=function(t,e){if(Array.isArray(t)){for(var n=t.length,o=new Array(n),i=0;i<n;++i)o[i]=T(this,t[i],e);return o}return T(this,t,e)},e.prototype.onceInternal=function(t,e){var n;if(Array.isArray(t)){var o=t.length;n=new Array(o);for(var i=0;i<o;++i)n[i]=P(this,t[i],e)}else n=P(this,t,e);return e.ol_key=n,n},e.prototype.unInternal=function(t,e){var n=e.ol_key;if(n)!function(t){if(Array.isArray(t))for(var e=0,n=t.length;e<n;++e)O(t[e]);else O(t)}(n);else if(Array.isArray(t))for(var o=0,i=t.length;o<i;++o)this.removeEventListener(t[o],e);else this.removeEventListener(t,e)},e}(v);S.prototype.on,S.prototype.once,S.prototype.un;const M=S;function A(){return function(){throw new Error("Unimplemented abstract method.")}()}var I=0;function j(t){return t.ol_uid||(t.ol_uid=String(++I))}var L=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function o(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}(),F=function(t){function e(e,n,o){var i=t.call(this,e)||this;return i.key=n,i.oldValue=o,i}return L(e,t),e}(e);const k=function(t){function e(e){var n=t.call(this)||this;return n.on,n.once,n.un,j(n),n.values_=null,void 0!==e&&n.setProperties(e),n}return L(e,t),e.prototype.get=function(t){var e;return this.values_&&this.values_.hasOwnProperty(t)&&(e=this.values_[t]),e},e.prototype.getKeys=function(){return this.values_&&Object.keys(this.values_)||[]},e.prototype.getProperties=function(){return this.values_&&h({},this.values_)||{}},e.prototype.hasProperties=function(){return!!this.values_},e.prototype.notify=function(t,e){var o;o="change:"+t,this.dispatchEvent(new F(o,t,e)),o=n,this.dispatchEvent(new F(o,t,e))},e.prototype.addChangeListener=function(t,e){this.addEventListener("change:"+t,e)},e.prototype.removeChangeListener=function(t,e){this.removeEventListener("change:"+t,e)},e.prototype.set=function(t,e,n){var o=this.values_||(this.values_={});if(n)o[t]=e;else{var i=o[t];o[t]=e,i!==e&&this.notify(t,i)}},e.prototype.setProperties=function(t,e){for(var n in t)this.set(n,t[n],e)},e.prototype.applyProperties=function(t){t.values_&&h(this.values_||(this.values_={}),t.values_)},e.prototype.unset=function(t,e){if(this.values_&&t in this.values_){var n=this.values_[t];delete this.values_[t],function(t){var e;for(e in t)return!1;return!e}(this.values_)&&(this.values_=null),e||this.notify(t,n)}},e}(M),D="opacity",z="visible",N="extent",G="zIndex",K="maxResolution",Z="minResolution",V="maxZoom",U="minZoom",X="source";var H=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function o(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}();const B=function(t){function e(e){var n=this,o="Assertion failed. See https://openlayers.org/en/v"+"6.12.0".split("-")[0]+"/doc/errors/#"+e+" for details.";return(n=t.call(this,o)||this).code=e,n.name="AssertionError",n.message=o,n}return H(e,t),e}(Error);function W(t,e){if(!t)throw new B(e)}function Y(t,e,n){return Math.min(Math.max(t,e),n)}var q="cosh"in Math?Math.cosh:function(t){var e=Math.exp(t);return(e+1/e)/2},Q="log2"in Math?Math.log2:function(t){return Math.log(t)*Math.LOG2E};function $(t,e,n,o,i,r){var s=i-n,a=r-o;if(0!==s||0!==a){var l=((t-n)*s+(e-o)*a)/(s*s+a*a);l>1?(n=i,o=r):l>0&&(n+=s*l,o+=a*l)}return J(t,e,n,o)}function J(t,e,n,o){var i=n-t,r=o-e;return i*i+r*r}function tt(t){return 180*t/Math.PI}function et(t){return t*Math.PI/180}function nt(t,e){var n=t%e;return n*e<0?n+e:n}function ot(t,e,n){return t+n*(e-t)}function it(t,e){var n=Math.pow(10,e);return Math.round(t*n)/n}function rt(t,e){return Math.floor(it(t,e))}function st(t,e){return Math.ceil(it(t,e))}var at=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function o(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}();const lt=function(t){function e(e){var n=t.call(this)||this;n.on,n.once,n.un,n.background_=e.background;var o=h({},e);return"object"==typeof e.properties&&(delete o.properties,h(o,e.properties)),o.opacity=void 0!==e.opacity?e.opacity:1,W("number"==typeof o.opacity,64),o.visible=void 0===e.visible||e.visible,o.zIndex=e.zIndex,o.maxResolution=void 0!==e.maxResolution?e.maxResolution:1/0,o.minResolution=void 0!==e.minResolution?e.minResolution:0,o.minZoom=void 0!==e.minZoom?e.minZoom:-1/0,o.maxZoom=void 0!==e.maxZoom?e.maxZoom:1/0,n.className_=void 0!==o.className?e.className:"ol-layer",delete o.className,n.setProperties(o),n.state_=null,n}return at(e,t),e.prototype.getBackground=function(){return this.background_},e.prototype.getClassName=function(){return this.className_},e.prototype.getLayerState=function(t){var e=this.state_||{layer:this,managed:void 0===t||t},n=this.getZIndex();return e.opacity=Y(Math.round(100*this.getOpacity())/100,0,1),e.sourceState=this.getSourceState(),e.visible=this.getVisible(),e.extent=this.getExtent(),e.zIndex=void 0!==n||e.managed?n:1/0,e.maxResolution=this.getMaxResolution(),e.minResolution=Math.max(this.getMinResolution(),0),e.minZoom=this.getMinZoom(),e.maxZoom=this.getMaxZoom(),this.state_=e,e},e.prototype.getLayersArray=function(t){return A()},e.prototype.getLayerStatesArray=function(t){return A()},e.prototype.getExtent=function(){return this.get(N)},e.prototype.getMaxResolution=function(){return this.get(K)},e.prototype.getMinResolution=function(){return this.get(Z)},e.prototype.getMinZoom=function(){return this.get(U)},e.prototype.getMaxZoom=function(){return this.get(V)},e.prototype.getOpacity=function(){return this.get(D)},e.prototype.getSourceState=function(){return A()},e.prototype.getVisible=function(){return this.get(z)},e.prototype.getZIndex=function(){return this.get(G)},e.prototype.setBackground=function(t){this.background_=t,this.changed()},e.prototype.setExtent=function(t){this.set(N,t)},e.prototype.setMaxResolution=function(t){this.set(K,t)},e.prototype.setMinResolution=function(t){this.set(Z,t)},e.prototype.setMaxZoom=function(t){this.set(V,t)},e.prototype.setMinZoom=function(t){this.set(U,t)},e.prototype.setOpacity=function(t){W("number"==typeof t,64),this.set(D,t)},e.prototype.setVisible=function(t){this.set(z,t)},e.prototype.setZIndex=function(t){this.set(G,t)},e.prototype.disposeInternal=function(){this.state_&&(this.state_.layer=null,this.state_=null),t.prototype.disposeInternal.call(this)},e}(k),ut="precompose",ct="rendercomplete",ht="undefined",pt="ready";var dt=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function o(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}();function ft(t,e){if(!t.visible)return!1;var n=e.resolution;if(n<t.minResolution||n>=t.maxResolution)return!1;var o=e.zoom;return o>t.minZoom&&o<=t.maxZoom}const gt=function(t){function e(e){var n=this,o=h({},e);delete o.source,(n=t.call(this,o)||this).on,n.once,n.un,n.mapPrecomposeKey_=null,n.mapRenderKey_=null,n.sourceChangeKey_=null,n.renderer_=null,e.render&&(n.render=e.render),e.map&&n.setMap(e.map),n.addChangeListener(X,n.handleSourcePropertyChange_);var i=e.source?e.source:null;return n.setSource(i),n}return dt(e,t),e.prototype.getLayersArray=function(t){var e=t||[];return e.push(this),e},e.prototype.getLayerStatesArray=function(t){var e=t||[];return e.push(this.getLayerState()),e},e.prototype.getSource=function(){return this.get(X)||null},e.prototype.getSourceState=function(){var t=this.getSource();return t?t.getState():ht},e.prototype.handleSourceChange_=function(){this.changed()},e.prototype.handleSourcePropertyChange_=function(){this.sourceChangeKey_&&(O(this.sourceChangeKey_),this.sourceChangeKey_=null);var t=this.getSource();t&&(this.sourceChangeKey_=T(t,_,this.handleSourceChange_,this)),this.changed()},e.prototype.getFeatures=function(t){return this.renderer_?this.renderer_.getFeatures(t):new Promise((function(t){return t([])}))},e.prototype.render=function(t,e){var n=this.getRenderer();if(n.prepareFrame(t))return n.renderFrame(t,e)},e.prototype.setMapInternal=function(t){this.set("map",t)},e.prototype.getMapInternal=function(){return this.get("map")},e.prototype.setMap=function(t){this.mapPrecomposeKey_&&(O(this.mapPrecomposeKey_),this.mapPrecomposeKey_=null),t||this.changed(),this.mapRenderKey_&&(O(this.mapRenderKey_),this.mapRenderKey_=null),t&&(this.mapPrecomposeKey_=T(t,ut,(function(t){var e=t.frameState.layerStatesArray,n=this.getLayerState(!1);W(!e.some((function(t){return t.layer===n.layer})),67),e.push(n)}),this),this.mapRenderKey_=T(this,_,t.render,t),this.changed())},e.prototype.setSource=function(t){this.set(X,t)},e.prototype.getRenderer=function(){return this.renderer_||(this.renderer_=this.createRenderer()),this.renderer_},e.prototype.hasRenderer=function(){return!!this.renderer_},e.prototype.createRenderer=function(){return null},e.prototype.disposeInternal=function(){this.renderer_&&(this.renderer_.dispose(),delete this.renderer_),this.setSource(null),t.prototype.disposeInternal.call(this)},e}(lt),vt="preload",_t="useInterimTilesOnError";var yt=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function o(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}();const mt=function(t){function e(e){var n=this,o=e||{},i=h({},o);return delete i.preload,delete i.useInterimTilesOnError,(n=t.call(this,i)||this).on,n.once,n.un,n.setPreload(void 0!==o.preload?o.preload:0),n.setUseInterimTilesOnError(void 0===o.useInterimTilesOnError||o.useInterimTilesOnError),n}return yt(e,t),e.prototype.getPreload=function(){return this.get(vt)},e.prototype.setPreload=function(t){this.set(vt,t)},e.prototype.getUseInterimTilesOnError=function(){return this.get(_t)},e.prototype.setUseInterimTilesOnError=function(t){this.set(_t,t)},e}(gt);var wt=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function o(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}();const Ct=function(t){function e(e){var n=t.call(this)||this;return n.boundHandleImageChange_=n.handleImageChange_.bind(n),n.layer_=e,n.declutterExecutorGroup=null,n}return wt(e,t),e.prototype.getFeatures=function(t){return A()},e.prototype.prepareFrame=function(t){return A()},e.prototype.renderFrame=function(t,e){return A()},e.prototype.loadedTileCallback=function(t,e,n){t[e]||(t[e]={}),t[e][n.tileCoord.toString()]=n},e.prototype.createLoadedTileFinder=function(t,e,n){return function(o,i){var r=this.loadedTileCallback.bind(this,n,o);return t.forEachLoadedTile(e,o,i,r)}.bind(this)},e.prototype.forEachFeatureAtCoordinate=function(t,e,n,o,i){},e.prototype.getDataAtPixel=function(t,e,n){return null},e.prototype.getLayer=function(){return this.layer_},e.prototype.handleFontsChanged=function(){},e.prototype.handleImageChange_=function(t){2===t.target.getState()&&this.renderIfReadyAndVisible()},e.prototype.loadImage=function(t){var e=t.getState();return 2!=e&&3!=e&&t.addEventListener(_,this.boundHandleImageChange_),0==e&&(t.load(),e=t.getState()),2==e},e.prototype.renderIfReadyAndVisible=function(){var t=this.getLayer();t.getVisible()&&t.getSourceState()==pt&&t.changed()},e}(M);var xt=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function o(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}();const Et=function(t){function e(e,n,o,i){var r=t.call(this,e)||this;return r.inversePixelTransform=n,r.frameState=o,r.context=i,r}return xt(e,t),e}(e);var bt,Tt="undefined"!=typeof navigator&&void 0!==navigator.userAgent?navigator.userAgent.toLowerCase():"",Pt=-1!==Tt.indexOf("firefox"),Ot=(-1!==Tt.indexOf("safari")&&Tt.indexOf("chrom"),-1!==Tt.indexOf("webkit")&&-1==Tt.indexOf("edge")),Rt=-1!==Tt.indexOf("macintosh"),St="undefined"!=typeof devicePixelRatio?devicePixelRatio:1,Mt="undefined"!=typeof WorkerGlobalScope&&"undefined"!=typeof OffscreenCanvas&&self instanceof WorkerGlobalScope,At="undefined"!=typeof Image&&Image.prototype.decode,It=function(){var t=!1;try{var e=Object.defineProperty({},"passive",{get:function(){t=!0}});window.addEventListener("_",null,e),window.removeEventListener("_",null,e)}catch(t){}return t}();function jt(t,e){var n=e[0],o=e[1];return e[0]=t[0]*n+t[2]*o+t[4],e[1]=t[1]*n+t[3]*o+t[5],e}function Lt(t,e,n,o,i,r,s,a){var l=Math.sin(r),u=Math.cos(r);return t[0]=o*u,t[1]=i*l,t[2]=-o*l,t[3]=i*u,t[4]=s*o*u-a*o*l+e,t[5]=s*i*l+a*i*u+n,t}function Ft(t,e){var n,o=(n=e)[0]*n[3]-n[1]*n[2];W(0!==o,32);var i=e[0],r=e[1],s=e[2],a=e[3],l=e[4],u=e[5];return t[0]=a/o,t[1]=-r/o,t[2]=-s/o,t[3]=i/o,t[4]=(s*u-a*l)/o,t[5]=-(i*u-r*l)/o,t}new Array(6);var kt=/^#([a-f0-9]{3}|[a-f0-9]{4}(?:[a-f0-9]{2}){0,2})$/i,Dt=/^([a-z]*)$|^hsla?\(.*\)$/i;var zt=function(){var t={},e=0;return function(n){var o;if(t.hasOwnProperty(n))o=t[n];else{if(e>=1024){var i=0;for(var r in t)0==(3&i++)&&(delete t[r],--e)}o=function(t){var e,n,o,i,r;if(Dt.exec(t)&&(t=function(t){var e=document.createElement("div");if(e.style.color=t,""!==e.style.color){document.body.appendChild(e);var n=getComputedStyle(e).color;return document.body.removeChild(e),n}return""}(t)),kt.exec(t)){var s,a=t.length-1;s=a<=4?1:2;var l=4===a||8===a;e=parseInt(t.substr(1+0*s,s),16),n=parseInt(t.substr(1+1*s,s),16),o=parseInt(t.substr(1+2*s,s),16),i=l?parseInt(t.substr(1+3*s,s),16):255,1==s&&(e=(e<<4)+e,n=(n<<4)+n,o=(o<<4)+o,l&&(i=(i<<4)+i)),r=[e,n,o,i/255]}else 0==t.indexOf("rgba(")?Gt(r=t.slice(5,-1).split(",").map(Number)):0==t.indexOf("rgb(")?((r=t.slice(4,-1).split(",").map(Number)).push(1),Gt(r)):W(!1,14);return r}(n),t[n]=o,++e}return o}}();function Nt(t){return Array.isArray(t)?t:zt(t)}function Gt(t){return t[0]=Y(t[0]+.5|0,0,255),t[1]=Y(t[1]+.5|0,0,255),t[2]=Y(t[2]+.5|0,0,255),t[3]=Y(t[3],0,1),t}const Kt="top-left";function Zt(t){for(var e=[1/0,1/0,-1/0,-1/0],n=0,o=t.length;n<o;++n)qt(e,t[n]);return e}function Vt(t,e,n){var o,i;return(o=e<t[0]?t[0]-e:t[2]<e?e-t[2]:0)*o+(i=n<t[1]?t[1]-n:t[3]<n?n-t[3]:0)*i}function Ut(t,e){return Xt(t,e[0],e[1])}function Xt(t,e,n){return t[0]<=e&&e<=t[2]&&t[1]<=n&&n<=t[3]}function Ht(t,e){var n=t[0],o=t[1],i=t[2],r=t[3],s=e[0],a=e[1],l=0;return s<n?l|=16:s>i&&(l|=4),a<o?l|=8:a>r&&(l|=2),0===l&&(l=1),l}function Bt(t,e,n,o,i){return i?(i[0]=t,i[1]=e,i[2]=n,i[3]=o,i):[t,e,n,o]}function Wt(t){return Bt(1/0,1/0,-1/0,-1/0,t)}function Yt(t,e){return t[0]==e[0]&&t[2]==e[2]&&t[1]==e[1]&&t[3]==e[3]}function qt(t,e){e[0]<t[0]&&(t[0]=e[0]),e[0]>t[2]&&(t[2]=e[0]),e[1]<t[1]&&(t[1]=e[1]),e[1]>t[3]&&(t[3]=e[1])}function Qt(t,e,n,o,i){for(;n<o;n+=i)$t(t,e[n],e[n+1]);return t}function $t(t,e,n){t[0]=Math.min(t[0],e),t[1]=Math.min(t[1],n),t[2]=Math.max(t[2],e),t[3]=Math.max(t[3],n)}function Jt(t,e){var n;return(n=e(ee(t)))||(n=e(ne(t)))||(n=e(ue(t)))?n:(n=e(le(t)))||!1}function te(t){var e=0;return pe(t)||(e=ce(t)*se(t)),e}function ee(t){return[t[0],t[1]]}function ne(t){return[t[2],t[1]]}function oe(t){return[(t[0]+t[2])/2,(t[1]+t[3])/2]}function ie(t,e){var n;return"bottom-left"===e?n=ee(t):"bottom-right"===e?n=ne(t):e===Kt?n=le(t):"top-right"===e?n=ue(t):W(!1,13),n}function re(t,e,n,o,i){var r=e*o[0]/2,s=e*o[1]/2,a=Math.cos(n),l=Math.sin(n),u=r*a,c=r*l,h=s*a,p=s*l,d=t[0],f=t[1],g=d-u+p,v=d-u-p,_=d+u-p,y=d+u+p,m=f-c-h,w=f-c+h,C=f+c+h,x=f+c-h;return Bt(Math.min(g,v,_,y),Math.min(m,w,C,x),Math.max(g,v,_,y),Math.max(m,w,C,x),i)}function se(t){return t[3]-t[1]}function ae(t,e,n){var o=n||[1/0,1/0,-1/0,-1/0];return he(t,e)?(t[0]>e[0]?o[0]=t[0]:o[0]=e[0],t[1]>e[1]?o[1]=t[1]:o[1]=e[1],t[2]<e[2]?o[2]=t[2]:o[2]=e[2],t[3]<e[3]?o[3]=t[3]:o[3]=e[3]):Wt(o),o}function le(t){return[t[0],t[3]]}function ue(t){return[t[2],t[3]]}function ce(t){return t[2]-t[0]}function he(t,e){return t[0]<=e[2]&&t[2]>=e[0]&&t[1]<=e[3]&&t[3]>=e[1]}function pe(t){return t[2]<t[0]||t[3]<t[1]}function de(t,e,n,o){var i;return i=n&&n.length?n.shift():Mt?new OffscreenCanvas(t||300,e||300):document.createElement("canvas"),t&&(i.width=t),e&&(i.height=e),i.getContext("2d",o)}function fe(t,e){var n=e.parentNode;n&&n.replaceChild(t,e)}function ge(t){return t&&t.parentNode?t.parentNode.removeChild(t):null}var ve=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function o(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}(),_e=function(t){function e(e){var n=t.call(this,e)||this;return n.container=null,n.renderedResolution,n.tempTransform=[1,0,0,1,0,0],n.pixelTransform=[1,0,0,1,0,0],n.inversePixelTransform=[1,0,0,1,0,0],n.context=null,n.containerReused=!1,n.pixelContext_=null,n}return ve(e,t),e.prototype.getBackground=function(t){var e=this.getLayer().getBackground();return"function"==typeof e&&(e=e(t.viewState.resolution)),e||void 0},e.prototype.useContainer=function(t,e,n,o){var i,r,s=this.getLayer().getClassName();if(t&&t.className===s&&""===t.style.opacity&&1===n&&(!o||t.style.backgroundColor&&a(Nt(t.style.backgroundColor),Nt(o)))&&(u=t.firstElementChild)instanceof HTMLCanvasElement&&(r=u.getContext("2d")),r&&r.canvas.style.transform===e?(this.container=t,this.context=r,this.containerReused=!0):this.containerReused&&(this.container=null,this.context=null,this.containerReused=!1),!this.container){(i=document.createElement("div")).className=s;var l=i.style;l.position="absolute",l.width="100%",l.height="100%",o&&(l.backgroundColor=o);var u=(r=de()).canvas;i.appendChild(u),(l=u.style).position="absolute",l.left="0",l.transformOrigin="top left",this.container=i,this.context=r}},e.prototype.clipUnrotated=function(t,e,n){var o=le(n),i=ue(n),r=ne(n),s=ee(n);jt(e.coordinateToPixelTransform,o),jt(e.coordinateToPixelTransform,i),jt(e.coordinateToPixelTransform,r),jt(e.coordinateToPixelTransform,s);var a=this.inversePixelTransform;jt(a,o),jt(a,i),jt(a,r),jt(a,s),t.save(),t.beginPath(),t.moveTo(Math.round(o[0]),Math.round(o[1])),t.lineTo(Math.round(i[0]),Math.round(i[1])),t.lineTo(Math.round(r[0]),Math.round(r[1])),t.lineTo(Math.round(s[0]),Math.round(s[1])),t.clip()},e.prototype.dispatchRenderEvent_=function(t,e,n){var o=this.getLayer();if(o.hasListener(t)){var i=new Et(t,this.inversePixelTransform,n,e);o.dispatchEvent(i)}},e.prototype.preRender=function(t,e){this.dispatchRenderEvent_("prerender",t,e)},e.prototype.postRender=function(t,e){this.dispatchRenderEvent_("postrender",t,e)},e.prototype.getRenderTransform=function(t,e,n,o,i,r,s){var a=i/2,l=r/2,u=o/e,c=-u,h=-t[0]+s,p=-t[1];return Lt(this.tempTransform,a,l,u,c,-n,h,p)},e.prototype.getDataAtPixel=function(t,e,n){var o=jt(this.inversePixelTransform,t.slice()),i=this.context,r=this.getLayer().getExtent();if(r&&!Ut(r,jt(e.pixelToCoordinateTransform,t.slice())))return null;var s,a=Math.round(o[0]),l=Math.round(o[1]),u=this.pixelContext_;if(!u){var c=document.createElement("canvas");c.width=1,c.height=1,u=c.getContext("2d"),this.pixelContext_=u}u.clearRect(0,0,1,1);try{u.drawImage(i.canvas,a,l,1,1,0,0,1,1),s=u.getImageData(0,0,1,1).data}catch(t){return"SecurityError"===t.name?(this.pixelContext_=null,new Uint8Array):s}return 0===s[3]?null:s},e}(Ct);const ye=_e;var me=function(){function t(t,e,n,o){this.minX=t,this.maxX=e,this.minY=n,this.maxY=o}return t.prototype.contains=function(t){return this.containsXY(t[1],t[2])},t.prototype.containsTileRange=function(t){return this.minX<=t.minX&&t.maxX<=this.maxX&&this.minY<=t.minY&&t.maxY<=this.maxY},t.prototype.containsXY=function(t,e){return this.minX<=t&&t<=this.maxX&&this.minY<=e&&e<=this.maxY},t.prototype.equals=function(t){return this.minX==t.minX&&this.minY==t.minY&&this.maxX==t.maxX&&this.maxY==t.maxY},t.prototype.extend=function(t){t.minX<this.minX&&(this.minX=t.minX),t.maxX>this.maxX&&(this.maxX=t.maxX),t.minY<this.minY&&(this.minY=t.minY),t.maxY>this.maxY&&(this.maxY=t.maxY)},t.prototype.getHeight=function(){return this.maxY-this.minY+1},t.prototype.getSize=function(){return[this.getWidth(),this.getHeight()]},t.prototype.getWidth=function(){return this.maxX-this.minX+1},t.prototype.intersects=function(t){return this.minX<=t.maxX&&this.maxX>=t.minX&&this.minY<=t.maxY&&this.maxY>=t.minY},t}();function we(t,e,n,o,i){return void 0!==i?(i.minX=t,i.maxX=e,i.minY=n,i.maxY=o,i):new me(t,e,n,o)}const Ce=me;var xe={imageSmoothingEnabled:!1,msImageSmoothingEnabled:!1},Ee={imageSmoothingEnabled:!0,msImageSmoothingEnabled:!0},be="ol-hidden",Te="ol-control",Pe=(new RegExp(["^\\s*(?=(?:(?:[-a-z]+\\s*){0,2}(italic|oblique))?)","(?=(?:(?:[-a-z]+\\s*){0,2}(small-caps))?)","(?=(?:(?:[-a-z]+\\s*){0,2}(bold(?:er)?|lighter|[1-9]00 ))?)","(?:(?:normal|\\1|\\2|\\3)\\s*){0,3}((?:xx?-)?","(?:small|large)|medium|smaller|larger|[\\.\\d]+(?:\\%|in|[cem]m|ex|p[ctx]))","(?:\\s*\\/\\s*(normal|[\\.\\d]+(?:\\%|in|[cem]m|ex|p[ctx])?))","?\\s*([-,\\\"\\'\\sa-z]+?)\\s*$"].join(""),"i"),{RADIANS:"radians",DEGREES:"degrees",FEET:"ft",METERS:"m",PIXELS:"pixels",TILE_PIXELS:"tile-pixels",USFEET:"us-ft"}),Oe={};Oe[Pe.RADIANS]=6370997/(2*Math.PI),Oe[Pe.DEGREES]=2*Math.PI*6370997/360,Oe[Pe.FEET]=.3048,Oe[Pe.METERS]=1,Oe[Pe.USFEET]=1200/3937;const Re=Pe,Se=function(){function t(t){this.code_=t.code,this.units_=t.units,this.extent_=void 0!==t.extent?t.extent:null,this.worldExtent_=void 0!==t.worldExtent?t.worldExtent:null,this.axisOrientation_=void 0!==t.axisOrientation?t.axisOrientation:"enu",this.global_=void 0!==t.global&&t.global,this.canWrapX_=!(!this.global_||!this.extent_),this.getPointResolutionFunc_=t.getPointResolution,this.defaultTileGrid_=null,this.metersPerUnit_=t.metersPerUnit}return t.prototype.canWrapX=function(){return this.canWrapX_},t.prototype.getCode=function(){return this.code_},t.prototype.getExtent=function(){return this.extent_},t.prototype.getUnits=function(){return this.units_},t.prototype.getMetersPerUnit=function(){return this.metersPerUnit_||Oe[this.units_]},t.prototype.getWorldExtent=function(){return this.worldExtent_},t.prototype.getAxisOrientation=function(){return this.axisOrientation_},t.prototype.isGlobal=function(){return this.global_},t.prototype.setGlobal=function(t){this.global_=t,this.canWrapX_=!(!t||!this.extent_)},t.prototype.getDefaultTileGrid=function(){return this.defaultTileGrid_},t.prototype.setDefaultTileGrid=function(t){this.defaultTileGrid_=t},t.prototype.setExtent=function(t){this.extent_=t,this.canWrapX_=!(!this.global_||!t)},t.prototype.setWorldExtent=function(t){this.worldExtent_=t},t.prototype.setGetPointResolution=function(t){this.getPointResolutionFunc_=t},t.prototype.getPointResolutionFunc=function(){return this.getPointResolutionFunc_},t}();var Me=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function o(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}(),Ae=6378137,Ie=Math.PI*Ae,je=[-Ie,-Ie,Ie,Ie],Le=[-180,-85,180,85],Fe=Ae*Math.log(Math.tan(Math.PI/2)),ke=function(t){function e(e){return t.call(this,{code:e,units:Re.METERS,extent:je,global:!0,worldExtent:Le,getPointResolution:function(t,e){return t/q(e[1]/Ae)}})||this}return Me(e,t),e}(Se),De=[new ke("EPSG:3857"),new ke("EPSG:102100"),new ke("EPSG:102113"),new ke("EPSG:900913"),new ke("http://www.opengis.net/def/crs/EPSG/0/3857"),new ke("http://www.opengis.net/gml/srs/epsg.xml#3857")];var ze=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function o(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}(),Ne=[-180,-90,180,90],Ge=6378137*Math.PI/180,Ke=function(t){function e(e,n){return t.call(this,{code:e,units:Re.DEGREES,extent:Ne,axisOrientation:n,global:!0,metersPerUnit:Ge,worldExtent:Ne})||this}return ze(e,t),e}(Se),Ze=[new Ke("CRS:84"),new Ke("EPSG:4326","neu"),new Ke("urn:ogc:def:crs:OGC:1.3:CRS84"),new Ke("urn:ogc:def:crs:OGC:2:84"),new Ke("http://www.opengis.net/def/crs/OGC/1.3/CRS84"),new Ke("http://www.opengis.net/gml/srs/epsg.xml#4326","neu"),new Ke("http://www.opengis.net/def/crs/EPSG/0/4326","neu")],Ve={},Ue={};function Xe(t,e,n){var o=t.getCode(),i=e.getCode();o in Ue||(Ue[o]={}),Ue[o][i]=n}var He=6371008.8;function Be(t,e,n){var o=n||He,i=et(t[1]),r=et(e[1]),s=(r-i)/2,a=et(e[0]-t[0])/2,l=Math.sin(s)*Math.sin(s)+Math.sin(a)*Math.sin(a)*Math.cos(i)*Math.cos(r);return 2*o*Math.atan2(Math.sqrt(l),Math.sqrt(1-l))}function We(t,e,n,o){var i=o||He,r=et(t[1]),s=et(t[0]),a=e/i,l=Math.asin(Math.sin(r)*Math.cos(a)+Math.cos(r)*Math.sin(a)*Math.cos(n));return[tt(s+Math.atan2(Math.sin(n)*Math.sin(a)*Math.cos(r),Math.cos(a)-Math.sin(r)*Math.sin(l))),tt(l)]}function Ye(t,e,n){var o;if(void 0!==e){for(var i=0,r=t.length;i<r;++i)e[i]=t[i];o=e}else o=t.slice();return o}function qe(t,e,n){if(void 0!==e&&t!==e){for(var o=0,i=t.length;o<i;++o)e[o]=t[o];t=e}return t}function Qe(t){!function(t,e){Ve[t]=e}(t.getCode(),t),Xe(t,t,Ye)}function $e(t){return"string"==typeof t?Ve[e=t]||Ve[e.replace(/urn:(x-)?ogc:def:crs:EPSG:(.*:)?(\w+)$/,"EPSG:$3")]||null:t||null;var e}function Je(t,e,n,o){var i,r=(t=$e(t)).getPointResolutionFunc();if(r)i=r(e,n),o&&o!==t.getUnits()&&(a=t.getMetersPerUnit())&&(i=i*a/Oe[o]);else{var s=t.getUnits();if(s==Re.DEGREES&&!o||o==Re.DEGREES)i=e;else{var a,l=on(t,$e("EPSG:4326"));if(l===qe&&s!==Re.DEGREES)i=e*t.getMetersPerUnit();else{var u=[n[0]-e/2,n[1],n[0]+e/2,n[1],n[0],n[1]-e/2,n[0],n[1]+e/2];i=(Be((u=l(u,u,2)).slice(0,2),u.slice(2,4))+Be(u.slice(4,6),u.slice(6,8)))/2}void 0!==(a=o?Oe[o]:t.getMetersPerUnit())&&(i/=a)}}return i}function tn(t){!function(t){t.forEach(Qe)}(t),t.forEach((function(e){t.forEach((function(t){e!==t&&Xe(e,t,Ye)}))}))}function en(t,e){return t?"string"==typeof t?$e(t):t:$e(e)}function nn(t,e){if(t===e)return!0;var n=t.getUnits()===e.getUnits();return(t.getCode()===e.getCode()||on(t,e)===Ye)&&n}function on(t,e){var n=function(t,e){var n;return t in Ue&&e in Ue[t]&&(n=Ue[t][e]),n}(t.getCode(),e.getCode());return n||(n=qe),n}function rn(t,e){return on($e(t),$e(e))}function sn(t,e,n){return rn(e,n)(t,void 0,t.length)}var an,ln,un,cn=null;function hn(){return cn}function pn(t,e){return t}function dn(t,e){return t}function fn(t,e){return t}tn(De),tn(Ze),an=De,ln=function(t,e,n){var o=t.length,i=n>1?n:2,r=e;void 0===r&&(r=i>2?t.slice():new Array(o));for(var s=0;s<o;s+=i){r[s]=Ie*t[s]/180;var a=Ae*Math.log(Math.tan(Math.PI*(+t[s+1]+90)/360));a>Fe?a=Fe:a<-Fe&&(a=-Fe),r[s+1]=a}return r},un=function(t,e,n){var o=t.length,i=n>1?n:2,r=e;void 0===r&&(r=i>2?t.slice():new Array(o));for(var s=0;s<o;s+=i)r[s]=180*t[s]/Ie,r[s+1]=360*Math.atan(Math.exp(t[s+1]/Ae))/Math.PI-90;return r},Ze.forEach((function(t){an.forEach((function(e){Xe(t,e,ln),Xe(e,t,un)}))}));var gn=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function o(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}(),vn=function(t){function e(e){var n=t.call(this,e)||this;return n.extentChanged=!0,n.renderedExtent_=null,n.renderedPixelRatio,n.renderedProjection=null,n.renderedRevision,n.renderedTiles=[],n.newTiles_=!1,n.tmpExtent=[1/0,1/0,-1/0,-1/0],n.tmpTileRange_=new Ce(0,0,0,0),n}return gn(e,t),e.prototype.isDrawableTile=function(t){var e=this.getLayer(),n=t.getState(),o=e.getUseInterimTilesOnError();return 2==n||4==n||3==n&&!o},e.prototype.getTile=function(t,e,n,o){var i=o.pixelRatio,r=o.viewState.projection,s=this.getLayer(),a=s.getSource().getTile(t,e,n,i,r);return 3==a.getState()&&(s.getUseInterimTilesOnError()?s.getPreload()>0&&(this.newTiles_=!0):a.setState(2)),this.isDrawableTile(a)||(a=a.getInterimTile()),a},e.prototype.loadedTileCallback=function(e,n,o){return!!this.isDrawableTile(o)&&t.prototype.loadedTileCallback.call(this,e,n,o)},e.prototype.prepareFrame=function(t){return!!this.getLayer().getSource()},e.prototype.renderFrame=function(t,e){var n=t.layerStatesArray[t.layerIndex],o=t.viewState,r=o.projection,s=o.resolution,a=o.center,l=o.rotation,u=t.pixelRatio,c=this.getLayer(),p=c.getSource(),d=p.getRevision(),f=p.getTileGridForProjection(r),g=f.getZForResolution(s,p.zDirection),v=f.getResolution(g),_=t.extent,y=n.extent&&fn(n.extent);y&&(_=ae(_,fn(n.extent)));var m=p.getTilePixelRatio(u),w=Math.round(t.size[0]*m),C=Math.round(t.size[1]*m);if(l){var x=Math.round(Math.sqrt(w*w+C*C));w=x,C=x}var E=v*w/2/m,b=v*C/2/m,T=[a[0]-E,a[1]-b,a[0]+E,a[1]+b],P=f.getTileRangeForExtentAndZ(_,g),O={};O[g]={};var R=this.createLoadedTileFinder(p,r,O),S=this.tmpExtent,M=this.tmpTileRange_;this.newTiles_=!1;for(var A=P.minX;A<=P.maxX;++A)for(var I=P.minY;I<=P.maxY;++I){var L=this.getTile(g,A,I,t);if(this.isDrawableTile(L)){var F=j(this);if(2==L.getState()){O[g][L.tileCoord.toString()]=L;var k=L.inTransition(F);this.newTiles_||!k&&-1!==this.renderedTiles.indexOf(L)||(this.newTiles_=!0)}if(1===L.getAlpha(F,t.time))continue}var D=f.getTileCoordChildTileRange(L.tileCoord,M,S),z=!1;D&&(z=R(g+1,D)),z||f.forEachTileCoordParentTileRange(L.tileCoord,R,M,S)}var N=v/s;Lt(this.pixelTransform,t.size[0]/2,t.size[1]/2,1/m,1/m,l,-w/2,-C/2);var G=function(t){var e="matrix("+t.join(", ")+")";if(Mt)return e;var n=bt||(bt=document.createElement("div"));return n.style.transform=e,n.style.transform}(this.pixelTransform);this.useContainer(e,G,n.opacity,this.getBackground(t));var K=this.context,Z=K.canvas;Ft(this.inversePixelTransform,this.pixelTransform),Lt(this.tempTransform,w/2,C/2,N,N,0,-w/2,-C/2),Z.width!=w||Z.height!=C?(Z.width=w,Z.height=C):this.containerReused||K.clearRect(0,0,w,C),y&&this.clipUnrotated(K,t,y),p.getInterpolate()||h(K,xe),this.preRender(K,t),this.renderedTiles.length=0;var V,U,X,H=Object.keys(O).map(Number);H.sort(i),1!==n.opacity||this.containerReused&&!p.getOpaque(t.viewState.projection)?(V=[],U=[]):H=H.reverse();for(var B=H.length-1;B>=0;--B){var W=H[B],Y=p.getTilePixelSize(W,u,r),q=f.getResolution(W)/v,Q=Y[0]*q*N,$=Y[1]*q*N,J=f.getTileCoordForCoordAndZ(le(T),W),tt=f.getTileCoordExtent(J),et=jt(this.tempTransform,[m*(tt[0]-T[0])/v,m*(T[3]-tt[3])/v]),nt=m*p.getGutterForProjection(r),ot=O[W];for(var it in ot){var rt=(L=ot[it]).tileCoord,st=J[1]-rt[1],at=Math.round(et[0]-(st-1)*Q),lt=J[2]-rt[2],ut=Math.round(et[1]-(lt-1)*$),ct=at-(A=Math.round(et[0]-st*Q)),ht=ut-(I=Math.round(et[1]-lt*$)),pt=g===W;if(!(k=pt&&1!==L.getAlpha(j(this),t.time)))if(V){K.save(),X=[A,I,A+ct,I,A+ct,I+ht,A,I+ht];for(var dt=0,ft=V.length;dt<ft;++dt)if(g!==W&&W<U[dt]){var gt=V[dt];K.beginPath(),K.moveTo(X[0],X[1]),K.lineTo(X[2],X[3]),K.lineTo(X[4],X[5]),K.lineTo(X[6],X[7]),K.moveTo(gt[6],gt[7]),K.lineTo(gt[4],gt[5]),K.lineTo(gt[2],gt[3]),K.lineTo(gt[0],gt[1]),K.clip()}V.push(X),U.push(W)}else K.clearRect(A,I,ct,ht);this.drawTileImage(L,t,A,I,ct,ht,nt,pt),V&&!k?(K.restore(),this.renderedTiles.unshift(L)):this.renderedTiles.push(L),this.updateUsedTiles(t.usedTiles,p,L)}}this.renderedRevision=d,this.renderedResolution=v,this.extentChanged=!this.renderedExtent_||!Yt(this.renderedExtent_,T),this.renderedExtent_=T,this.renderedPixelRatio=u,this.renderedProjection=r,this.manageTilePyramid(t,p,f,u,r,_,g,c.getPreload()),this.scheduleExpireCache(t,p),this.postRender(K,t),n.extent&&K.restore(),h(K,Ee),G!==Z.style.transform&&(Z.style.transform=G);var vt=function(t){return 1===t?"":String(Math.round(100*t)/100)}(n.opacity),_t=this.container;return vt!==_t.style.opacity&&(_t.style.opacity=vt),this.container},e.prototype.drawTileImage=function(t,e,n,o,i,r,s,a){var l=this.getTileImage(t);if(l){var u=j(this),c=a?t.getAlpha(u,e.time):1,h=c!==this.context.globalAlpha;h&&(this.context.save(),this.context.globalAlpha=c),this.context.drawImage(l,s,s,l.width-2*s,l.height-2*s,n,o,i,r),h&&this.context.restore(),1!==c?e.animate=!0:a&&t.endTransition(u)}},e.prototype.getImage=function(){var t=this.context;return t?t.canvas:null},e.prototype.getTileImage=function(t){return t.getImage()},e.prototype.scheduleExpireCache=function(t,e){if(e.canExpireCache()){var n=function(t,e,n){var o=j(t);o in n.usedTiles&&t.expireCache(n.viewState.projection,n.usedTiles[o])}.bind(null,e);t.postRenderFunctions.push(n)}},e.prototype.updateUsedTiles=function(t,e,n){var o=j(e);o in t||(t[o]={}),t[o][n.getKey()]=!0},e.prototype.manageTilePyramid=function(t,e,n,o,i,r,s,a,l){var u=j(e);u in t.wantedTiles||(t.wantedTiles[u]={});var c,h,p,d,f,g,v=t.wantedTiles[u],_=t.tileQueue,y=0;for(g=n.getMinZoom();g<=s;++g)for(h=n.getTileRangeForExtentAndZ(r,g,h),p=n.getResolution(g),d=h.minX;d<=h.maxX;++d)for(f=h.minY;f<=h.maxY;++f)s-g<=a?(++y,0==(c=e.getTile(g,d,f,o,i)).getState()&&(v[c.getKey()]=!0,_.isKeyQueued(c.getKey())||_.enqueue([c,u,n.getTileCoordCenter(c.tileCoord),p])),void 0!==l&&l(c)):e.useTile(g,d,f,i);e.updateCacheSize(y,i)},e}(ye);vn.prototype.getLayer;const _n=vn;var yn=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function o(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}();const mn=function(t){function e(e){return t.call(this,e)||this}return yn(e,t),e.prototype.createRenderer=function(){return new _n(this)},e}(mt),wn={CENTER:"center",RESOLUTION:"resolution",ROTATION:"rotation"};function Cn(t,e){for(var n=!0,o=t.length-1;o>=0;--o)if(t[o]!=e[o]){n=!1;break}return n}function xn(t,e){var n=Math.cos(e),o=Math.sin(e),i=t[0]*n-t[1]*o,r=t[1]*n+t[0]*o;return t[0]=i,t[1]=r,t}function En(t,e,n){return function(o,i,r,s,a){if(o){var l=e?0:r[0]*i,u=e?0:r[1]*i,c=a?a[0]:0,h=a?a[1]:0,p=t[0]+l/2+c,d=t[2]-l/2+c,f=t[1]+u/2+h,g=t[3]-u/2+h;p>d&&(d=p=(d+p)/2),f>g&&(g=f=(g+f)/2);var v=Y(o[0],p,d),_=Y(o[1],f,g),y=30*i;return s&&n&&(v+=-y*Math.log(1+Math.max(0,p-o[0])/y)+y*Math.log(1+Math.max(0,o[0]-d)/y),_+=-y*Math.log(1+Math.max(0,f-o[1])/y)+y*Math.log(1+Math.max(0,o[1]-g)/y)),[v,_]}}}function bn(t){return t}function Tn(t,e,n,o){var i=ce(e)/n[0],r=se(e)/n[1];return o?Math.min(t,Math.max(i,r)):Math.min(t,Math.min(i,r))}function Pn(t,e,n){var o=Math.min(t,e);return o*=Math.log(1+50*Math.max(0,t/e-1))/50+1,n&&(o=Math.max(o,n),o/=Math.log(1+50*Math.max(0,n/t-1))/50+1),Y(o,n/2,2*e)}function On(t,e,n,o,i){return function(r,s,a,l){if(void 0!==r){var u=o?Tn(t,o,a,i):t;return(void 0===n||n)&&l?Pn(r,u,e):Y(r,e,u)}}}function Rn(t){return void 0!==t?0:void 0}function Sn(t){return void 0!==t?t:void 0}function Mn(t){return Math.pow(t,3)}function An(t){return 1-Mn(1-t)}function In(t){return 3*t*t-2*t*t*t}function jn(t){return t}const Ln="XY",Fn="XYZM";var kn=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function o(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}(),Dn=[1,0,0,1,0,0],zn=function(t){function e(){var e,n,o,i,r,s=t.call(this)||this;return s.extent_=[1/0,1/0,-1/0,-1/0],s.extentRevision_=-1,s.simplifiedGeometryMaxMinSquaredTolerance=0,s.simplifiedGeometryRevision=0,s.simplifyTransformedInternal=(e=function(t,e,n){if(!n)return this.getSimplifiedGeometry(e);var o=this.clone();return o.applyTransform(n),o.getSimplifiedGeometry(e)},r=!1,function(){var t=Array.prototype.slice.call(arguments);return r&&this===i&&a(t,o)||(r=!0,i=this,o=t,n=e.apply(this,arguments)),n}),s}return kn(e,t),e.prototype.simplifyTransformed=function(t,e){return this.simplifyTransformedInternal(this.getRevision(),t,e)},e.prototype.clone=function(){return A()},e.prototype.closestPointXY=function(t,e,n,o){return A()},e.prototype.containsXY=function(t,e){var n=this.getClosestPoint([t,e]);return n[0]===t&&n[1]===e},e.prototype.getClosestPoint=function(t,e){var n=e||[NaN,NaN];return this.closestPointXY(t[0],t[1],n,1/0),n},e.prototype.intersectsCoordinate=function(t){return this.containsXY(t[0],t[1])},e.prototype.computeExtent=function(t){return A()},e.prototype.getExtent=function(t){if(this.extentRevision_!=this.getRevision()){var e=this.computeExtent(this.extent_);(isNaN(e[0])||isNaN(e[1]))&&Wt(e),this.extentRevision_=this.getRevision()}return function(t,e){return e?(e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e):t}(this.extent_,t)},e.prototype.rotate=function(t,e){A()},e.prototype.scale=function(t,e,n){A()},e.prototype.simplify=function(t){return this.getSimplifiedGeometry(t*t)},e.prototype.getSimplifiedGeometry=function(t){return A()},e.prototype.getType=function(){return A()},e.prototype.applyTransform=function(t){A()},e.prototype.intersectsExtent=function(t){return A()},e.prototype.translate=function(t,e){A()},e.prototype.transform=function(t,e){var n=$e(t),o=n.getUnits()==Re.TILE_PIXELS?function(t,o,i){var r=n.getExtent(),s=n.getWorldExtent(),a=se(s)/se(r);return Lt(Dn,s[0],s[3],a,-a,0,0,0),function(t,e,n,o,i,r){for(var s=r||[],a=0,l=0;l<n;l+=o){var u=t[l],c=t[l+1];s[a++]=i[0]*u+i[2]*c+i[4],s[a++]=i[1]*u+i[3]*c+i[5]}r&&s.length!=a&&(s.length=a)}(t,0,t.length,i,Dn,o),rn(n,e)(t,o,i)}:rn(n,e);return this.applyTransform(o),this},e}(k);const Nn=zn;var Gn=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function o(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}(),Kn=function(t){function e(){var e=t.call(this)||this;return e.layout=Ln,e.stride=2,e.flatCoordinates=null,e}return Gn(e,t),e.prototype.computeExtent=function(t){return e=this.flatCoordinates,n=this.flatCoordinates.length,o=this.stride,Qt(Wt(t),e,0,n,o);var e,n,o},e.prototype.getCoordinates=function(){return A()},e.prototype.getFirstCoordinate=function(){return this.flatCoordinates.slice(0,this.stride)},e.prototype.getFlatCoordinates=function(){return this.flatCoordinates},e.prototype.getLastCoordinate=function(){return this.flatCoordinates.slice(this.flatCoordinates.length-this.stride)},e.prototype.getLayout=function(){return this.layout},e.prototype.getSimplifiedGeometry=function(t){if(this.simplifiedGeometryRevision!==this.getRevision()&&(this.simplifiedGeometryMaxMinSquaredTolerance=0,this.simplifiedGeometryRevision=this.getRevision()),t<0||0!==this.simplifiedGeometryMaxMinSquaredTolerance&&t<=this.simplifiedGeometryMaxMinSquaredTolerance)return this;var e=this.getSimplifiedGeometryInternal(t);return e.getFlatCoordinates().length<this.flatCoordinates.length?e:(this.simplifiedGeometryMaxMinSquaredTolerance=t,this)},e.prototype.getSimplifiedGeometryInternal=function(t){return this},e.prototype.getStride=function(){return this.stride},e.prototype.setFlatCoordinates=function(t,e){this.stride=Zn(t),this.layout=t,this.flatCoordinates=e},e.prototype.setCoordinates=function(t,e){A()},e.prototype.setLayout=function(t,e,n){var o;if(t)o=Zn(t);else{for(var i=0;i<n;++i){if(0===e.length)return this.layout=Ln,void(this.stride=2);e=e[0]}t=function(t){var e;return 2==t?e=Ln:3==t?e="XYZ":4==t&&(e=Fn),e}(o=e.length)}this.layout=t,this.stride=o},e.prototype.applyTransform=function(t){this.flatCoordinates&&(t(this.flatCoordinates,this.flatCoordinates,this.stride),this.changed())},e.prototype.rotate=function(t,e){var n=this.getFlatCoordinates();if(n){var o=this.getStride();!function(t,e,n,o,i,r,s){for(var a=s||[],l=Math.cos(i),u=Math.sin(i),c=r[0],h=r[1],p=0,d=0;d<n;d+=o){var f=t[d]-c,g=t[d+1]-h;a[p++]=c+f*l-g*u,a[p++]=h+f*u+g*l;for(var v=d+2;v<d+o;++v)a[p++]=t[v]}s&&a.length!=p&&(a.length=p)}(n,0,n.length,o,t,e,n),this.changed()}},e.prototype.scale=function(t,e,n){var o=e;void 0===o&&(o=t);var i=n;i||(i=oe(this.getExtent()));var r=this.getFlatCoordinates();if(r){var s=this.getStride();!function(t,e,n,o,i,r,s,a){for(var l=a||[],u=s[0],c=s[1],h=0,p=0;p<n;p+=o){var d=t[p]-u,f=t[p+1]-c;l[h++]=u+i*d,l[h++]=c+r*f;for(var g=p+2;g<p+o;++g)l[h++]=t[g]}a&&l.length!=h&&(l.length=h)}(r,0,r.length,s,t,o,i,r),this.changed()}},e.prototype.translate=function(t,e){var n=this.getFlatCoordinates();if(n){var o=this.getStride();!function(t,e,n,o,i,r,s){for(var a=s||[],l=0,u=0;u<n;u+=o){a[l++]=t[u]+i,a[l++]=t[u+1]+r;for(var c=u+2;c<u+o;++c)a[l++]=t[c]}s&&a.length!=l&&(a.length=l)}(n,0,n.length,o,t,e,n),this.changed()}},e}(Nn);function Zn(t){var e;return t==Ln?e=2:"XYZ"==t||"XYM"==t?e=3:t==Fn&&(e=4),e}const Vn=Kn;function Un(t,e,n,o,i,r,s){var a,l=t[e],u=t[e+1],c=t[n]-l,h=t[n+1]-u;if(0===c&&0===h)a=e;else{var p=((i-l)*c+(r-u)*h)/(c*c+h*h);if(p>1)a=n;else{if(p>0){for(var d=0;d<o;++d)s[d]=ot(t[e+d],t[n+d],p);return void(s.length=o)}a=e}}for(d=0;d<o;++d)s[d]=t[a+d];s.length=o}function Xn(t,e,n,o,i){var r=t[e],s=t[e+1];for(e+=o;e<n;e+=o){var a=t[e],l=t[e+1],u=J(r,s,a,l);u>i&&(i=u),r=a,s=l}return i}function Hn(t,e,n,o,i,r,s,a,l,u,c){if(e==n)return u;var h,p;if(0===i){if((p=J(s,a,t[e],t[e+1]))<u){for(h=0;h<o;++h)l[h]=t[e+h];return l.length=o,p}return u}for(var d=c||[NaN,NaN],f=e+o;f<n;)if(Un(t,f-o,f,o,s,a,d),(p=J(s,a,d[0],d[1]))<u){for(u=p,h=0;h<o;++h)l[h]=d[h];l.length=o,f+=o}else f+=o*Math.max((Math.sqrt(p)-Math.sqrt(u))/i|0,1);if(r&&(Un(t,n-o,e,o,s,a,d),(p=J(s,a,d[0],d[1]))<u)){for(u=p,h=0;h<o;++h)l[h]=d[h];l.length=o}return u}function Bn(t,e,n,o){for(var i=0,r=n.length;i<r;++i)for(var s=n[i],a=0;a<o;++a)t[e++]=s[a];return e}function Wn(t,e){return e*Math.round(t/e)}function Yn(t,e,n,o,i,r,s){if(e==n)return s;var a,l,u=Wn(t[e],i),c=Wn(t[e+1],i);e+=o,r[s++]=u,r[s++]=c;do{if(a=Wn(t[e],i),l=Wn(t[e+1],i),(e+=o)==n)return r[s++]=a,r[s++]=l,s}while(a==u&&l==c);for(;e<n;){var h=Wn(t[e],i),p=Wn(t[e+1],i);if(e+=o,h!=a||p!=l){var d=a-u,f=l-c,g=h-u,v=p-c;d*v==f*g&&(d<0&&g<d||d==g||d>0&&g>d)&&(f<0&&v<f||f==v||f>0&&v>f)?(a=h,l=p):(r[s++]=a,r[s++]=l,u=a,c=l,a=h,l=p)}}return r[s++]=a,r[s++]=l,s}function qn(t,e,n,o,i){for(var r=void 0!==i?i:[],s=0,a=e;a<n;a+=o)r[s++]=t.slice(a,a+o);return r.length=s,r}function Qn(t,e,n,o){for(var i=0,r=t[n-o],s=t[n-o+1];e<n;e+=o){var a=t[e],l=t[e+1];i+=s*a-r*l,r=a,s=l}return i/2}var $n=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function o(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}(),Jn=function(t){function e(e,n){var o=t.call(this)||this;return o.maxDelta_=-1,o.maxDeltaRevision_=-1,void 0===n||Array.isArray(e[0])?o.setCoordinates(e,n):o.setFlatCoordinates(n,e),o}return $n(e,t),e.prototype.clone=function(){return new e(this.flatCoordinates.slice(),this.layout)},e.prototype.closestPointXY=function(t,e,n,o){return o<Vt(this.getExtent(),t,e)?o:(this.maxDeltaRevision_!=this.getRevision()&&(this.maxDelta_=Math.sqrt(Xn(this.flatCoordinates,0,this.flatCoordinates.length,this.stride,0)),this.maxDeltaRevision_=this.getRevision()),Hn(this.flatCoordinates,0,this.flatCoordinates.length,this.stride,this.maxDelta_,!0,t,e,n,o))},e.prototype.getArea=function(){return Qn(this.flatCoordinates,0,this.flatCoordinates.length,this.stride)},e.prototype.getCoordinates=function(){return qn(this.flatCoordinates,0,this.flatCoordinates.length,this.stride)},e.prototype.getSimplifiedGeometryInternal=function(t){var n=[];return n.length=function(t,e,n,o,i,r,s){var a=(n-e)/o;if(a<3){for(;e<n;e+=o)r[s++]=t[e],r[s++]=t[e+1];return s}var l=new Array(a);l[0]=1,l[a-1]=1;for(var u=[e,n-o],c=0;u.length>0;){for(var h=u.pop(),p=u.pop(),d=0,f=t[p],g=t[p+1],v=t[h],_=t[h+1],y=p+o;y<h;y+=o){var m=$(t[y],t[y+1],f,g,v,_);m>d&&(c=y,d=m)}d>i&&(l[(c-e)/o]=1,p+o<c&&u.push(p,c),c+o<h&&u.push(c,h))}for(y=0;y<a;++y)l[y]&&(r[s++]=t[e+y*o],r[s++]=t[e+y*o+1]);return s}(this.flatCoordinates,0,this.flatCoordinates.length,this.stride,t,n,0),new e(n,Ln)},e.prototype.getType=function(){return"LinearRing"},e.prototype.intersectsExtent=function(t){return!1},e.prototype.setCoordinates=function(t,e){this.setLayout(e,t,1),this.flatCoordinates||(this.flatCoordinates=[]),this.flatCoordinates.length=Bn(this.flatCoordinates,0,t,this.stride),this.changed()},e}(Vn);const to=Jn;var eo=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function o(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}(),no=function(t){function e(e,n){var o=t.call(this)||this;return o.setCoordinates(e,n),o}return eo(e,t),e.prototype.clone=function(){var t=new e(this.flatCoordinates.slice(),this.layout);return t.applyProperties(this),t},e.prototype.closestPointXY=function(t,e,n,o){var i=this.flatCoordinates,r=J(t,e,i[0],i[1]);if(r<o){for(var s=this.stride,a=0;a<s;++a)n[a]=i[a];return n.length=s,r}return o},e.prototype.getCoordinates=function(){return this.flatCoordinates?this.flatCoordinates.slice():[]},e.prototype.computeExtent=function(t){return n=t,Bt(o=(e=this.flatCoordinates)[0],i=e[1],o,i,n);var e,n,o,i},e.prototype.getType=function(){return"Point"},e.prototype.intersectsExtent=function(t){return Xt(t,this.flatCoordinates[0],this.flatCoordinates[1])},e.prototype.setCoordinates=function(t,e){this.setLayout(e,t,0),this.flatCoordinates||(this.flatCoordinates=[]),this.flatCoordinates.length=function(t,e,n,o){for(var i=0,r=n.length;i<r;++i)t[e++]=n[i];return e}(this.flatCoordinates,0,t,this.stride),this.changed()},e}(Vn);const oo=no;function io(t,e,n,o,i){return!Jt(i,(function(i){return!ro(t,e,n,o,i[0],i[1])}))}function ro(t,e,n,o,i,r){for(var s=0,a=t[n-o],l=t[n-o+1];e<n;e+=o){var u=t[e],c=t[e+1];l<=r?c>r&&(u-a)*(r-l)-(i-a)*(c-l)>0&&s++:c<=r&&(u-a)*(r-l)-(i-a)*(c-l)<0&&s--,a=u,l=c}return 0!==s}function so(t,e,n,o,i,r){if(0===n.length)return!1;if(!ro(t,e,n[0],o,i,r))return!1;for(var s=1,a=n.length;s<a;++s)if(ro(t,n[s-1],n[s],o,i,r))return!1;return!0}function ao(t,e,n,o,i){var r,s,a=Qt([1/0,1/0,-1/0,-1/0],t,e,n,o);return!!he(i,a)&&(s=a,(r=i)[0]<=s[0]&&s[2]<=r[2]&&r[1]<=s[1]&&s[3]<=r[3]||a[0]>=i[0]&&a[2]<=i[2]||a[1]>=i[1]&&a[3]<=i[3]||function(t,e,n,o,r){var s,a,l;for(e+=o;e<n;e+=o)if(a=t.slice(e-o,e),l=t.slice(e,e+o),s=function(t,e,n){var o=!1,i=Ht(t,e),r=Ht(t,n);if(1===i||1===r)o=!0;else{var s=t[0],a=t[1],l=t[2],u=t[3],c=e[0],h=e[1],p=n[0],d=n[1],f=(d-h)/(p-c),g=void 0,v=void 0;2&r&&!(2&i)&&(o=(g=p-(d-u)/f)>=s&&g<=l),o||!(4&r)||4&i||(o=(v=d-(p-l)*f)>=a&&v<=u),o||!(8&r)||8&i||(o=(g=p-(d-a)/f)>=s&&g<=l),o||!(16&r)||16&i||(o=(v=d-(p-s)*f)>=a&&v<=u)}return o}(i,a,l))return s;return!1}(t,e,n,o))}function lo(t,e,n,o){for(;e<n-o;){for(var i=0;i<o;++i){var r=t[e+i];t[e+i]=t[n-o+i],t[n-o+i]=r}e+=o,n-=o}}function uo(t,e,n,o){for(var i=0,r=t[n-o],s=t[n-o+1];e<n;e+=o){var a=t[e],l=t[e+1];i+=(a-r)*(l+s),r=a,s=l}return 0===i?void 0:i>0}function co(t,e,n,o,i){for(var r=void 0!==i&&i,s=0,a=n.length;s<a;++s){var l=n[s],u=uo(t,e,l,o);(0===s?r&&u||!r&&!u:r&&!u||!r&&u)&&lo(t,e,l,o),e=l}return e}var ho=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function o(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}(),po=function(t){function e(e,n,o){var i=t.call(this)||this;return i.ends_=[],i.flatInteriorPointRevision_=-1,i.flatInteriorPoint_=null,i.maxDelta_=-1,i.maxDeltaRevision_=-1,i.orientedRevision_=-1,i.orientedFlatCoordinates_=null,void 0!==n&&o?(i.setFlatCoordinates(n,e),i.ends_=o):i.setCoordinates(e,n),i}return ho(e,t),e.prototype.appendLinearRing=function(t){this.flatCoordinates?s(this.flatCoordinates,t.getFlatCoordinates()):this.flatCoordinates=t.getFlatCoordinates().slice(),this.ends_.push(this.flatCoordinates.length),this.changed()},e.prototype.clone=function(){var t=new e(this.flatCoordinates.slice(),this.layout,this.ends_.slice());return t.applyProperties(this),t},e.prototype.closestPointXY=function(t,e,n,o){return o<Vt(this.getExtent(),t,e)?o:(this.maxDeltaRevision_!=this.getRevision()&&(this.maxDelta_=Math.sqrt(function(t,e,n,o,i){for(var r=0,s=n.length;r<s;++r){var a=n[r];i=Xn(t,e,a,o,i),e=a}return i}(this.flatCoordinates,0,this.ends_,this.stride,0)),this.maxDeltaRevision_=this.getRevision()),function(t,e,n,o,i,r,s,a,l,u,c){for(var h=c||[NaN,NaN],p=0,d=n.length;p<d;++p){var f=n[p];u=Hn(t,e,f,o,i,r,s,a,l,u,h),e=f}return u}(this.flatCoordinates,0,this.ends_,this.stride,this.maxDelta_,!0,t,e,n,o))},e.prototype.containsXY=function(t,e){return so(this.getOrientedFlatCoordinates(),0,this.ends_,this.stride,t,e)},e.prototype.getArea=function(){return function(t,e,n,o){for(var i=0,r=0,s=n.length;r<s;++r){var a=n[r];i+=Qn(t,e,a,o),e=a}return i}(this.getOrientedFlatCoordinates(),0,this.ends_,this.stride)},e.prototype.getCoordinates=function(t){var e;return void 0!==t?co(e=this.getOrientedFlatCoordinates().slice(),0,this.ends_,this.stride,t):e=this.flatCoordinates,function(t,e,n,o,i){for(var r=void 0!==i?i:[],s=0,a=0,l=n.length;a<l;++a){var u=n[a];r[s++]=qn(t,e,u,o,r[s]),e=u}return r.length=s,r}(e,0,this.ends_,this.stride)},e.prototype.getEnds=function(){return this.ends_},e.prototype.getFlatInteriorPoint=function(){if(this.flatInteriorPointRevision_!=this.getRevision()){var t=oe(this.getExtent());this.flatInteriorPoint_=function(t,e,n,o,r,s,a){for(var l,u,c,h,p,d,f,g=r[s+1],v=[],_=0,y=n.length;_<y;++_){var m=n[_];for(h=t[m-o],d=t[m-o+1],l=e;l<m;l+=o)p=t[l],f=t[l+1],(g<=d&&f<=g||d<=g&&g<=f)&&(c=(g-d)/(f-d)*(p-h)+h,v.push(c)),h=p,d=f}var w=NaN,C=-1/0;for(v.sort(i),h=v[0],l=1,u=v.length;l<u;++l){p=v[l];var x=Math.abs(p-h);x>C&&so(t,e,n,o,c=(h+p)/2,g)&&(w=c,C=x),h=p}return isNaN(w)&&(w=r[s]),a?(a.push(w,g,C),a):[w,g,C]}(this.getOrientedFlatCoordinates(),0,this.ends_,this.stride,t,0),this.flatInteriorPointRevision_=this.getRevision()}return this.flatInteriorPoint_},e.prototype.getInteriorPoint=function(){return new oo(this.getFlatInteriorPoint(),"XYM")},e.prototype.getLinearRingCount=function(){return this.ends_.length},e.prototype.getLinearRing=function(t){return t<0||this.ends_.length<=t?null:new to(this.flatCoordinates.slice(0===t?0:this.ends_[t-1],this.ends_[t]),this.layout)},e.prototype.getLinearRings=function(){for(var t=this.layout,e=this.flatCoordinates,n=this.ends_,o=[],i=0,r=0,s=n.length;r<s;++r){var a=n[r],l=new to(e.slice(i,a),t);o.push(l),i=a}return o},e.prototype.getOrientedFlatCoordinates=function(){if(this.orientedRevision_!=this.getRevision()){var t=this.flatCoordinates;!function(t,e,n,o,i){for(var r=void 0!==i&&i,s=0,a=n.length;s<a;++s){var l=n[s],u=uo(t,e,l,o);if(0===s){if(r&&u||!r&&!u)return!1}else if(r&&!u||!r&&u)return!1;e=l}return!0}(t,0,this.ends_,this.stride)?(this.orientedFlatCoordinates_=t.slice(),this.orientedFlatCoordinates_.length=co(this.orientedFlatCoordinates_,0,this.ends_,this.stride)):this.orientedFlatCoordinates_=t,this.orientedRevision_=this.getRevision()}return this.orientedFlatCoordinates_},e.prototype.getSimplifiedGeometryInternal=function(t){var n=[],o=[];return n.length=function(t,e,n,o,i,r,s,a){for(var l=0,u=n.length;l<u;++l){var c=n[l];s=Yn(t,e,c,o,i,r,s),a.push(s),e=c}return s}(this.flatCoordinates,0,this.ends_,this.stride,Math.sqrt(t),n,0,o),new e(n,Ln,o)},e.prototype.getType=function(){return"Polygon"},e.prototype.intersectsExtent=function(t){return function(t,e,n,o,i){if(!function(t,e,n,o,i){return!!(ao(t,e,n,o,i)||ro(t,e,n,o,i[0],i[1])||ro(t,e,n,o,i[0],i[3])||ro(t,e,n,o,i[2],i[1])||ro(t,e,n,o,i[2],i[3]))}(t,e,n[0],o,i))return!1;if(1===n.length)return!0;for(var r=1,s=n.length;r<s;++r)if(io(t,n[r-1],n[r],o,i)&&!ao(t,n[r-1],n[r],o,i))return!1;return!0}(this.getOrientedFlatCoordinates(),0,this.ends_,this.stride,t)},e.prototype.setCoordinates=function(t,e){this.setLayout(e,t,2),this.flatCoordinates||(this.flatCoordinates=[]);var n=function(t,e,n,o,i){for(var r=i||[],s=0,a=0,l=n.length;a<l;++a){var u=Bn(t,e,n[a],o);r[s++]=u,e=u}return r.length=s,r}(this.flatCoordinates,0,t,this.stride,this.ends_);this.flatCoordinates.length=0===n.length?0:n[n.length-1],this.changed()},e}(Vn);const fo=po;function go(t){var e=t[0],n=t[1],o=t[2],i=t[3],r=[e,n,e,i,o,i,o,n,e,n];return new po(r,Ln,[r.length])}var vo=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function o(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}(),_o=function(t){function e(e){var n=t.call(this)||this;n.on,n.once,n.un;var o=h({},e);return n.hints_=[0,0],n.animations_=[],n.updateAnimationKey_,n.projection_=en(o.projection,"EPSG:3857"),n.viewportSize_=[100,100],n.targetCenter_=null,n.targetResolution_,n.targetRotation_,n.nextCenter_=null,n.nextResolution_,n.nextRotation_,n.cancelAnchor_=void 0,o.center&&(o.center=dn(o.center,n.projection_)),o.extent&&(o.extent=fn(o.extent,n.projection_)),n.applyOptions_(o),n}return vo(e,t),e.prototype.applyOptions_=function(t){var e=h({},t);for(var n in wn)delete e[n];this.setProperties(e,!0);var o=function(t){var e,n,o,i=void 0!==t.minZoom?t.minZoom:0,s=void 0!==t.maxZoom?t.maxZoom:28,a=void 0!==t.zoomFactor?t.zoomFactor:2,l=void 0!==t.multiWorld&&t.multiWorld,u=void 0===t.smoothResolutionConstraint||t.smoothResolutionConstraint,c=void 0!==t.showFullExtent&&t.showFullExtent,h=en(t.projection,"EPSG:3857"),p=h.getExtent(),d=t.constrainOnlyCenter,f=t.extent;if(l||f||!h.isGlobal()||(d=!1,f=p),void 0!==t.resolutions){var g=t.resolutions;n=g[i],o=void 0!==g[s]?g[s]:g[g.length-1],e=t.constrainResolution?function(t,e,n,o){return function(i,s,a,l){if(void 0!==i){var u=t[0],c=t[t.length-1],h=n?Tn(u,n,a,o):u;if(l)return void 0===e||e?Pn(i,h,c):Y(i,c,h);var p=Math.min(h,i),d=Math.floor(r(t,p,s));return t[d]>h&&d<t.length-1?t[d+1]:t[d]}}}(g,u,!d&&f,c):On(n,o,u,!d&&f,c)}else{var v=(p?Math.max(ce(p),se(p)):360*Oe[Re.DEGREES]/h.getMetersPerUnit())/256/Math.pow(2,0),_=v/Math.pow(2,28);void 0!==(n=t.maxResolution)?i=0:n=v/Math.pow(a,i),void 0===(o=t.minResolution)&&(o=void 0!==t.maxZoom?void 0!==t.maxResolution?n/Math.pow(a,s):v/Math.pow(a,s):_),s=i+Math.floor(Math.log(n/o)/Math.log(a)),o=n/Math.pow(a,s-i),e=t.constrainResolution?function(t,e,n,o,i,r){return function(s,a,l,u){if(void 0!==s){var c=i?Tn(e,i,l,r):e,h=void 0!==n?n:0;if(u)return void 0===o||o?Pn(s,c,h):Y(s,h,c);var p=Math.ceil(Math.log(e/c)/Math.log(t)-1e-9),d=-a*(.5-1e-9)+.5,f=Math.min(c,s),g=Math.floor(Math.log(e/f)/Math.log(t)+d),v=Math.max(p,g);return Y(e/Math.pow(t,v),h,c)}}}(a,n,o,u,!d&&f,c):On(n,o,u,!d&&f,c)}return{constraint:e,maxResolution:n,minResolution:o,minZoom:i,zoomFactor:a}}(t);this.maxResolution_=o.maxResolution,this.minResolution_=o.minResolution,this.zoomFactor_=o.zoomFactor,this.resolutions_=t.resolutions,this.padding_=t.padding,this.minZoom_=o.minZoom;var i=function(t){if(void 0!==t.extent){var e=void 0===t.smoothExtentConstraint||t.smoothExtentConstraint;return En(t.extent,t.constrainOnlyCenter,e)}var n=en(t.projection,"EPSG:3857");if(!0!==t.multiWorld&&n.isGlobal()){var o=n.getExtent().slice();return o[0]=-1/0,o[2]=1/0,En(o,!1,!1)}return bn}(t),s=o.constraint,a=function(t){if(void 0===t.enableRotation||t.enableRotation){var e=t.constrainRotation;return void 0===e||!0===e?(i=et(5),function(t,e){return e?t:void 0!==t?Math.abs(t)<=i?0:t:void 0}):!1===e?Sn:"number"==typeof e?(n=e,o=2*Math.PI/n,function(t,e){return e?t:void 0!==t?t=Math.floor(t/o+.5)*o:void 0}):Sn}return Rn;var n,o,i}(t);this.constraints_={center:i,resolution:s,rotation:a},this.setRotation(void 0!==t.rotation?t.rotation:0),this.setCenterInternal(void 0!==t.center?t.center:null),void 0!==t.resolution?this.setResolution(t.resolution):void 0!==t.zoom&&this.setZoom(t.zoom)},Object.defineProperty(e.prototype,"padding",{get:function(){return this.padding_},set:function(t){var e=this.padding_;this.padding_=t;var n=this.getCenter();if(n){var o=t||[0,0,0,0];e=e||[0,0,0,0];var i=this.getResolution(),r=i/2*(o[3]-e[3]+e[1]-o[1]),s=i/2*(o[0]-e[0]+e[2]-o[2]);this.setCenterInternal([n[0]+r,n[1]-s])}},enumerable:!1,configurable:!0}),e.prototype.getUpdatedOptions_=function(t){var e=this.getProperties();return void 0!==e.resolution?e.resolution=this.getResolution():e.zoom=this.getZoom(),e.center=this.getCenterInternal(),e.rotation=this.getRotation(),h({},e,t)},e.prototype.animate=function(t){this.isDef()&&!this.getAnimating()&&this.resolveConstraints(0);for(var e=new Array(arguments.length),n=0;n<e.length;++n){var o=arguments[n];o.center&&((o=h({},o)).center=dn(o.center,this.getProjection())),o.anchor&&((o=h({},o)).anchor=dn(o.anchor,this.getProjection())),e[n]=o}this.animateInternal.apply(this,e)},e.prototype.animateInternal=function(t){var e,n=arguments.length;n>1&&"function"==typeof arguments[n-1]&&(e=arguments[n-1],--n);for(var o=0;o<n&&!this.isDef();++o){var i=arguments[o];i.center&&this.setCenterInternal(i.center),void 0!==i.zoom?this.setZoom(i.zoom):i.resolution&&this.setResolution(i.resolution),void 0!==i.rotation&&this.setRotation(i.rotation)}if(o!==n){for(var r=Date.now(),s=this.targetCenter_.slice(),a=this.targetResolution_,l=this.targetRotation_,u=[];o<n;++o){var c=arguments[o],h={start:r,complete:!1,anchor:c.anchor,duration:void 0!==c.duration?c.duration:1e3,easing:c.easing||In,callback:e};if(c.center&&(h.sourceCenter=s,h.targetCenter=c.center.slice(),s=h.targetCenter),void 0!==c.zoom?(h.sourceResolution=a,h.targetResolution=this.getResolutionForZoom(c.zoom),a=h.targetResolution):c.resolution&&(h.sourceResolution=a,h.targetResolution=c.resolution,a=h.targetResolution),void 0!==c.rotation){h.sourceRotation=l;var p=nt(c.rotation-l+Math.PI,2*Math.PI)-Math.PI;h.targetRotation=l+p,l=h.targetRotation}mo(h)?h.complete=!0:r+=h.duration,u.push(h)}this.animations_.push(u),this.setHint(0,1),this.updateAnimations_()}else e&&yo(e,!0)},e.prototype.getAnimating=function(){return this.hints_[0]>0},e.prototype.getInteracting=function(){return this.hints_[1]>0},e.prototype.cancelAnimations=function(){var t;this.setHint(0,-this.hints_[0]);for(var e=0,n=this.animations_.length;e<n;++e){var o=this.animations_[e];if(o[0].callback&&yo(o[0].callback,!1),!t)for(var i=0,r=o.length;i<r;++i){var s=o[i];if(!s.complete){t=s.anchor;break}}}this.animations_.length=0,this.cancelAnchor_=t,this.nextCenter_=null,this.nextResolution_=NaN,this.nextRotation_=NaN},e.prototype.updateAnimations_=function(){if(void 0!==this.updateAnimationKey_&&(cancelAnimationFrame(this.updateAnimationKey_),this.updateAnimationKey_=void 0),this.getAnimating()){for(var t=Date.now(),e=!1,n=this.animations_.length-1;n>=0;--n){for(var o=this.animations_[n],i=!0,r=0,s=o.length;r<s;++r){var a=o[r];if(!a.complete){var l=t-a.start,u=a.duration>0?l/a.duration:1;u>=1?(a.complete=!0,u=1):i=!1;var c=a.easing(u);if(a.sourceCenter){var h=a.sourceCenter[0],p=a.sourceCenter[1],d=a.targetCenter[0],f=a.targetCenter[1];this.nextCenter_=a.targetCenter;var g=h+c*(d-h),v=p+c*(f-p);this.targetCenter_=[g,v]}if(a.sourceResolution&&a.targetResolution){var _=1===c?a.targetResolution:a.sourceResolution+c*(a.targetResolution-a.sourceResolution);if(a.anchor){var y=this.getViewportSize_(this.getRotation()),m=this.constraints_.resolution(_,0,y,!0);this.targetCenter_=this.calculateCenterZoom(m,a.anchor)}this.nextResolution_=a.targetResolution,this.targetResolution_=_,this.applyTargetState_(!0)}if(void 0!==a.sourceRotation&&void 0!==a.targetRotation){var w=1===c?nt(a.targetRotation+Math.PI,2*Math.PI)-Math.PI:a.sourceRotation+c*(a.targetRotation-a.sourceRotation);if(a.anchor){var C=this.constraints_.rotation(w,!0);this.targetCenter_=this.calculateCenterRotate(C,a.anchor)}this.nextRotation_=a.targetRotation,this.targetRotation_=w}if(this.applyTargetState_(!0),e=!0,!a.complete)break}}if(i){this.animations_[n]=null,this.setHint(0,-1),this.nextCenter_=null,this.nextResolution_=NaN,this.nextRotation_=NaN;var x=o[0].callback;x&&yo(x,!0)}}this.animations_=this.animations_.filter(Boolean),e&&void 0===this.updateAnimationKey_&&(this.updateAnimationKey_=requestAnimationFrame(this.updateAnimations_.bind(this)))}},e.prototype.calculateCenterRotate=function(t,e){var n,o,i,r=this.getCenterInternal();return void 0!==r&&(xn(n=[r[0]-e[0],r[1]-e[1]],t-this.getRotation()),i=e,(o=n)[0]+=+i[0],o[1]+=+i[1]),n},e.prototype.calculateCenterZoom=function(t,e){var n,o=this.getCenterInternal(),i=this.getResolution();return void 0!==o&&void 0!==i&&(n=[e[0]-t*(e[0]-o[0])/i,e[1]-t*(e[1]-o[1])/i]),n},e.prototype.getViewportSize_=function(t){var e=this.viewportSize_;if(t){var n=e[0],o=e[1];return[Math.abs(n*Math.cos(t))+Math.abs(o*Math.sin(t)),Math.abs(n*Math.sin(t))+Math.abs(o*Math.cos(t))]}return e},e.prototype.setViewportSize=function(t){this.viewportSize_=Array.isArray(t)?t.slice():[100,100],this.getAnimating()||this.resolveConstraints(0)},e.prototype.getCenter=function(){var t=this.getCenterInternal();return t?pn(t,this.getProjection()):t},e.prototype.getCenterInternal=function(){return this.get(wn.CENTER)},e.prototype.getConstraints=function(){return this.constraints_},e.prototype.getConstrainResolution=function(){return this.get("constrainResolution")},e.prototype.getHints=function(t){return void 0!==t?(t[0]=this.hints_[0],t[1]=this.hints_[1],t):this.hints_.slice()},e.prototype.calculateExtent=function(t){return e=this.calculateExtentInternal(t),this.getProjection(),e;var e},e.prototype.calculateExtentInternal=function(t){var e=t||this.getViewportSizeMinusPadding_(),n=this.getCenterInternal();W(n,1);var o=this.getResolution();W(void 0!==o,2);var i=this.getRotation();return W(void 0!==i,3),re(n,o,i,e)},e.prototype.getMaxResolution=function(){return this.maxResolution_},e.prototype.getMinResolution=function(){return this.minResolution_},e.prototype.getMaxZoom=function(){return this.getZoomForResolution(this.minResolution_)},e.prototype.setMaxZoom=function(t){this.applyOptions_(this.getUpdatedOptions_({maxZoom:t}))},e.prototype.getMinZoom=function(){return this.getZoomForResolution(this.maxResolution_)},e.prototype.setMinZoom=function(t){this.applyOptions_(this.getUpdatedOptions_({minZoom:t}))},e.prototype.setConstrainResolution=function(t){this.applyOptions_(this.getUpdatedOptions_({constrainResolution:t}))},e.prototype.getProjection=function(){return this.projection_},e.prototype.getResolution=function(){return this.get(wn.RESOLUTION)},e.prototype.getResolutions=function(){return this.resolutions_},e.prototype.getResolutionForExtent=function(t,e){return this.getResolutionForExtentInternal(fn(t,this.getProjection()),e)},e.prototype.getResolutionForExtentInternal=function(t,e){var n=e||this.getViewportSizeMinusPadding_(),o=ce(t)/n[0],i=se(t)/n[1];return Math.max(o,i)},e.prototype.getResolutionForValueFunction=function(t){var e=t||2,n=this.getConstrainedResolution(this.maxResolution_),o=this.minResolution_,i=Math.log(n/o)/Math.log(e);return function(t){return n/Math.pow(e,t*i)}},e.prototype.getRotation=function(){return this.get(wn.ROTATION)},e.prototype.getValueForResolutionFunction=function(t){var e=Math.log(t||2),n=this.getConstrainedResolution(this.maxResolution_),o=this.minResolution_,i=Math.log(n/o)/e;return function(t){return Math.log(n/t)/e/i}},e.prototype.getViewportSizeMinusPadding_=function(t){var e=this.getViewportSize_(t),n=this.padding_;return n&&(e=[e[0]-n[1]-n[3],e[1]-n[0]-n[2]]),e},e.prototype.getState=function(){var t=this.getProjection(),e=this.getResolution(),n=this.getRotation(),o=this.getCenterInternal(),i=this.padding_;if(i){var r=this.getViewportSizeMinusPadding_();o=wo(o,this.getViewportSize_(),[r[0]/2+i[3],r[1]/2+i[0]],e,n)}return{center:o.slice(0),projection:void 0!==t?t:null,resolution:e,nextCenter:this.nextCenter_,nextResolution:this.nextResolution_,nextRotation:this.nextRotation_,rotation:n,zoom:this.getZoom()}},e.prototype.getZoom=function(){var t,e=this.getResolution();return void 0!==e&&(t=this.getZoomForResolution(e)),t},e.prototype.getZoomForResolution=function(t){var e,n,o=this.minZoom_||0;if(this.resolutions_){var i=r(this.resolutions_,t,1);o=i,e=this.resolutions_[i],n=i==this.resolutions_.length-1?2:e/this.resolutions_[i+1]}else e=this.maxResolution_,n=this.zoomFactor_;return o+Math.log(e/t)/Math.log(n)},e.prototype.getResolutionForZoom=function(t){if(this.resolutions_){if(this.resolutions_.length<=1)return 0;var e=Y(Math.floor(t),0,this.resolutions_.length-2),n=this.resolutions_[e]/this.resolutions_[e+1];return this.resolutions_[e]/Math.pow(n,Y(t-e,0,1))}return this.maxResolution_/Math.pow(this.zoomFactor_,t-this.minZoom_)},e.prototype.fit=function(t,e){var n;if(W(Array.isArray(t)||"function"==typeof t.getSimplifiedGeometry,24),Array.isArray(t))W(!pe(t),25),n=go(o=fn(t,this.getProjection()));else if("Circle"===t.getType()){var o;(n=go(o=fn(t.getExtent(),this.getProjection()))).rotate(this.getRotation(),oe(o))}else{var i=hn();n=i?t.clone().transform(i,this.getProjection()):t}this.fitInternal(n,e)},e.prototype.rotatedExtentForGeometry=function(t){for(var e=this.getRotation(),n=Math.cos(e),o=Math.sin(-e),i=t.getFlatCoordinates(),r=t.getStride(),s=1/0,a=1/0,l=-1/0,u=-1/0,c=0,h=i.length;c<h;c+=r){var p=i[c]*n-i[c+1]*o,d=i[c]*o+i[c+1]*n;s=Math.min(s,p),a=Math.min(a,d),l=Math.max(l,p),u=Math.max(u,d)}return[s,a,l,u]},e.prototype.fitInternal=function(t,e){var n=e||{},o=n.size;o||(o=this.getViewportSizeMinusPadding_());var i,r=void 0!==n.padding?n.padding:[0,0,0,0],s=void 0!==n.nearest&&n.nearest;i=void 0!==n.minResolution?n.minResolution:void 0!==n.maxZoom?this.getResolutionForZoom(n.maxZoom):0;var a=this.rotatedExtentForGeometry(t),l=this.getResolutionForExtentInternal(a,[o[0]-r[1]-r[3],o[1]-r[0]-r[2]]);l=isNaN(l)?i:Math.max(l,i),l=this.getConstrainedResolution(l,s?0:1);var u=this.getRotation(),h=Math.sin(u),p=Math.cos(u),d=oe(a);d[0]+=(r[1]-r[3])/2*l,d[1]+=(r[0]-r[2])/2*l;var f=d[0]*p-d[1]*h,g=d[1]*p+d[0]*h,v=this.getConstrainedCenter([f,g],l),_=n.callback?n.callback:c;void 0!==n.duration?this.animateInternal({resolution:l,center:v,duration:n.duration,easing:n.easing},_):(this.targetResolution_=l,this.targetCenter_=v,this.applyTargetState_(!1,!0),yo(_,!0))},e.prototype.centerOn=function(t,e,n){this.centerOnInternal(dn(t,this.getProjection()),e,n)},e.prototype.centerOnInternal=function(t,e,n){this.setCenterInternal(wo(t,e,n,this.getResolution(),this.getRotation()))},e.prototype.calculateCenterShift=function(t,e,n,o){var i,r=this.padding_;if(r&&t){var s=this.getViewportSizeMinusPadding_(-n),a=wo(t,o,[s[0]/2+r[3],s[1]/2+r[0]],e,n);i=[t[0]-a[0],t[1]-a[1]]}return i},e.prototype.isDef=function(){return!!this.getCenterInternal()&&void 0!==this.getResolution()},e.prototype.adjustCenter=function(t){var e=pn(this.targetCenter_,this.getProjection());this.setCenter([e[0]+t[0],e[1]+t[1]])},e.prototype.adjustCenterInternal=function(t){var e=this.targetCenter_;this.setCenterInternal([e[0]+t[0],e[1]+t[1]])},e.prototype.adjustResolution=function(t,e){var n=e&&dn(e,this.getProjection());this.adjustResolutionInternal(t,n)},e.prototype.adjustResolutionInternal=function(t,e){var n=this.getAnimating()||this.getInteracting(),o=this.getViewportSize_(this.getRotation()),i=this.constraints_.resolution(this.targetResolution_*t,0,o,n);e&&(this.targetCenter_=this.calculateCenterZoom(i,e)),this.targetResolution_*=t,this.applyTargetState_()},e.prototype.adjustZoom=function(t,e){this.adjustResolution(Math.pow(this.zoomFactor_,-t),e)},e.prototype.adjustRotation=function(t,e){e&&(e=dn(e,this.getProjection())),this.adjustRotationInternal(t,e)},e.prototype.adjustRotationInternal=function(t,e){var n=this.getAnimating()||this.getInteracting(),o=this.constraints_.rotation(this.targetRotation_+t,n);e&&(this.targetCenter_=this.calculateCenterRotate(o,e)),this.targetRotation_+=t,this.applyTargetState_()},e.prototype.setCenter=function(t){this.setCenterInternal(dn(t,this.getProjection()))},e.prototype.setCenterInternal=function(t){this.targetCenter_=t,this.applyTargetState_()},e.prototype.setHint=function(t,e){return this.hints_[t]+=e,this.changed(),this.hints_[t]},e.prototype.setResolution=function(t){this.targetResolution_=t,this.applyTargetState_()},e.prototype.setRotation=function(t){this.targetRotation_=t,this.applyTargetState_()},e.prototype.setZoom=function(t){this.setResolution(this.getResolutionForZoom(t))},e.prototype.applyTargetState_=function(t,e){var n=this.getAnimating()||this.getInteracting()||e,o=this.constraints_.rotation(this.targetRotation_,n),i=this.getViewportSize_(o),r=this.constraints_.resolution(this.targetResolution_,0,i,n),s=this.constraints_.center(this.targetCenter_,r,i,n,this.calculateCenterShift(this.targetCenter_,r,o,i));this.get(wn.ROTATION)!==o&&this.set(wn.ROTATION,o),this.get(wn.RESOLUTION)!==r&&(this.set(wn.RESOLUTION,r),this.set("zoom",this.getZoom(),!0)),s&&this.get(wn.CENTER)&&Cn(this.get(wn.CENTER),s)||this.set(wn.CENTER,s),this.getAnimating()&&!t&&this.cancelAnimations(),this.cancelAnchor_=void 0},e.prototype.resolveConstraints=function(t,e,n){var o=void 0!==t?t:200,i=e||0,r=this.constraints_.rotation(this.targetRotation_),s=this.getViewportSize_(r),a=this.constraints_.resolution(this.targetResolution_,i,s),l=this.constraints_.center(this.targetCenter_,a,s,!1,this.calculateCenterShift(this.targetCenter_,a,r,s));if(0===o&&!this.cancelAnchor_)return this.targetResolution_=a,this.targetRotation_=r,this.targetCenter_=l,void this.applyTargetState_();var u=n||(0===o?this.cancelAnchor_:void 0);this.cancelAnchor_=void 0,this.getResolution()===a&&this.getRotation()===r&&this.getCenterInternal()&&Cn(this.getCenterInternal(),l)||(this.getAnimating()&&this.cancelAnimations(),this.animateInternal({rotation:r,center:l,resolution:a,duration:o,easing:An,anchor:u}))},e.prototype.beginInteraction=function(){this.resolveConstraints(0),this.setHint(1,1)},e.prototype.endInteraction=function(t,e,n){var o=n&&dn(n,this.getProjection());this.endInteractionInternal(t,e,o)},e.prototype.endInteractionInternal=function(t,e,n){this.setHint(1,-1),this.resolveConstraints(t,e,n)},e.prototype.getConstrainedCenter=function(t,e){var n=this.getViewportSize_(this.getRotation());return this.constraints_.center(t,e||this.getResolution(),n)},e.prototype.getConstrainedZoom=function(t,e){var n=this.getResolutionForZoom(t);return this.getZoomForResolution(this.getConstrainedResolution(n,e))},e.prototype.getConstrainedResolution=function(t,e){var n=e||0,o=this.getViewportSize_(this.getRotation());return this.constraints_.resolution(t,n,o)},e}(k);function yo(t,e){setTimeout((function(){t(e)}),0)}function mo(t){return!(t.sourceCenter&&t.targetCenter&&!Cn(t.sourceCenter,t.targetCenter))&&t.sourceResolution===t.targetResolution&&t.sourceRotation===t.targetRotation}function wo(t,e,n,o,i){var r=Math.cos(-i),s=Math.sin(-i),a=t[0]*r-t[1]*s,l=t[1]*r+t[0]*s;return[(a+=(e[0]/2-n[0])*o)*r-(l+=(n[1]-e[1]/2)*o)*(s=-s),l*r+a*s]}const Co=_o;function xo(t,e,n){return e+":"+t+":"+(n?function(t){return"string"==typeof t?t:function(t){var e=t[0];e!=(0|e)&&(e=e+.5|0);var n=t[1];n!=(0|n)&&(n=n+.5|0);var o=t[2];return o!=(0|o)&&(o=o+.5|0),"rgba("+e+","+n+","+o+","+(void 0===t[3]?1:Math.round(100*t[3])/100)+")"}(t)}(n):"null")}var Eo=new(function(){function t(){this.cache_={},this.cacheSize_=0,this.maxCacheSize_=32}return t.prototype.clear=function(){this.cache_={},this.cacheSize_=0},t.prototype.canExpireCache=function(){return this.cacheSize_>this.maxCacheSize_},t.prototype.expire=function(){if(this.canExpireCache()){var t=0;for(var e in this.cache_){var n=this.cache_[e];0!=(3&t++)||n.hasListener()||(delete this.cache_[e],--this.cacheSize_)}}},t.prototype.get=function(t,e,n){var o=xo(t,e,n);return o in this.cache_?this.cache_[o]:null},t.prototype.set=function(t,e,n,o){var i=xo(t,e,n);this.cache_[i]=o,++this.cacheSize_},t.prototype.setSize=function(t){this.maxCacheSize_=t,this.expire()},t}()),bo=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function o(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}(),To=function(t){function e(e){var n=t.call(this)||this;return n.map_=e,n}return bo(e,t),e.prototype.dispatchRenderEvent=function(t,e){A()},e.prototype.calculateMatrices2D=function(t){var e=t.viewState,n=t.coordinateToPixelTransform,o=t.pixelToCoordinateTransform;Lt(n,t.size[0]/2,t.size[1]/2,1/e.resolution,-1/e.resolution,-e.rotation,-e.center[0],-e.center[1]),Ft(o,n)},e.prototype.forEachFeatureAtCoordinate=function(t,e,n,o,i,r,s,a){var l,u=e.viewState;function c(t,e,n,o){return i.call(r,e,t?n:null,o)}var h=u.projection,p=function(t,e){if(e.canWrapX()){var n=ce(e.getExtent()),o=function(t,e,n){var o=e.getExtent(),i=0;if(e.canWrapX()&&(t[0]<o[0]||t[0]>o[2])){var r=n||ce(o);i=Math.floor((t[0]-o[0])/r)}return i}(t,e,n);o&&(t[0]-=o*n)}return t}(t.slice(),h),d=[[0,0]];if(h.canWrapX()&&o){var f=ce(h.getExtent());d.push([-f,0],[f,0])}for(var g=e.layerStatesArray,v=g.length,_=[],y=[],m=0;m<d.length;m++)for(var w=v-1;w>=0;--w){var C=g[w],x=C.layer;if(x.hasRenderer()&&ft(C,u)&&s.call(a,x)){var E=x.getRenderer(),b=x.getSource();if(E&&b){var T=b.getWrapX()?p:t,P=c.bind(null,C.managed);y[0]=T[0]+d[m][0],y[1]=T[1]+d[m][1],l=E.forEachFeatureAtCoordinate(y,e,n,P,_)}if(l)return l}}if(0!==_.length){var O=1/_.length;return _.forEach((function(t,e){return t.distanceSq+=e*O})),_.sort((function(t,e){return t.distanceSq-e.distanceSq})),_.some((function(t){return l=t.callback(t.feature,t.layer,t.geometry)})),l}},e.prototype.forEachLayerAtPixel=function(t,e,n,o,i){return A()},e.prototype.hasFeatureAtCoordinate=function(t,e,n,o,i,r){return void 0!==this.forEachFeatureAtCoordinate(t,e,n,o,l,this,i,r)},e.prototype.getMap=function(){return this.map_},e.prototype.renderFrame=function(t){A()},e.prototype.scheduleExpireIconCache=function(t){Eo.canExpireCache()&&t.postRenderFunctions.push(Po)},e}(o);function Po(t,e){Eo.expire()}const Oo=To;var Ro=new k;(new v).setSize=function(){console.warn("labelCache is deprecated.")};var So=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function o(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}();const Mo=function(t){function e(e){var o=t.call(this,e)||this;o.fontChangeListenerKey_=T(Ro,n,e.redrawText.bind(e)),o.element_=document.createElement("div");var i=o.element_.style;i.position="absolute",i.width="100%",i.height="100%",i.zIndex="0",o.element_.className="ol-unselectable ol-layers";var r=e.getViewport();return r.insertBefore(o.element_,r.firstChild||null),o.children_=[],o.renderedVisible_=!0,o}return So(e,t),e.prototype.dispatchRenderEvent=function(t,e){var n=this.getMap();if(n.hasListener(t)){var o=new Et(t,void 0,e);n.dispatchEvent(o)}},e.prototype.disposeInternal=function(){O(this.fontChangeListenerKey_),this.element_.parentNode.removeChild(this.element_),t.prototype.disposeInternal.call(this)},e.prototype.renderFrame=function(t){if(t){this.calculateMatrices2D(t),this.dispatchRenderEvent(ut,t);var e=t.layerStatesArray.sort((function(t,e){return t.zIndex-e.zIndex})),n=t.viewState;this.children_.length=0;for(var o=[],i=null,r=0,s=e.length;r<s;++r){var a=e[r];if(t.layerIndex=r,ft(a,n)&&(a.sourceState==pt||a.sourceState==ht)){var l=a.layer,u=l.render(t,i);u&&(u!==i&&(this.children_.push(u),i=u),"getDeclutter"in l&&o.push(l))}}for(r=o.length-1;r>=0;--r)o[r].renderDeclutter(t);!function(t,e){for(var n=t.childNodes,o=0;;++o){var i=n[o],r=e[o];if(!i&&!r)break;i!==r&&(i?r?t.insertBefore(r,i):(t.removeChild(i),--o):t.appendChild(r))}}(this.element_,this.children_),this.dispatchRenderEvent("postcompose",t),this.renderedVisible_||(this.element_.style.display="",this.renderedVisible_=!0),this.scheduleExpireIconCache(t)}else this.renderedVisible_&&(this.element_.style.display="none",this.renderedVisible_=!1)},e.prototype.forEachLayerAtPixel=function(t,e,n,o,i){for(var r=e.viewState,s=e.layerStatesArray,a=s.length-1;a>=0;--a){var l=s[a],u=l.layer;if(u.hasRenderer()&&ft(l,r)&&i(u)){var c=u.getRenderer().getDataAtPixel(t,e,n);if(c){var h=o(u,c);if(h)return h}}}},e}(Oo),Ao="add",Io="remove";var jo=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function o(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}(),Lo="length",Fo=function(t){function e(e,n,o){var i=t.call(this,e)||this;return i.element=n,i.index=o,i}return jo(e,t),e}(e);const ko=function(t){function e(e,n){var o=t.call(this)||this;o.on,o.once,o.un;var i=n||{};if(o.unique_=!!i.unique,o.array_=e||[],o.unique_)for(var r=0,s=o.array_.length;r<s;++r)o.assertUnique_(o.array_[r],r);return o.updateLength_(),o}return jo(e,t),e.prototype.clear=function(){for(;this.getLength()>0;)this.pop()},e.prototype.extend=function(t){for(var e=0,n=t.length;e<n;++e)this.push(t[e]);return this},e.prototype.forEach=function(t){for(var e=this.array_,n=0,o=e.length;n<o;++n)t(e[n],n,e)},e.prototype.getArray=function(){return this.array_},e.prototype.item=function(t){return this.array_[t]},e.prototype.getLength=function(){return this.get(Lo)},e.prototype.insertAt=function(t,e){this.unique_&&this.assertUnique_(e),this.array_.splice(t,0,e),this.updateLength_(),this.dispatchEvent(new Fo(Ao,e,t))},e.prototype.pop=function(){return this.removeAt(this.getLength()-1)},e.prototype.push=function(t){this.unique_&&this.assertUnique_(t);var e=this.getLength();return this.insertAt(e,t),this.getLength()},e.prototype.remove=function(t){for(var e=this.array_,n=0,o=e.length;n<o;++n)if(e[n]===t)return this.removeAt(n)},e.prototype.removeAt=function(t){var e=this.array_[t];return this.array_.splice(t,1),this.updateLength_(),this.dispatchEvent(new Fo(Io,e,t)),e},e.prototype.setAt=function(t,e){var n=this.getLength();if(t<n){this.unique_&&this.assertUnique_(e,t);var o=this.array_[t];this.array_[t]=e,this.dispatchEvent(new Fo(Io,o,t)),this.dispatchEvent(new Fo(Ao,e,t))}else{for(var i=n;i<t;++i)this.insertAt(i,void 0);this.insertAt(t,e)}},e.prototype.updateLength_=function(){this.set(Lo,this.array_.length)},e.prototype.assertUnique_=function(t,e){for(var n=0,o=this.array_.length;n<o;++n)if(this.array_[n]===t&&n!==e)throw new B(58)},e}(k);var Do=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function o(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}(),zo=function(t){function e(e,n){var o=t.call(this,e)||this;return o.layer=n,o}return Do(e,t),e}(e),No="layers";const Go=function(t){function e(e){var n=this,o=e||{},i=h({},o);delete i.layers;var r=o.layers;return(n=t.call(this,i)||this).on,n.once,n.un,n.layersListenerKeys_=[],n.listenerKeys_={},n.addChangeListener(No,n.handleLayersChanged_),r?Array.isArray(r)?r=new ko(r.slice(),{unique:!0}):W("function"==typeof r.getArray,43):r=new ko(void 0,{unique:!0}),n.setLayers(r),n}return Do(e,t),e.prototype.handleLayerChange_=function(){this.changed()},e.prototype.handleLayersChanged_=function(){this.layersListenerKeys_.forEach(O),this.layersListenerKeys_.length=0;var t=this.getLayers();for(var e in this.layersListenerKeys_.push(T(t,Ao,this.handleLayersAdd_,this),T(t,Io,this.handleLayersRemove_,this)),this.listenerKeys_)this.listenerKeys_[e].forEach(O);p(this.listenerKeys_);for(var n=t.getArray(),o=0,i=n.length;o<i;o++){var r=n[o];this.registerLayerListeners_(r),this.dispatchEvent(new zo("addlayer",r))}this.changed()},e.prototype.registerLayerListeners_=function(t){var o=[T(t,n,this.handleLayerChange_,this),T(t,_,this.handleLayerChange_,this)];t instanceof e&&o.push(T(t,"addlayer",this.handleLayerGroupAdd_,this),T(t,"removelayer",this.handleLayerGroupRemove_,this)),this.listenerKeys_[j(t)]=o},e.prototype.handleLayerGroupAdd_=function(t){this.dispatchEvent(new zo("addlayer",t.layer))},e.prototype.handleLayerGroupRemove_=function(t){this.dispatchEvent(new zo("removelayer",t.layer))},e.prototype.handleLayersAdd_=function(t){var e=t.element;this.registerLayerListeners_(e),this.dispatchEvent(new zo("addlayer",e)),this.changed()},e.prototype.handleLayersRemove_=function(t){var e=t.element,n=j(e);this.listenerKeys_[n].forEach(O),delete this.listenerKeys_[n],this.dispatchEvent(new zo("removelayer",e)),this.changed()},e.prototype.getLayers=function(){return this.get(No)},e.prototype.setLayers=function(t){var e=this.getLayers();if(e)for(var n=e.getArray(),o=0,i=n.length;o<i;++o)this.dispatchEvent(new zo("removelayer",n[o]));this.set(No,t)},e.prototype.getLayersArray=function(t){var e=void 0!==t?t:[];return this.getLayers().forEach((function(t){t.getLayersArray(e)})),e},e.prototype.getLayerStatesArray=function(t){var e=void 0!==t?t:[],n=e.length;this.getLayers().forEach((function(t){t.getLayerStatesArray(e)}));var o=this.getLayerState(),i=o.zIndex;t||void 0!==o.zIndex||(i=0);for(var r=n,s=e.length;r<s;r++){var a=e[r];a.opacity*=o.opacity,a.visible=a.visible&&o.visible,a.maxResolution=Math.min(a.maxResolution,o.maxResolution),a.minResolution=Math.max(a.minResolution,o.minResolution),a.minZoom=Math.max(a.minZoom,o.minZoom),a.maxZoom=Math.min(a.maxZoom,o.maxZoom),void 0!==o.extent&&(void 0!==a.extent?a.extent=ae(a.extent,o.extent):a.extent=o.extent),void 0===a.zIndex&&(a.zIndex=i)}return e},e.prototype.getSourceState=function(){return pt},e}(lt);var Ko=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function o(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}();const Zo=function(t){function e(e,n,o){var i=t.call(this,e)||this;return i.map=n,i.frameState=void 0!==o?o:null,i}return Ko(e,t),e}(e);var Vo=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function o(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}();const Uo=function(t){function e(e,n,o,i,r){var s=t.call(this,e,n,r)||this;return s.originalEvent=o,s.pixel_=null,s.coordinate_=null,s.dragging=void 0!==i&&i,s}return Vo(e,t),Object.defineProperty(e.prototype,"pixel",{get:function(){return this.pixel_||(this.pixel_=this.map.getEventPixel(this.originalEvent)),this.pixel_},set:function(t){this.pixel_=t},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"coordinate",{get:function(){return this.coordinate_||(this.coordinate_=this.map.getCoordinateFromPixel(this.pixel)),this.coordinate_},set:function(t){this.coordinate_=t},enumerable:!1,configurable:!0}),e.prototype.preventDefault=function(){t.prototype.preventDefault.call(this),"preventDefault"in this.originalEvent&&this.originalEvent.preventDefault()},e.prototype.stopPropagation=function(){t.prototype.stopPropagation.call(this),"stopPropagation"in this.originalEvent&&this.originalEvent.stopPropagation()},e}(Zo),Xo={SINGLECLICK:"singleclick",CLICK:w,DBLCLICK:"dblclick",POINTERDRAG:"pointerdrag",POINTERMOVE:"pointermove",POINTERDOWN:"pointerdown",POINTERUP:"pointerup",POINTEROVER:"pointerover",POINTEROUT:"pointerout",POINTERENTER:"pointerenter",POINTERLEAVE:"pointerleave",POINTERCANCEL:"pointercancel"},Ho="pointermove",Bo="pointerdown";var Wo=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function o(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}();const Yo=function(t){function e(e,n){var o=t.call(this,e)||this;o.map_=e,o.clickTimeoutId_,o.emulateClicks_=!1,o.dragging_=!1,o.dragListenerKeys_=[],o.moveTolerance_=void 0===n?1:n,o.down_=null;var i=o.map_.getViewport();return o.activePointers_=0,o.trackedTouches_={},o.element_=i,o.pointerdownListenerKey_=T(i,Bo,o.handlePointerDown_,o),o.originalPointerMoveEvent_,o.relayedListenerKey_=T(i,Ho,o.relayEvent_,o),o.boundHandleTouchMove_=o.handleTouchMove_.bind(o),o.element_.addEventListener(E,o.boundHandleTouchMove_,!!It&&{passive:!1}),o}return Wo(e,t),e.prototype.emulateClick_=function(t){var e=new Uo(Xo.CLICK,this.map_,t);this.dispatchEvent(e),void 0!==this.clickTimeoutId_?(clearTimeout(this.clickTimeoutId_),this.clickTimeoutId_=void 0,e=new Uo(Xo.DBLCLICK,this.map_,t),this.dispatchEvent(e)):this.clickTimeoutId_=setTimeout(function(){this.clickTimeoutId_=void 0;var e=new Uo(Xo.SINGLECLICK,this.map_,t);this.dispatchEvent(e)}.bind(this),250)},e.prototype.updateActivePointers_=function(t){var e=t;e.type==Xo.POINTERUP||e.type==Xo.POINTERCANCEL?delete this.trackedTouches_[e.pointerId]:e.type==Xo.POINTERDOWN&&(this.trackedTouches_[e.pointerId]=!0),this.activePointers_=Object.keys(this.trackedTouches_).length},e.prototype.handlePointerUp_=function(t){this.updateActivePointers_(t);var e=new Uo(Xo.POINTERUP,this.map_,t);this.dispatchEvent(e),this.emulateClicks_&&!e.defaultPrevented&&!this.dragging_&&this.isMouseActionButton_(t)&&this.emulateClick_(this.down_),0===this.activePointers_&&(this.dragListenerKeys_.forEach(O),this.dragListenerKeys_.length=0,this.dragging_=!1,this.down_=null)},e.prototype.isMouseActionButton_=function(t){return 0===t.button},e.prototype.handlePointerDown_=function(t){this.emulateClicks_=0===this.activePointers_,this.updateActivePointers_(t);var e=new Uo(Xo.POINTERDOWN,this.map_,t);for(var n in this.dispatchEvent(e),this.down_={},t){var o=t[n];this.down_[n]="function"==typeof o?c:o}if(0===this.dragListenerKeys_.length){var i=this.map_.getOwnerDocument();this.dragListenerKeys_.push(T(i,Xo.POINTERMOVE,this.handlePointerMove_,this),T(i,Xo.POINTERUP,this.handlePointerUp_,this),T(this.element_,Xo.POINTERCANCEL,this.handlePointerUp_,this)),this.element_.getRootNode&&this.element_.getRootNode()!==i&&this.dragListenerKeys_.push(T(this.element_.getRootNode(),Xo.POINTERUP,this.handlePointerUp_,this))}},e.prototype.handlePointerMove_=function(t){if(this.isMoving_(t)){this.dragging_=!0;var e=new Uo(Xo.POINTERDRAG,this.map_,t,this.dragging_);this.dispatchEvent(e)}},e.prototype.relayEvent_=function(t){this.originalPointerMoveEvent_=t;var e=!(!this.down_||!this.isMoving_(t));this.dispatchEvent(new Uo(t.type,this.map_,t,e))},e.prototype.handleTouchMove_=function(t){var e=this.originalPointerMoveEvent_;e&&!e.defaultPrevented||"boolean"==typeof t.cancelable&&!0!==t.cancelable||t.preventDefault()},e.prototype.isMoving_=function(t){return this.dragging_||Math.abs(t.clientX-this.down_.clientX)>this.moveTolerance_||Math.abs(t.clientY-this.down_.clientY)>this.moveTolerance_},e.prototype.disposeInternal=function(){this.relayedListenerKey_&&(O(this.relayedListenerKey_),this.relayedListenerKey_=null),this.element_.removeEventListener(E,this.boundHandleTouchMove_),this.pointerdownListenerKey_&&(O(this.pointerdownListenerKey_),this.pointerdownListenerKey_=null),this.dragListenerKeys_.forEach(O),this.dragListenerKeys_.length=0,this.element_=null,t.prototype.disposeInternal.call(this)},e}(v),qo="postrender",Qo="layergroup",$o="size",Jo="target",ti="view";var ei=1/0;const ni=function(){function t(t,e){this.priorityFunction_=t,this.keyFunction_=e,this.elements_=[],this.priorities_=[],this.queuedElements_={}}return t.prototype.clear=function(){this.elements_.length=0,this.priorities_.length=0,p(this.queuedElements_)},t.prototype.dequeue=function(){var t=this.elements_,e=this.priorities_,n=t[0];1==t.length?(t.length=0,e.length=0):(t[0]=t.pop(),e[0]=e.pop(),this.siftUp_(0));var o=this.keyFunction_(n);return delete this.queuedElements_[o],n},t.prototype.enqueue=function(t){W(!(this.keyFunction_(t)in this.queuedElements_),31);var e=this.priorityFunction_(t);return e!=ei&&(this.elements_.push(t),this.priorities_.push(e),this.queuedElements_[this.keyFunction_(t)]=!0,this.siftDown_(0,this.elements_.length-1),!0)},t.prototype.getCount=function(){return this.elements_.length},t.prototype.getLeftChildIndex_=function(t){return 2*t+1},t.prototype.getRightChildIndex_=function(t){return 2*t+2},t.prototype.getParentIndex_=function(t){return t-1>>1},t.prototype.heapify_=function(){var t;for(t=(this.elements_.length>>1)-1;t>=0;t--)this.siftUp_(t)},t.prototype.isEmpty=function(){return 0===this.elements_.length},t.prototype.isKeyQueued=function(t){return t in this.queuedElements_},t.prototype.isQueued=function(t){return this.isKeyQueued(this.keyFunction_(t))},t.prototype.siftUp_=function(t){for(var e=this.elements_,n=this.priorities_,o=e.length,i=e[t],r=n[t],s=t;t<o>>1;){var a=this.getLeftChildIndex_(t),l=this.getRightChildIndex_(t),u=l<o&&n[l]<n[a]?l:a;e[t]=e[u],n[t]=n[u],t=u}e[t]=i,n[t]=r,this.siftDown_(s,t)},t.prototype.siftDown_=function(t,e){for(var n=this.elements_,o=this.priorities_,i=n[e],r=o[e];e>t;){var s=this.getParentIndex_(e);if(!(o[s]>r))break;n[e]=n[s],o[e]=o[s],e=s}n[e]=i,o[e]=r},t.prototype.reprioritize=function(){var t,e,n,o=this.priorityFunction_,i=this.elements_,r=this.priorities_,s=0,a=i.length;for(e=0;e<a;++e)(n=o(t=i[e]))==ei?delete this.queuedElements_[this.keyFunction_(t)]:(r[s]=n,i[s++]=t);i.length=s,r.length=s,this.heapify_()},t}();var oi=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function o(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}();const ii=function(t){function e(e,n){var o=t.call(this,(function(t){return e.apply(null,t)}),(function(t){return t[0].getKey()}))||this;return o.boundHandleTileChange_=o.handleTileChange.bind(o),o.tileChangeCallback_=n,o.tilesLoading_=0,o.tilesLoadingKeys_={},o}return oi(e,t),e.prototype.enqueue=function(e){var n=t.prototype.enqueue.call(this,e);return n&&e[0].addEventListener(_,this.boundHandleTileChange_),n},e.prototype.getTilesLoading=function(){return this.tilesLoading_},e.prototype.handleTileChange=function(t){var e=t.target,n=e.getState();if(2===n||3===n||4===n){e.removeEventListener(_,this.boundHandleTileChange_);var o=e.getKey();o in this.tilesLoadingKeys_&&(delete this.tilesLoadingKeys_[o],--this.tilesLoading_),this.tileChangeCallback_()}},e.prototype.loadMoreTiles=function(t,e){for(var n,o,i=0;this.tilesLoading_<t&&i<e&&this.getCount()>0;)o=(n=this.dequeue()[0]).getKey(),0!==n.getState()||o in this.tilesLoadingKeys_||(this.tilesLoadingKeys_[o]=!0,++this.tilesLoading_,++i,n.load())},e}(ni);function ri(t){return t[0]>0&&t[1]>0}function si(t,e){return Array.isArray(t)?t:(void 0===e?e=[t,t]:(e[0]=t,e[1]=t),e)}var ai=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function o(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}();function li(t){t instanceof gt?t.setMapInternal(null):t instanceof Go&&t.getLayers().forEach(li)}function ui(t,e){if(t instanceof gt)t.setMapInternal(e);else if(t instanceof Go)for(var n=t.getLayers().getArray(),o=0,i=n.length;o<i;++o)ui(n[o],e)}const ci=function(t){function e(e){var n=t.call(this)||this;n.on,n.once,n.un;var o=function(t){var e=null;void 0!==t.keyboardEventTarget&&(e="string"==typeof t.keyboardEventTarget?document.getElementById(t.keyboardEventTarget):t.keyboardEventTarget);var n,o,i,r={},s=t.layers&&"function"==typeof t.layers.getLayers?t.layers:new Go({layers:t.layers});return r.layergroup=s,r.target=t.target,r.view=t.view instanceof Co?t.view:new Co,void 0!==t.controls&&(Array.isArray(t.controls)?n=new ko(t.controls.slice()):(W("function"==typeof t.controls.getArray,47),n=t.controls)),void 0!==t.interactions&&(Array.isArray(t.interactions)?o=new ko(t.interactions.slice()):(W("function"==typeof t.interactions.getArray,48),o=t.interactions)),void 0!==t.overlays?Array.isArray(t.overlays)?i=new ko(t.overlays.slice()):(W("function"==typeof t.overlays.getArray,49),i=t.overlays):i=new ko,{controls:n,interactions:o,keyboardEventTarget:e,overlays:i,values:r}}(e);n.renderComplete_,n.boundHandleBrowserEvent_=n.handleBrowserEvent.bind(n),n.maxTilesLoading_=void 0!==e.maxTilesLoading?e.maxTilesLoading:16,n.pixelRatio_=void 0!==e.pixelRatio?e.pixelRatio:St,n.postRenderTimeoutHandle_,n.animationDelayKey_,n.animationDelay_=function(){this.animationDelayKey_=void 0,this.renderFrame_(Date.now())}.bind(n),n.coordinateToPixelTransform_=[1,0,0,1,0,0],n.pixelToCoordinateTransform_=[1,0,0,1,0,0],n.frameIndex_=0,n.frameState_=null,n.previousExtent_=null,n.viewPropertyListenerKey_=null,n.viewChangeListenerKey_=null,n.layerGroupPropertyListenerKeys_=null,n.viewport_=document.createElement("div"),n.viewport_.className="ol-viewport"+("ontouchstart"in window?" ol-touch":""),n.viewport_.style.position="relative",n.viewport_.style.overflow="hidden",n.viewport_.style.width="100%",n.viewport_.style.height="100%",n.overlayContainer_=document.createElement("div"),n.overlayContainer_.style.position="absolute",n.overlayContainer_.style.zIndex="0",n.overlayContainer_.style.width="100%",n.overlayContainer_.style.height="100%",n.overlayContainer_.style.pointerEvents="none",n.overlayContainer_.className="ol-overlaycontainer",n.viewport_.appendChild(n.overlayContainer_),n.overlayContainerStopEvent_=document.createElement("div"),n.overlayContainerStopEvent_.style.position="absolute",n.overlayContainerStopEvent_.style.zIndex="0",n.overlayContainerStopEvent_.style.width="100%",n.overlayContainerStopEvent_.style.height="100%",n.overlayContainerStopEvent_.style.pointerEvents="none",n.overlayContainerStopEvent_.className="ol-overlaycontainer-stopevent",n.viewport_.appendChild(n.overlayContainerStopEvent_),n.mapBrowserEventHandler_=null,n.moveTolerance_=e.moveTolerance,n.keyboardEventTarget_=o.keyboardEventTarget,n.targetChangeHandlerKeys_=null,n.controls=o.controls||new ko,n.interactions=o.interactions||new ko,n.overlays_=o.overlays,n.overlayIdIndex_={},n.renderer_=null,n.postRenderFunctions_=[],n.tileQueue_=new ii(n.getTilePriority.bind(n),n.handleTileChange_.bind(n)),n.addChangeListener(Qo,n.handleLayerGroupChanged_),n.addChangeListener(ti,n.handleViewChanged_),n.addChangeListener($o,n.handleSizeChanged_),n.addChangeListener(Jo,n.handleTargetChanged_),n.setProperties(o.values);var i=n;return!e.view||e.view instanceof Co||e.view.then((function(t){i.setView(new Co(t))})),n.controls.addEventListener(Ao,function(t){t.element.setMap(this)}.bind(n)),n.controls.addEventListener(Io,function(t){t.element.setMap(null)}.bind(n)),n.interactions.addEventListener(Ao,function(t){t.element.setMap(this)}.bind(n)),n.interactions.addEventListener(Io,function(t){t.element.setMap(null)}.bind(n)),n.overlays_.addEventListener(Ao,function(t){this.addOverlayInternal_(t.element)}.bind(n)),n.overlays_.addEventListener(Io,function(t){var e=t.element.getId();void 0!==e&&delete this.overlayIdIndex_[e.toString()],t.element.setMap(null)}.bind(n)),n.controls.forEach(function(t){t.setMap(this)}.bind(n)),n.interactions.forEach(function(t){t.setMap(this)}.bind(n)),n.overlays_.forEach(n.addOverlayInternal_.bind(n)),n}return ai(e,t),e.prototype.createRenderer=function(){throw new Error("Use a map type that has a createRenderer method")},e.prototype.addControl=function(t){this.getControls().push(t)},e.prototype.addInteraction=function(t){this.getInteractions().push(t)},e.prototype.addLayer=function(t){this.getLayerGroup().getLayers().push(t)},e.prototype.handleLayerAdd_=function(t){ui(t.layer,this)},e.prototype.addOverlay=function(t){this.getOverlays().push(t)},e.prototype.addOverlayInternal_=function(t){var e=t.getId();void 0!==e&&(this.overlayIdIndex_[e.toString()]=t),t.setMap(this)},e.prototype.disposeInternal=function(){this.setTarget(null),t.prototype.disposeInternal.call(this)},e.prototype.forEachFeatureAtPixel=function(t,e,n){if(this.frameState_){var o=this.getCoordinateFromPixelInternal(t),i=void 0!==(n=void 0!==n?n:{}).hitTolerance?n.hitTolerance:0,r=void 0!==n.layerFilter?n.layerFilter:l,s=!1!==n.checkWrapped;return this.renderer_.forEachFeatureAtCoordinate(o,this.frameState_,i,s,e,null,r,null)}},e.prototype.getFeaturesAtPixel=function(t,e){var n=[];return this.forEachFeatureAtPixel(t,(function(t){n.push(t)}),e),n},e.prototype.getAllLayers=function(){var t=[];return function e(n){n.forEach((function(n){n instanceof Go?e(n.getLayers()):t.push(n)}))}(this.getLayers()),t},e.prototype.forEachLayerAtPixel=function(t,e,n){if(this.frameState_){var o=n||{},i=void 0!==o.hitTolerance?o.hitTolerance:0,r=o.layerFilter||l;return this.renderer_.forEachLayerAtPixel(t,this.frameState_,i,e,r)}},e.prototype.hasFeatureAtPixel=function(t,e){if(!this.frameState_)return!1;var n=this.getCoordinateFromPixelInternal(t),o=void 0!==(e=void 0!==e?e:{}).layerFilter?e.layerFilter:l,i=void 0!==e.hitTolerance?e.hitTolerance:0,r=!1!==e.checkWrapped;return this.renderer_.hasFeatureAtCoordinate(n,this.frameState_,i,r,o,null)},e.prototype.getEventCoordinate=function(t){return this.getCoordinateFromPixel(this.getEventPixel(t))},e.prototype.getEventCoordinateInternal=function(t){return this.getCoordinateFromPixelInternal(this.getEventPixel(t))},e.prototype.getEventPixel=function(t){var e=this.viewport_.getBoundingClientRect(),n="changedTouches"in t?t.changedTouches[0]:t;return[n.clientX-e.left,n.clientY-e.top]},e.prototype.getTarget=function(){return this.get(Jo)},e.prototype.getTargetElement=function(){var t=this.getTarget();return void 0!==t?"string"==typeof t?document.getElementById(t):t:null},e.prototype.getCoordinateFromPixel=function(t){return pn(this.getCoordinateFromPixelInternal(t),this.getView().getProjection())},e.prototype.getCoordinateFromPixelInternal=function(t){var e=this.frameState_;return e?jt(e.pixelToCoordinateTransform,t.slice()):null},e.prototype.getControls=function(){return this.controls},e.prototype.getOverlays=function(){return this.overlays_},e.prototype.getOverlayById=function(t){var e=this.overlayIdIndex_[t.toString()];return void 0!==e?e:null},e.prototype.getInteractions=function(){return this.interactions},e.prototype.getLayerGroup=function(){return this.get(Qo)},e.prototype.setLayers=function(t){var e=this.getLayerGroup();if(t instanceof ko)e.setLayers(t);else{var n=e.getLayers();n.clear(),n.extend(t)}},e.prototype.getLayers=function(){return this.getLayerGroup().getLayers()},e.prototype.getLoading=function(){for(var t=this.getLayerGroup().getLayerStatesArray(),e=0,n=t.length;e<n;++e){var o=t[e].layer.getSource();if(o&&o.loading)return!0}return!1},e.prototype.getPixelFromCoordinate=function(t){var e=dn(t,this.getView().getProjection());return this.getPixelFromCoordinateInternal(e)},e.prototype.getPixelFromCoordinateInternal=function(t){var e=this.frameState_;return e?jt(e.coordinateToPixelTransform,t.slice(0,2)):null},e.prototype.getRenderer=function(){return this.renderer_},e.prototype.getSize=function(){return this.get($o)},e.prototype.getView=function(){return this.get(ti)},e.prototype.getViewport=function(){return this.viewport_},e.prototype.getOverlayContainer=function(){return this.overlayContainer_},e.prototype.getOverlayContainerStopEvent=function(){return this.overlayContainerStopEvent_},e.prototype.getOwnerDocument=function(){var t=this.getTargetElement();return t?t.ownerDocument:document},e.prototype.getTilePriority=function(t,e,n,o){return function(t,e,n,o,i){if(!t||!(n in t.wantedTiles))return ei;if(!t.wantedTiles[n][e.getKey()])return ei;var r=t.viewState.center,s=o[0]-r[0],a=o[1]-r[1];return 65536*Math.log(i)+Math.sqrt(s*s+a*a)/i}(this.frameState_,t,e,n,o)},e.prototype.handleBrowserEvent=function(t,e){var n=e||t.type,o=new Uo(n,this,t);this.handleMapBrowserEvent(o)},e.prototype.handleMapBrowserEvent=function(t){if(this.frameState_){var e=t.originalEvent,n=e.type;if(n===Bo||n===b||n===C){var o=this.getOwnerDocument(),i=this.viewport_.getRootNode?this.viewport_.getRootNode():o,r=e.target;if(this.overlayContainerStopEvent_.contains(r)||!(i===o?o.documentElement:i).contains(r))return}if(t.frameState=this.frameState_,!1!==this.dispatchEvent(t))for(var s=this.getInteractions().getArray().slice(),a=s.length-1;a>=0;a--){var l=s[a];if(l.getMap()===this&&l.getActive()&&this.getTargetElement()&&(!l.handleEvent(t)||t.propagationStopped))break}}},e.prototype.handlePostRender=function(){var t=this.frameState_,e=this.tileQueue_;if(!e.isEmpty()){var n=this.maxTilesLoading_,o=n;if(t){var i=t.viewHints;if(i[0]||i[1]){var r=Date.now()-t.time>8;n=r?0:8,o=r?0:2}}e.getTilesLoading()<n&&(e.reprioritize(),e.loadMoreTiles(n,o))}t&&this.hasListener(ct)&&!t.animate&&this.renderComplete_&&this.renderer_.dispatchRenderEvent(ct,t);for(var s=this.postRenderFunctions_,a=0,l=s.length;a<l;++a)s[a](this,t);s.length=0},e.prototype.handleSizeChanged_=function(){this.getView()&&!this.getView().getAnimating()&&this.getView().resolveConstraints(0),this.render()},e.prototype.handleTargetChanged_=function(){if(this.mapBrowserEventHandler_){for(var t=0,e=this.targetChangeHandlerKeys_.length;t<e;++t)O(this.targetChangeHandlerKeys_[t]);this.targetChangeHandlerKeys_=null,this.viewport_.removeEventListener(m,this.boundHandleBrowserEvent_),this.viewport_.removeEventListener(b,this.boundHandleBrowserEvent_),this.mapBrowserEventHandler_.dispose(),this.mapBrowserEventHandler_=null,ge(this.viewport_)}var n=this.getTargetElement();if(n){for(var o in n.appendChild(this.viewport_),this.renderer_||(this.renderer_=this.createRenderer()),this.mapBrowserEventHandler_=new Yo(this,this.moveTolerance_),Xo)this.mapBrowserEventHandler_.addEventListener(Xo[o],this.handleMapBrowserEvent.bind(this));this.viewport_.addEventListener(m,this.boundHandleBrowserEvent_,!1),this.viewport_.addEventListener(b,this.boundHandleBrowserEvent_,!!It&&{passive:!1});var i=this.getOwnerDocument().defaultView,r=this.keyboardEventTarget_?this.keyboardEventTarget_:n;this.targetChangeHandlerKeys_=[T(r,C,this.handleBrowserEvent,this),T(r,x,this.handleBrowserEvent,this),T(i,"resize",this.updateSize,this)]}else this.renderer_&&(clearTimeout(this.postRenderTimeoutHandle_),this.postRenderTimeoutHandle_=void 0,this.postRenderFunctions_.length=0,this.renderer_.dispose(),this.renderer_=null),this.animationDelayKey_&&(cancelAnimationFrame(this.animationDelayKey_),this.animationDelayKey_=void 0);this.updateSize()},e.prototype.handleTileChange_=function(){this.render()},e.prototype.handleViewPropertyChanged_=function(){this.render()},e.prototype.handleViewChanged_=function(){this.viewPropertyListenerKey_&&(O(this.viewPropertyListenerKey_),this.viewPropertyListenerKey_=null),this.viewChangeListenerKey_&&(O(this.viewChangeListenerKey_),this.viewChangeListenerKey_=null);var t=this.getView();t&&(this.updateViewportSize_(),this.viewPropertyListenerKey_=T(t,n,this.handleViewPropertyChanged_,this),this.viewChangeListenerKey_=T(t,_,this.handleViewPropertyChanged_,this),t.resolveConstraints(0)),this.render()},e.prototype.handleLayerGroupChanged_=function(){this.layerGroupPropertyListenerKeys_&&(this.layerGroupPropertyListenerKeys_.forEach(O),this.layerGroupPropertyListenerKeys_=null);var t=this.getLayerGroup();t&&(this.handleLayerAdd_(new zo("addlayer",t)),this.layerGroupPropertyListenerKeys_=[T(t,n,this.render,this),T(t,_,this.render,this),T(t,"addlayer",this.handleLayerAdd_,this),T(t,"removelayer",this.handleLayerRemove_,this)]),this.render()},e.prototype.isRendered=function(){return!!this.frameState_},e.prototype.renderSync=function(){this.animationDelayKey_&&cancelAnimationFrame(this.animationDelayKey_),this.animationDelay_()},e.prototype.redrawText=function(){for(var t=this.getLayerGroup().getLayerStatesArray(),e=0,n=t.length;e<n;++e){var o=t[e].layer;o.hasRenderer()&&o.getRenderer().handleFontsChanged()}},e.prototype.render=function(){this.renderer_&&void 0===this.animationDelayKey_&&(this.animationDelayKey_=requestAnimationFrame(this.animationDelay_))},e.prototype.removeControl=function(t){return this.getControls().remove(t)},e.prototype.removeInteraction=function(t){return this.getInteractions().remove(t)},e.prototype.removeLayer=function(t){return this.getLayerGroup().getLayers().remove(t)},e.prototype.handleLayerRemove_=function(t){li(t.layer)},e.prototype.removeOverlay=function(t){return this.getOverlays().remove(t)},e.prototype.renderFrame_=function(t){var e,n,o=this,i=this.getSize(),r=this.getView(),s=this.frameState_,a=null;if(void 0!==i&&ri(i)&&r&&r.isDef()){var l=r.getHints(this.frameState_?this.frameState_.viewHints:void 0),u=r.getState();if(a={animate:!1,coordinateToPixelTransform:this.coordinateToPixelTransform_,declutterTree:null,extent:re(u.center,u.resolution,u.rotation,i),index:this.frameIndex_++,layerIndex:0,layerStatesArray:this.getLayerGroup().getLayerStatesArray(),pixelRatio:this.pixelRatio_,pixelToCoordinateTransform:this.pixelToCoordinateTransform_,postRenderFunctions:[],size:i,tileQueue:this.tileQueue_,time:t,usedTiles:{},viewState:u,viewHints:l,wantedTiles:{},mapId:j(this),renderTargets:{}},u.nextCenter&&u.nextResolution){var c=isNaN(u.nextRotation)?u.rotation:u.nextRotation;a.nextExtent=re(u.nextCenter,u.nextResolution,c,i)}}this.frameState_=a,this.renderer_.renderFrame(a),a&&(a.animate&&this.render(),Array.prototype.push.apply(this.postRenderFunctions_,a.postRenderFunctions),s&&(!this.previousExtent_||!pe(this.previousExtent_)&&!Yt(a.extent,this.previousExtent_))&&(this.dispatchEvent(new Zo("movestart",this,s)),this.previousExtent_=Wt(this.previousExtent_)),this.previousExtent_&&!a.viewHints[0]&&!a.viewHints[1]&&!Yt(a.extent,this.previousExtent_)&&(this.dispatchEvent(new Zo("moveend",this,a)),e=a.extent,(n=this.previousExtent_)?(n[0]=e[0],n[1]=e[1],n[2]=e[2],n[3]=e[3]):e.slice())),this.dispatchEvent(new Zo(qo,this,a)),this.renderComplete_=!this.tileQueue_.getTilesLoading()&&!this.tileQueue_.getCount()&&!this.getLoading(),this.postRenderTimeoutHandle_||(this.postRenderTimeoutHandle_=setTimeout((function(){o.postRenderTimeoutHandle_=void 0,o.handlePostRender()}),0))},e.prototype.setLayerGroup=function(t){var e=this.getLayerGroup();e&&this.handleLayerRemove_(new zo("removelayer",e)),this.set(Qo,t)},e.prototype.setSize=function(t){this.set($o,t)},e.prototype.setTarget=function(t){this.set(Jo,t)},e.prototype.setView=function(t){if(!t||t instanceof Co)this.set(ti,t);else{this.set(ti,new Co);var e=this;t.then((function(t){e.setView(new Co(t))}))}},e.prototype.updateSize=function(){var t=this.getTargetElement(),e=void 0;if(t){var n=getComputedStyle(t),o=t.offsetWidth-parseFloat(n.borderLeftWidth)-parseFloat(n.paddingLeft)-parseFloat(n.paddingRight)-parseFloat(n.borderRightWidth),i=t.offsetHeight-parseFloat(n.borderTopWidth)-parseFloat(n.paddingTop)-parseFloat(n.paddingBottom)-parseFloat(n.borderBottomWidth);isNaN(o)||isNaN(i)||!ri(e=[o,i])&&(t.offsetWidth||t.offsetHeight||t.getClientRects().length)&&console.warn("No map visible because the map container's width or height are 0.")}this.setSize(e),this.updateViewportSize_()},e.prototype.updateViewportSize_=function(){var t=this.getView();if(t){var e=void 0,n=getComputedStyle(this.viewport_);n.width&&n.height&&(e=[parseInt(n.width,10),parseInt(n.height,10)]),t.setViewportSize(e)}},e}(k);var hi=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function o(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}();const pi=function(t){function e(e){var n=t.call(this)||this,o=e.element;return!o||e.target||o.style.pointerEvents||(o.style.pointerEvents="auto"),n.element=o||null,n.target_=null,n.map_=null,n.listenerKeys=[],e.render&&(n.render=e.render),e.target&&n.setTarget(e.target),n}return hi(e,t),e.prototype.disposeInternal=function(){ge(this.element),t.prototype.disposeInternal.call(this)},e.prototype.getMap=function(){return this.map_},e.prototype.setMap=function(t){this.map_&&ge(this.element);for(var e=0,n=this.listenerKeys.length;e<n;++e)O(this.listenerKeys[e]);this.listenerKeys.length=0,this.map_=t,this.map_&&((this.target_?this.target_:t.getOverlayContainerStopEvent()).appendChild(this.element),this.render!==c&&this.listenerKeys.push(T(t,qo,this.render,this)),t.render())},e.prototype.render=function(t){},e.prototype.setTarget=function(t){this.target_="string"==typeof t?document.getElementById(t):t},e}(k);var di=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function o(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}();const fi=function(t){function e(e){var n=this,o=e||{};(n=t.call(this,{element:document.createElement("div"),render:o.render,target:o.target})||this).ulElement_=document.createElement("ul"),n.collapsed_=void 0===o.collapsed||o.collapsed,n.userCollapsed_=n.collapsed_,n.overrideCollapsible_=void 0!==o.collapsible,n.collapsible_=void 0===o.collapsible||o.collapsible,n.collapsible_||(n.collapsed_=!1);var i=void 0!==o.className?o.className:"ol-attribution",r=void 0!==o.tipLabel?o.tipLabel:"Attributions",s=void 0!==o.expandClassName?o.expandClassName:i+"-expand",a=void 0!==o.collapseLabel?o.collapseLabel:"›",l=void 0!==o.collapseClassName?o.collapseClassName:i+"-collpase";"string"==typeof a?(n.collapseLabel_=document.createElement("span"),n.collapseLabel_.textContent=a,n.collapseLabel_.className=l):n.collapseLabel_=a;var u=void 0!==o.label?o.label:"i";"string"==typeof u?(n.label_=document.createElement("span"),n.label_.textContent=u,n.label_.className=s):n.label_=u;var c=n.collapsible_&&!n.collapsed_?n.collapseLabel_:n.label_;n.toggleButton_=document.createElement("button"),n.toggleButton_.setAttribute("type","button"),n.toggleButton_.setAttribute("aria-expanded",String(!n.collapsed_)),n.toggleButton_.title=r,n.toggleButton_.appendChild(c),n.toggleButton_.addEventListener(w,n.handleClick_.bind(n),!1);var h=i+" ol-unselectable "+Te+(n.collapsed_&&n.collapsible_?" ol-collapsed":"")+(n.collapsible_?"":" ol-uncollapsible"),p=n.element;return p.className=h,p.appendChild(n.toggleButton_),p.appendChild(n.ulElement_),n.renderedAttributions_=[],n.renderedVisible_=!0,n}return di(e,t),e.prototype.collectSourceAttributions_=function(t){for(var e={},n=[],o=!0,i=t.layerStatesArray,r=0,s=i.length;r<s;++r){var a=i[r];if(ft(a,t.viewState)){var l=a.layer.getSource();if(l){var u=l.getAttributions();if(u){var c=u(t);if(c)if(o=o&&!1!==l.getAttributionsCollapsible(),Array.isArray(c))for(var h=0,p=c.length;h<p;++h)c[h]in e||(n.push(c[h]),e[c[h]]=!0);else c in e||(n.push(c),e[c]=!0)}}}}return this.overrideCollapsible_||this.setCollapsible(o),n},e.prototype.updateElement_=function(t){if(t){var e=this.collectSourceAttributions_(t),n=e.length>0;if(this.renderedVisible_!=n&&(this.element.style.display=n?"":"none",this.renderedVisible_=n),!a(e,this.renderedAttributions_)){!function(t){for(;t.lastChild;)t.removeChild(t.lastChild)}(this.ulElement_);for(var o=0,i=e.length;o<i;++o){var r=document.createElement("li");r.innerHTML=e[o],this.ulElement_.appendChild(r)}this.renderedAttributions_=e}}else this.renderedVisible_&&(this.element.style.display="none",this.renderedVisible_=!1)},e.prototype.handleClick_=function(t){t.preventDefault(),this.handleToggle_(),this.userCollapsed_=this.collapsed_},e.prototype.handleToggle_=function(){this.element.classList.toggle("ol-collapsed"),this.collapsed_?fe(this.collapseLabel_,this.label_):fe(this.label_,this.collapseLabel_),this.collapsed_=!this.collapsed_,this.toggleButton_.setAttribute("aria-expanded",String(!this.collapsed_))},e.prototype.getCollapsible=function(){return this.collapsible_},e.prototype.setCollapsible=function(t){this.collapsible_!==t&&(this.collapsible_=t,this.element.classList.toggle("ol-uncollapsible"),this.userCollapsed_&&this.handleToggle_())},e.prototype.setCollapsed=function(t){this.userCollapsed_=t,this.collapsible_&&this.collapsed_!==t&&this.handleToggle_()},e.prototype.getCollapsed=function(){return this.collapsed_},e.prototype.render=function(t){this.updateElement_(t.frameState)},e}(pi);var gi=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function o(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}(),vi=function(t){function e(e){var n=this,o=e||{};n=t.call(this,{element:document.createElement("div"),render:o.render,target:o.target})||this;var i=void 0!==o.className?o.className:"ol-rotate",r=void 0!==o.label?o.label:"⇧",s=void 0!==o.compassClassName?o.compassClassName:"ol-compass";n.label_=null,"string"==typeof r?(n.label_=document.createElement("span"),n.label_.className=s,n.label_.textContent=r):(n.label_=r,n.label_.classList.add(s));var a=o.tipLabel?o.tipLabel:"Reset rotation",l=document.createElement("button");l.className=i+"-reset",l.setAttribute("type","button"),l.title=a,l.appendChild(n.label_),l.addEventListener(w,n.handleClick_.bind(n),!1);var u=i+" ol-unselectable "+Te,c=n.element;return c.className=u,c.appendChild(l),n.callResetNorth_=o.resetNorth?o.resetNorth:void 0,n.duration_=void 0!==o.duration?o.duration:250,n.autoHide_=void 0===o.autoHide||o.autoHide,n.rotation_=void 0,n.autoHide_&&n.element.classList.add(be),n}return gi(e,t),e.prototype.handleClick_=function(t){t.preventDefault(),void 0!==this.callResetNorth_?this.callResetNorth_():this.resetNorth_()},e.prototype.resetNorth_=function(){var t=this.getMap().getView();if(t){var e=t.getRotation();void 0!==e&&(this.duration_>0&&e%(2*Math.PI)!=0?t.animate({rotation:0,duration:this.duration_,easing:An}):t.setRotation(0))}},e.prototype.render=function(t){var e=t.frameState;if(e){var n=e.viewState.rotation;if(n!=this.rotation_){var o="rotate("+n+"rad)";if(this.autoHide_){var i=this.element.classList.contains(be);i||0!==n?i&&0!==n&&this.element.classList.remove(be):this.element.classList.add(be)}this.label_.style.transform=o}this.rotation_=n}},e}(pi);const _i=vi;var yi=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function o(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}();const mi=function(t){function e(e){var n=this,o=e||{};n=t.call(this,{element:document.createElement("div"),target:o.target})||this;var i=void 0!==o.className?o.className:"ol-zoom",r=void 0!==o.delta?o.delta:1,s=void 0!==o.zoomInClassName?o.zoomInClassName:i+"-in",a=void 0!==o.zoomOutClassName?o.zoomOutClassName:i+"-out",l=void 0!==o.zoomInLabel?o.zoomInLabel:"+",u=void 0!==o.zoomOutLabel?o.zoomOutLabel:"–",c=void 0!==o.zoomInTipLabel?o.zoomInTipLabel:"Zoom in",h=void 0!==o.zoomOutTipLabel?o.zoomOutTipLabel:"Zoom out",p=document.createElement("button");p.className=s,p.setAttribute("type","button"),p.title=c,p.appendChild("string"==typeof l?document.createTextNode(l):l),p.addEventListener(w,n.handleClick_.bind(n,r),!1);var d=document.createElement("button");d.className=a,d.setAttribute("type","button"),d.title=h,d.appendChild("string"==typeof u?document.createTextNode(u):u),d.addEventListener(w,n.handleClick_.bind(n,-r),!1);var f=i+" ol-unselectable "+Te,g=n.element;return g.className=f,g.appendChild(p),g.appendChild(d),n.duration_=void 0!==o.duration?o.duration:250,n}return yi(e,t),e.prototype.handleClick_=function(t,e){e.preventDefault(),this.zoomByDelta_(t)},e.prototype.zoomByDelta_=function(t){var e=this.getMap().getView();if(e){var n=e.getZoom();if(void 0!==n){var o=e.getConstrainedZoom(n+t);this.duration_>0?(e.getAnimating()&&e.cancelAnimations(),e.animate({zoom:o,duration:this.duration_,easing:An})):e.setZoom(o)}}},e}(pi),wi="active";var Ci=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function o(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}();function xi(t,e,n,o){var i=t.getZoom();if(void 0!==i){var r=t.getConstrainedZoom(i+e),s=t.getResolutionForZoom(r);t.getAnimating()&&t.cancelAnimations(),t.animate({resolution:s,anchor:n,duration:void 0!==o?o:250,easing:An})}}const Ei=function(t){function e(e){var n=t.call(this)||this;return n.on,n.once,n.un,e&&e.handleEvent&&(n.handleEvent=e.handleEvent),n.map_=null,n.setActive(!0),n}return Ci(e,t),e.prototype.getActive=function(){return this.get(wi)},e.prototype.getMap=function(){return this.map_},e.prototype.handleEvent=function(t){return!0},e.prototype.setActive=function(t){this.set(wi,t)},e.prototype.setMap=function(t){this.map_=t},e}(k);var bi=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function o(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}();const Ti=function(t){function e(e){var n=t.call(this)||this,o=e||{};return n.delta_=o.delta?o.delta:1,n.duration_=void 0!==o.duration?o.duration:250,n}return bi(e,t),e.prototype.handleEvent=function(t){var e=!1;if(t.type==Xo.DBLCLICK){var n=t.originalEvent,o=t.map,i=t.coordinate,r=n.shiftKey?-this.delta_:this.delta_;xi(o.getView(),r,i,this.duration_),n.preventDefault(),e=!0}return!e},e}(Ei);var Pi=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function o(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}();function Oi(t){for(var e=t.length,n=0,o=0,i=0;i<e;i++)n+=t[i].clientX,o+=t[i].clientY;return[n/e,o/e]}const Ri=function(t){function e(e){var n=this,o=e||{};return n=t.call(this,o)||this,o.handleDownEvent&&(n.handleDownEvent=o.handleDownEvent),o.handleDragEvent&&(n.handleDragEvent=o.handleDragEvent),o.handleMoveEvent&&(n.handleMoveEvent=o.handleMoveEvent),o.handleUpEvent&&(n.handleUpEvent=o.handleUpEvent),o.stopDown&&(n.stopDown=o.stopDown),n.handlingDownUpSequence=!1,n.trackedPointers_={},n.targetPointers=[],n}return Pi(e,t),e.prototype.getPointerCount=function(){return this.targetPointers.length},e.prototype.handleDownEvent=function(t){return!1},e.prototype.handleDragEvent=function(t){},e.prototype.handleEvent=function(t){if(!t.originalEvent)return!0;var e=!1;if(this.updateTrackedPointers_(t),this.handlingDownUpSequence){if(t.type==Xo.POINTERDRAG)this.handleDragEvent(t),t.originalEvent.preventDefault();else if(t.type==Xo.POINTERUP){var n=this.handleUpEvent(t);this.handlingDownUpSequence=n&&this.targetPointers.length>0}}else if(t.type==Xo.POINTERDOWN){var o=this.handleDownEvent(t);this.handlingDownUpSequence=o,e=this.stopDown(o)}else t.type==Xo.POINTERMOVE&&this.handleMoveEvent(t);return!e},e.prototype.handleMoveEvent=function(t){},e.prototype.handleUpEvent=function(t){return!1},e.prototype.stopDown=function(t){return t},e.prototype.updateTrackedPointers_=function(t){if(function(t){var e=t.type;return e===Xo.POINTERDOWN||e===Xo.POINTERDRAG||e===Xo.POINTERUP}(t)){var e=t.originalEvent,n=e.pointerId.toString();t.type==Xo.POINTERUP?delete this.trackedPointers_[n]:(t.type==Xo.POINTERDOWN||n in this.trackedPointers_)&&(this.trackedPointers_[n]=e),this.targetPointers=f(this.trackedPointers_)}},e}(Ei);function Si(t){var e=arguments;return function(t){for(var n=!0,o=0,i=e.length;o<i&&(n=n&&e[o](t));++o);return n}}var Mi=function(t){var e=t.originalEvent;return e.altKey&&!(e.metaKey||e.ctrlKey)&&e.shiftKey},Ai=function(t){return!t.map.getTargetElement().hasAttribute("tabindex")||function(t){var e=t.map.getTargetElement(),n=t.map.getOwnerDocument().activeElement;return e.contains(n)}(t)},Ii=l,ji=function(t){var e=t.originalEvent;return 0==e.button&&!(Ot&&Rt&&e.ctrlKey)},Li=function(t){var e=t.originalEvent;return!e.altKey&&!(e.metaKey||e.ctrlKey)&&!e.shiftKey},Fi=function(t){var e=t.originalEvent;return!e.altKey&&!(e.metaKey||e.ctrlKey)&&e.shiftKey},ki=function(t){var e=t.originalEvent.target.tagName;return"INPUT"!==e&&"SELECT"!==e&&"TEXTAREA"!==e},Di=function(t){var e=t.originalEvent;return W(void 0!==e,56),"mouse"==e.pointerType},zi=function(t){var e=t.originalEvent;return W(void 0!==e,56),e.isPrimary&&0===e.button},Ni=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function o(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}();const Gi=function(t){function e(e){var n=t.call(this,{stopDown:u})||this,o=e||{};n.kinetic_=o.kinetic,n.lastCentroid=null,n.lastPointersCount_,n.panning_=!1;var i=o.condition?o.condition:Si(Li,zi);return n.condition_=o.onFocusOnly?Si(Ai,i):i,n.noKinetic_=!1,n}return Ni(e,t),e.prototype.handleDragEvent=function(t){this.panning_||(this.panning_=!0,this.getMap().getView().beginInteraction());var e,n,o=this.targetPointers,i=Oi(o);if(o.length==this.lastPointersCount_){if(this.kinetic_&&this.kinetic_.update(i[0],i[1]),this.lastCentroid){var r=[this.lastCentroid[0]-i[0],i[1]-this.lastCentroid[1]],s=t.map.getView();e=r,n=s.getResolution(),e[0]*=n,e[1]*=n,xn(r,s.getRotation()),s.adjustCenterInternal(r)}}else this.kinetic_&&this.kinetic_.begin();this.lastCentroid=i,this.lastPointersCount_=o.length,t.originalEvent.preventDefault()},e.prototype.handleUpEvent=function(t){var e=t.map,n=e.getView();if(0===this.targetPointers.length){if(!this.noKinetic_&&this.kinetic_&&this.kinetic_.end()){var o=this.kinetic_.getDistance(),i=this.kinetic_.getAngle(),r=n.getCenterInternal(),s=e.getPixelFromCoordinateInternal(r),a=e.getCoordinateFromPixelInternal([s[0]-o*Math.cos(i),s[1]-o*Math.sin(i)]);n.animateInternal({center:n.getConstrainedCenter(a),duration:500,easing:An})}return this.panning_&&(this.panning_=!1,n.endInteraction()),!1}return this.kinetic_&&this.kinetic_.begin(),this.lastCentroid=null,!0},e.prototype.handleDownEvent=function(t){if(this.targetPointers.length>0&&this.condition_(t)){var e=t.map.getView();return this.lastCentroid=null,e.getAnimating()&&e.cancelAnimations(),this.kinetic_&&this.kinetic_.begin(),this.noKinetic_=this.targetPointers.length>1,!0}return!1},e}(Ri);var Ki=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function o(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}(),Zi=function(t){function e(e){var n=this,o=e||{};return(n=t.call(this,{stopDown:u})||this).condition_=o.condition?o.condition:Mi,n.lastAngle_=void 0,n.duration_=void 0!==o.duration?o.duration:250,n}return Ki(e,t),e.prototype.handleDragEvent=function(t){if(Di(t)){var e=t.map,n=e.getView();if(n.getConstraints().rotation!==Rn){var o=e.getSize(),i=t.pixel,r=Math.atan2(o[1]/2-i[1],i[0]-o[0]/2);if(void 0!==this.lastAngle_){var s=r-this.lastAngle_;n.adjustRotationInternal(-s)}this.lastAngle_=r}}},e.prototype.handleUpEvent=function(t){return!Di(t)||(t.map.getView().endInteraction(this.duration_),!1)},e.prototype.handleDownEvent=function(t){return!(!Di(t)||!ji(t)||!this.condition_(t)||(t.map.getView().beginInteraction(),this.lastAngle_=void 0,0))},e}(Ri);const Vi=Zi;var Ui=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function o(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}(),Xi=function(t){function e(e){var n=t.call(this)||this;return n.geometry_=null,n.element_=document.createElement("div"),n.element_.style.position="absolute",n.element_.style.pointerEvents="auto",n.element_.className="ol-box "+e,n.map_=null,n.startPixel_=null,n.endPixel_=null,n}return Ui(e,t),e.prototype.disposeInternal=function(){this.setMap(null)},e.prototype.render_=function(){var t=this.startPixel_,e=this.endPixel_,n="px",o=this.element_.style;o.left=Math.min(t[0],e[0])+n,o.top=Math.min(t[1],e[1])+n,o.width=Math.abs(e[0]-t[0])+n,o.height=Math.abs(e[1]-t[1])+n},e.prototype.setMap=function(t){if(this.map_){this.map_.getOverlayContainer().removeChild(this.element_);var e=this.element_.style;e.left="inherit",e.top="inherit",e.width="inherit",e.height="inherit"}this.map_=t,this.map_&&this.map_.getOverlayContainer().appendChild(this.element_)},e.prototype.setPixels=function(t,e){this.startPixel_=t,this.endPixel_=e,this.createOrUpdateGeometry(),this.render_()},e.prototype.createOrUpdateGeometry=function(){var t=this.startPixel_,e=this.endPixel_,n=[t,[t[0],e[1]],e,[e[0],t[1]]].map(this.map_.getCoordinateFromPixelInternal,this.map_);n[4]=n[0].slice(),this.geometry_?this.geometry_.setCoordinates([n]):this.geometry_=new fo([n])},e.prototype.getGeometry=function(){return this.geometry_},e}(o);const Hi=Xi;var Bi=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function o(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}(),Wi=function(t){function e(e,n,o){var i=t.call(this,e)||this;return i.coordinate=n,i.mapBrowserEvent=o,i}return Bi(e,t),e}(e);const Yi=function(t){function e(e){var n=t.call(this)||this;n.on,n.once,n.un;var o=e||{};return n.box_=new Hi(o.className||"ol-dragbox"),n.minArea_=void 0!==o.minArea?o.minArea:64,o.onBoxEnd&&(n.onBoxEnd=o.onBoxEnd),n.startPixel_=null,n.condition_=o.condition?o.condition:ji,n.boxEndCondition_=o.boxEndCondition?o.boxEndCondition:n.defaultBoxEndCondition,n}return Bi(e,t),e.prototype.defaultBoxEndCondition=function(t,e,n){var o=n[0]-e[0],i=n[1]-e[1];return o*o+i*i>=this.minArea_},e.prototype.getGeometry=function(){return this.box_.getGeometry()},e.prototype.handleDragEvent=function(t){this.box_.setPixels(this.startPixel_,t.pixel),this.dispatchEvent(new Wi("boxdrag",t.coordinate,t))},e.prototype.handleUpEvent=function(t){this.box_.setMap(null);var e=this.boxEndCondition_(t,this.startPixel_,t.pixel);return e&&this.onBoxEnd(t),this.dispatchEvent(new Wi(e?"boxend":"boxcancel",t.coordinate,t)),!1},e.prototype.handleDownEvent=function(t){return!!this.condition_(t)&&(this.startPixel_=t.pixel,this.box_.setMap(t.map),this.box_.setPixels(this.startPixel_,this.startPixel_),this.dispatchEvent(new Wi("boxstart",t.coordinate,t)),!0)},e.prototype.onBoxEnd=function(t){},e}(Ri);var qi=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function o(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}();const Qi=function(t){function e(e){var n=this,o=e||{},i=o.condition?o.condition:Fi;return(n=t.call(this,{condition:i,className:o.className||"ol-dragzoom",minArea:o.minArea})||this).duration_=void 0!==o.duration?o.duration:200,n.out_=void 0!==o.out&&o.out,n}return qi(e,t),e.prototype.onBoxEnd=function(t){var e=this.getMap().getView(),n=this.getGeometry();if(this.out_){var o=e.rotatedExtentForGeometry(n),i=e.getResolutionForExtentInternal(o),r=e.getResolution()/i;(n=n.clone()).scale(r*r)}e.fitInternal(n,{duration:this.duration_,easing:An})},e}(Yi);var $i=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function o(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}();const Ji=function(t){function e(e){var n=t.call(this)||this,o=e||{};return n.defaultCondition_=function(t){return Li(t)&&ki(t)},n.condition_=void 0!==o.condition?o.condition:n.defaultCondition_,n.duration_=void 0!==o.duration?o.duration:100,n.pixelDelta_=void 0!==o.pixelDelta?o.pixelDelta:128,n}return $i(e,t),e.prototype.handleEvent=function(t){var e=!1;if(t.type==C){var n=t.originalEvent,o=n.keyCode;if(this.condition_(t)&&(40==o||37==o||39==o||38==o)){var i=t.map.getView(),r=i.getResolution()*this.pixelDelta_,s=0,a=0;40==o?a=-r:37==o?s=-r:39==o?s=r:a=r;var l=[s,a];xn(l,i.getRotation()),function(t,e,n){var o=t.getCenterInternal();if(o){var i=[o[0]+e[0],o[1]+e[1]];t.animateInternal({duration:void 0!==n?n:250,easing:jn,center:t.getConstrainedCenter(i)})}}(i,l,this.duration_),n.preventDefault(),e=!0}}return!e},e}(Ei);var tr=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function o(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}();const er=function(t){function e(e){var n=t.call(this)||this,o=e||{};return n.condition_=o.condition?o.condition:ki,n.delta_=o.delta?o.delta:1,n.duration_=void 0!==o.duration?o.duration:100,n}return tr(e,t),e.prototype.handleEvent=function(t){var e=!1;if(t.type==C||t.type==x){var n=t.originalEvent,o=n.charCode;if(this.condition_(t)&&(o=="+".charCodeAt(0)||o=="-".charCodeAt(0))){var i=t.map,r=o=="+".charCodeAt(0)?this.delta_:-this.delta_;xi(i.getView(),r,void 0,this.duration_),n.preventDefault(),e=!0}}return!e},e}(Ei),nr=function(){function t(t,e,n){this.decay_=t,this.minVelocity_=e,this.delay_=n,this.points_=[],this.angle_=0,this.initialVelocity_=0}return t.prototype.begin=function(){this.points_.length=0,this.angle_=0,this.initialVelocity_=0},t.prototype.update=function(t,e){this.points_.push(t,e,Date.now())},t.prototype.end=function(){if(this.points_.length<6)return!1;var t=Date.now()-this.delay_,e=this.points_.length-3;if(this.points_[e+2]<t)return!1;for(var n=e-3;n>0&&this.points_[n+2]>t;)n-=3;var o=this.points_[e+2]-this.points_[n+2];if(o<1e3/60)return!1;var i=this.points_[e]-this.points_[n],r=this.points_[e+1]-this.points_[n+1];return this.angle_=Math.atan2(r,i),this.initialVelocity_=Math.sqrt(i*i+r*r)/o,this.initialVelocity_>this.minVelocity_},t.prototype.getDistance=function(){return(this.minVelocity_-this.initialVelocity_)/this.decay_},t.prototype.getAngle=function(){return this.angle_},t}();var or=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function o(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}(),ir="trackpad";const rr=function(t){function e(e){var n=this,o=e||{};(n=t.call(this,o)||this).totalDelta_=0,n.lastDelta_=0,n.maxDelta_=void 0!==o.maxDelta?o.maxDelta:1,n.duration_=void 0!==o.duration?o.duration:250,n.timeout_=void 0!==o.timeout?o.timeout:80,n.useAnchor_=void 0===o.useAnchor||o.useAnchor,n.constrainResolution_=void 0!==o.constrainResolution&&o.constrainResolution;var i=o.condition?o.condition:Ii;return n.condition_=o.onFocusOnly?Si(Ai,i):i,n.lastAnchor_=null,n.startTime_=void 0,n.timeoutId_,n.mode_=void 0,n.trackpadEventGap_=400,n.trackpadTimeoutId_,n.deltaPerZoom_=300,n}return or(e,t),e.prototype.endInteraction_=function(){this.trackpadTimeoutId_=void 0,this.getMap().getView().endInteraction(void 0,this.lastDelta_?this.lastDelta_>0?1:-1:0,this.lastAnchor_)},e.prototype.handleEvent=function(t){if(!this.condition_(t))return!0;if(t.type!==b)return!0;var e,n=t.map,o=t.originalEvent;if(o.preventDefault(),this.useAnchor_&&(this.lastAnchor_=t.coordinate),t.type==b&&(e=o.deltaY,Pt&&o.deltaMode===WheelEvent.DOM_DELTA_PIXEL&&(e/=St),o.deltaMode===WheelEvent.DOM_DELTA_LINE&&(e*=40)),0===e)return!1;this.lastDelta_=e;var i=Date.now();void 0===this.startTime_&&(this.startTime_=i),(!this.mode_||i-this.startTime_>this.trackpadEventGap_)&&(this.mode_=Math.abs(e)<4?ir:"wheel");var r=n.getView();if(this.mode_===ir&&!r.getConstrainResolution()&&!this.constrainResolution_)return this.trackpadTimeoutId_?clearTimeout(this.trackpadTimeoutId_):(r.getAnimating()&&r.cancelAnimations(),r.beginInteraction()),this.trackpadTimeoutId_=setTimeout(this.endInteraction_.bind(this),this.timeout_),r.adjustZoom(-e/this.deltaPerZoom_,this.lastAnchor_),this.startTime_=i,!1;this.totalDelta_+=e;var s=Math.max(this.timeout_-(i-this.startTime_),0);return clearTimeout(this.timeoutId_),this.timeoutId_=setTimeout(this.handleWheelZoom_.bind(this,n),s),!1},e.prototype.handleWheelZoom_=function(t){var e=t.getView();e.getAnimating()&&e.cancelAnimations();var n=-Y(this.totalDelta_,-this.maxDelta_*this.deltaPerZoom_,this.maxDelta_*this.deltaPerZoom_)/this.deltaPerZoom_;(e.getConstrainResolution()||this.constrainResolution_)&&(n=n?n>0?1:-1:0),xi(e,n,this.lastAnchor_,this.duration_),this.mode_=void 0,this.totalDelta_=0,this.lastAnchor_=null,this.startTime_=void 0,this.timeoutId_=void 0},e.prototype.setMouseAnchor=function(t){this.useAnchor_=t,t||(this.lastAnchor_=null)},e}(Ei);var sr=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function o(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}();const ar=function(t){function e(e){var n=this,o=e||{},i=o;return i.stopDown||(i.stopDown=u),(n=t.call(this,i)||this).anchor_=null,n.lastAngle_=void 0,n.rotating_=!1,n.rotationDelta_=0,n.threshold_=void 0!==o.threshold?o.threshold:.3,n.duration_=void 0!==o.duration?o.duration:250,n}return sr(e,t),e.prototype.handleDragEvent=function(t){var e=0,n=this.targetPointers[0],o=this.targetPointers[1],i=Math.atan2(o.clientY-n.clientY,o.clientX-n.clientX);if(void 0!==this.lastAngle_){var r=i-this.lastAngle_;this.rotationDelta_+=r,!this.rotating_&&Math.abs(this.rotationDelta_)>this.threshold_&&(this.rotating_=!0),e=r}this.lastAngle_=i;var s=t.map,a=s.getView();if(a.getConstraints().rotation!==Rn){var l=s.getViewport().getBoundingClientRect(),u=Oi(this.targetPointers);u[0]-=l.left,u[1]-=l.top,this.anchor_=s.getCoordinateFromPixelInternal(u),this.rotating_&&(s.render(),a.adjustRotationInternal(e,this.anchor_))}},e.prototype.handleUpEvent=function(t){return!(this.targetPointers.length<2&&(t.map.getView().endInteraction(this.duration_),1))},e.prototype.handleDownEvent=function(t){if(this.targetPointers.length>=2){var e=t.map;return this.anchor_=null,this.lastAngle_=void 0,this.rotating_=!1,this.rotationDelta_=0,this.handlingDownUpSequence||e.getView().beginInteraction(),!0}return!1},e}(Ri);var lr=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function o(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}();const ur=function(t){function e(e){var n=this,o=e||{},i=o;return i.stopDown||(i.stopDown=u),(n=t.call(this,i)||this).anchor_=null,n.duration_=void 0!==o.duration?o.duration:400,n.lastDistance_=void 0,n.lastScaleDelta_=1,n}return lr(e,t),e.prototype.handleDragEvent=function(t){var e=1,n=this.targetPointers[0],o=this.targetPointers[1],i=n.clientX-o.clientX,r=n.clientY-o.clientY,s=Math.sqrt(i*i+r*r);void 0!==this.lastDistance_&&(e=this.lastDistance_/s),this.lastDistance_=s;var a=t.map,l=a.getView();1!=e&&(this.lastScaleDelta_=e);var u=a.getViewport().getBoundingClientRect(),c=Oi(this.targetPointers);c[0]-=u.left,c[1]-=u.top,this.anchor_=a.getCoordinateFromPixelInternal(c),a.render(),l.adjustResolutionInternal(e,this.anchor_)},e.prototype.handleUpEvent=function(t){if(this.targetPointers.length<2){var e=t.map.getView(),n=this.lastScaleDelta_>1?1:-1;return e.endInteraction(this.duration_,n),!1}return!0},e.prototype.handleDownEvent=function(t){if(this.targetPointers.length>=2){var e=t.map;return this.anchor_=null,this.lastDistance_=void 0,this.lastScaleDelta_=1,this.handlingDownUpSequence||e.getView().beginInteraction(),!0}return!1},e}(Ri);var cr=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function o(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}(),hr=function(t){function e(e){return(e=h({},e)).controls||(e.controls=function(t){var e={},n=new ko;return(void 0===e.zoom||e.zoom)&&n.push(new mi(e.zoomOptions)),(void 0===e.rotate||e.rotate)&&n.push(new _i(e.rotateOptions)),(void 0===e.attribution||e.attribution)&&n.push(new fi(e.attributionOptions)),n}()),e.interactions||(e.interactions=function(t){var e={onFocusOnly:!0}||{},n=new ko,o=new nr(-.005,.05,100);return(void 0===e.altShiftDragRotate||e.altShiftDragRotate)&&n.push(new Vi),(void 0===e.doubleClickZoom||e.doubleClickZoom)&&n.push(new Ti({delta:e.zoomDelta,duration:e.zoomDuration})),(void 0===e.dragPan||e.dragPan)&&n.push(new Gi({onFocusOnly:e.onFocusOnly,kinetic:o})),(void 0===e.pinchRotate||e.pinchRotate)&&n.push(new ar),(void 0===e.pinchZoom||e.pinchZoom)&&n.push(new ur({duration:e.zoomDuration})),(void 0===e.keyboard||e.keyboard)&&(n.push(new Ji),n.push(new er({delta:e.zoomDelta,duration:e.zoomDuration}))),(void 0===e.mouseWheelZoom||e.mouseWheelZoom)&&n.push(new rr({onFocusOnly:e.onFocusOnly,duration:e.zoomDuration})),(void 0===e.shiftDragZoom||e.shiftDragZoom)&&n.push(new Qi({duration:e.zoomDuration})),n}()),t.call(this,e)||this}return cr(e,t),e.prototype.createRenderer=function(){return new Mo(this)},e}(ci);const pr=hr;class dr extends pi{constructor(t,e){const n=e||{};if(!n.element){const t=document.createElement("div");t.className="bgis-composite",n.element=t}let o;o=t instanceof pi?[t]:t,o.forEach((t=>{t.setTarget(n.element)})),super(n),this.childControls=o}setMap(t){super.setMap(t),t&&this.childControls.forEach((e=>{e.setMap(t)}))}getChildControls(){return this.childControls}}class fr extends dr{constructor(t){const e=t.element?t.element:document.createElement("div");e.classList.add(t.styleClass),t.element=e,super(t.childControls,t),this.styleClass=t.styleClass}getStyleClass(){return this.styleClass}}class gr extends fr{constructor(t,e){const n=e||{};super(Object.assign(Object.assign({},n),{styleClass:"bgis-footer",childControls:t}))}}const vr=t=>Array.isArray(t)?t:[t];class _r extends dr{constructor(t,e){t.tooltipAsTextElement=!!t.tooltipAsTextElement&&t.tooltipAsTextElement,t.unicode=t.unicode||null,t.iconClassName=t.iconClassName||null,null===t.unicode&&null===t.iconClassName&&(t.unicode=59651),t.tooltip=t.tooltip||"";const n=t.element?t.element:document.createElement("div");n.className=t.containerClassName?t.containerClassName:"ol-control bgis-control",n.title=t.tooltip;const o=document.createElement("button");if(o.className="bgis-icon-button",null!==t.unicode?o.textContent=String.fromCodePoint(t.unicode):null!==t.iconClassName&&o.appendChild(_r.getIconElementForIconClassName(t.iconClassName)),o.title=t.tooltip,t.tooltip.length>0&&o.setAttribute("aria-label",t.tooltip),n.append(o),t.tooltipAsTextElement){const e=document.createElement("div");e.className="bgis-control-button-text-container";const o=document.createElement("span");o.textContent=t.tooltip,o.className="bgis-control-button-text",e.appendChild(o),n.appendChild(e)}super(e||[],Object.assign(Object.assign({},t),{element:n})),this.unicode=t.unicode,this.iconClassName=t.iconClassName,this.button=o,this.element.addEventListener("click",(()=>this.dispatchEvent("click")),!1),t.preventDefault||this.on("click",this.handleEvent)}handleEvent(t){return!0}getButton(){return this.button}setButtonUnicode(t){this.getButton().innerHTML="",this.getButton().textContent=String.fromCodePoint(t)}setButtonIconClassName(t){this.getButton().textContent="",this.getButton().innerHTML="",this.getButton().appendChild(_r.getIconElementForIconClassName(t))}static getIconElementForIconClassName(t){const e=document.createElement("i");return e.className="bgis-icon "+t,e}}class yr extends e{constructor(t,e){super(t),this.isToggled=e}}class mr extends _r{constructor(t){super(t||{},t.containerToToggle),this._isToggled=!1,this.containerToToggle=t.containerToToggle,this.unicodeToggled=t.unicodeToggled||null,this.iconClassNameToggled=t.iconClassNameToggled||null,null===this.unicodeToggled&&null===this.iconClassNameToggled&&(this.unicodeToggled=59651)}handleEvent(t){if(t.type===w){this.isToggled=!this.isToggled,this.dispatchEvent(new yr("toggle",this.isToggled));const t=this.getParentElement();t&&this.handleOverlayForElement(t.querySelector(".ol-overlaycontainer-stopevent")),this.handleOverlayOuter(),this.isToggled?null!==this.unicodeToggled?this.setButtonUnicode(this.unicodeToggled):null!==this.iconClassNameToggled&&this.setButtonIconClassName(this.iconClassNameToggled):null!==this.unicode?this.setButtonUnicode(this.unicode):null!==this.iconClassName&&this.setButtonIconClassName(this.iconClassName),((t,e,n=document)=>{vr(t).forEach((t=>{const o=n.querySelector(t);o&&vr(e).forEach((t=>null==o?void 0:o.classList.toggle(t)))}))})("."+this.containerToToggle.getStyleClass(),"show",t||document)}return!0}set isToggled(t){this._isToggled=t}get isToggled(){return this._isToggled}handleOverlayForElement(t,e="bgis-overlay-bg"){null!=this.element&&(this.isToggled?(null==t||t.classList.add("bgis-overlay-toggled-true"),((t,e,n)=>{null!=t?t.querySelector(`.${n}`)||t.appendChild(((t,e)=>{const n=document.createElement(t);return n.className=e,n})("div",n)):console.log("Enclosing element is null")})(t,0,e)):(null==t||t.classList.remove("bgis-overlay-toggled-true"),((t,e)=>{if(null!=t){const n=t.querySelectorAll(`.${e}`);null!=n&&n.length>0&&n.forEach((t=>t.parentElement.removeChild(t)))}})(t,e)))}handleOverlayOuter(){const t=this.getParentElement();if(t){const e=t.querySelectorAll(".bgis-toggled-overlayable");e&&e.length>0&&e.forEach((t=>{this.handleOverlayForElement(t)}))}}getParentElement(){let t=this.element.closest(".bgis");return t||(t=this.element.closest(".bgis-map")),t}}class wr extends fr{constructor(t){let e=null;if(t.verticalControls&&t.verticalControls.length>0){const n=new fr({styleClass:"bgis-bottom-right-vertical",childControls:t.verticalControls});e=new mr({containerToToggle:n,containerClassName:"ol-control bgis-control bgis-bottom-right-overlay",unicode:59655,unicodeToggled:59684,tooltip:"mehr..."}),t.horizontalControls.push(e)}const n=t||{};super(Object.assign(Object.assign({},n),{styleClass:"bgis-bottom-right-horizontal",childControls:t.horizontalControls})),this.toggleButton=e,null!=this.toggleButton&&this.toggleButton.addEventListener("toggle",(t=>(this.dispatchEvent(t),!0)))}getToggleButton(){return this.toggleButton}}class Cr extends fr{constructor(t,e){const n=e||{};super(Object.assign(Object.assign({},n),{styleClass:"bgis-top-right",childControls:t}))}}var xr=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function o(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}(),Er="accuracy",br="accuracyGeometry",Tr="altitude",Pr="altitudeAccuracy",Or="heading",Rr="position",Sr="projection",Mr="speed",Ar="tracking",Ir="trackingOptions",jr=function(t){function e(e){var n=t.call(this,y)||this;return n.code=e.code,n.message=e.message,n}return xr(e,t),e}(e);const Lr=function(t){function e(e){var n=t.call(this)||this;n.on,n.once,n.un;var o=e||{};return n.position_=null,n.transform_=qe,n.watchId_=void 0,n.addChangeListener(Sr,n.handleProjectionChanged_),n.addChangeListener(Ar,n.handleTrackingChanged_),void 0!==o.projection&&n.setProjection(o.projection),void 0!==o.trackingOptions&&n.setTrackingOptions(o.trackingOptions),n.setTracking(void 0!==o.tracking&&o.tracking),n}return xr(e,t),e.prototype.disposeInternal=function(){this.setTracking(!1),t.prototype.disposeInternal.call(this)},e.prototype.handleProjectionChanged_=function(){var t=this.getProjection();t&&(this.transform_=on($e("EPSG:4326"),t),this.position_&&this.set(Rr,this.transform_(this.position_)))},e.prototype.handleTrackingChanged_=function(){if("geolocation"in navigator){var t=this.getTracking();t&&void 0===this.watchId_?this.watchId_=navigator.geolocation.watchPosition(this.positionChange_.bind(this),this.positionError_.bind(this),this.getTrackingOptions()):t||void 0===this.watchId_||(navigator.geolocation.clearWatch(this.watchId_),this.watchId_=void 0)}},e.prototype.positionChange_=function(t){var e=t.coords;this.set(Er,e.accuracy),this.set(Tr,null===e.altitude?void 0:e.altitude),this.set(Pr,null===e.altitudeAccuracy?void 0:e.altitudeAccuracy),this.set(Or,null===e.heading?void 0:et(e.heading)),this.position_?(this.position_[0]=e.longitude,this.position_[1]=e.latitude):this.position_=[e.longitude,e.latitude];var n=this.transform_(this.position_);this.set(Rr,n),this.set(Mr,null===e.speed?void 0:e.speed);var o=function(t,e,n,o){for(var i=[],r=0;r<32;++r)s(i,We(t,e,2*Math.PI*r/32,undefined));return i.push(i[0],i[1]),new po(i,Ln,[i.length])}(this.position_,e.accuracy);o.applyTransform(this.transform_),this.set(br,o),this.changed()},e.prototype.positionError_=function(t){this.dispatchEvent(new jr(t))},e.prototype.getAccuracy=function(){return this.get(Er)},e.prototype.getAccuracyGeometry=function(){return this.get(br)||null},e.prototype.getAltitude=function(){return this.get(Tr)},e.prototype.getAltitudeAccuracy=function(){return this.get(Pr)},e.prototype.getHeading=function(){return this.get(Or)},e.prototype.getPosition=function(){return this.get(Rr)},e.prototype.getProjection=function(){return this.get(Sr)},e.prototype.getSpeed=function(){return this.get(Mr)},e.prototype.getTracking=function(){return this.get(Ar)},e.prototype.getTrackingOptions=function(){return this.get(Ir)},e.prototype.setProjection=function(t){this.set(Sr,$e(t))},e.prototype.setTracking=function(t){this.set(Ar,t)},e.prototype.setTrackingOptions=function(t){this.set(Ir,t)},e}(k);class Fr extends e{constructor(t,e){super(t),this.position=e}}class kr extends _r{constructor(t){const e=t||{};super(Object.assign({unicode:59702,containerClassName:"ol-control bgis-control ol-geolocate",tooltip:"Standort zentrieren"},e));const n=t||{};this._geoLocation=new Lr(n)}handleEvent(t){var e,n;return t.type===w&&this.geoLocation&&(null===(n=null===(e=this.getMap())||void 0===e?void 0:e.getView())||void 0===n?void 0:n.getProjection())&&(this.geoLocation.once("change",(()=>{var t,e;this.geoLocation.setTracking(!1),null===(t=this.getMap())||void 0===t||t.getView().animate({center:(e=this.geoLocation.getPosition(),sn(e,"EPSG:4326","EPSG:3857")),duration:300}),this.geoLocation.getPosition()&&this.dispatchEvent(new Fr("location_retrieved",this.geoLocation.getPosition()))})),this.geoLocation.setTracking(!0)),!0}get geoLocation(){return this._geoLocation}}class Dr extends fi{constructor(t){super(t||{collapsed:!1}),this.element.className+=" bgis-copyright"}}var zr=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function o(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}(),Nr="projection",Gr="coordinateFormat",Kr=function(t){function e(e){var n=this,o=e||{},i=document.createElement("div");i.className=void 0!==o.className?o.className:"ol-mouse-position",(n=t.call(this,{element:i,render:o.render,target:o.target})||this).on,n.once,n.un,n.addChangeListener(Nr,n.handleProjectionChanged_),o.coordinateFormat&&n.setCoordinateFormat(o.coordinateFormat),o.projection&&n.setProjection(o.projection);var r=!0,s="&#160;";return"undefinedHTML"in o?(void 0!==o.undefinedHTML&&(s=o.undefinedHTML),r=!!s):"placeholder"in o&&(!1===o.placeholder?r=!1:s=String(o.placeholder)),n.placeholder_=s,n.renderOnMouseOut_=r,n.renderedHTML_=i.innerHTML,n.mapProjection_=null,n.transform_=null,n}return zr(e,t),e.prototype.handleProjectionChanged_=function(){this.transform_=null},e.prototype.getCoordinateFormat=function(){return this.get(Gr)},e.prototype.getProjection=function(){return this.get(Nr)},e.prototype.handleMouseMove=function(t){var e=this.getMap();this.updateHTML_(e.getEventPixel(t))},e.prototype.handleMouseOut=function(t){this.updateHTML_(null)},e.prototype.setMap=function(e){if(t.prototype.setMap.call(this,e),e){var n=e.getViewport();this.listenerKeys.push(T(n,Ho,this.handleMouseMove,this)),this.renderOnMouseOut_&&this.listenerKeys.push(T(n,"pointerout",this.handleMouseOut,this)),this.updateHTML_(null)}},e.prototype.setCoordinateFormat=function(t){this.set(Gr,t)},e.prototype.setProjection=function(t){this.set(Nr,$e(t))},e.prototype.updateHTML_=function(t){var e=this.placeholder_;if(t&&this.mapProjection_){if(!this.transform_){var n=this.getProjection();this.transform_=n?on(this.mapProjection_,n):qe}var o=this.getMap().getCoordinateFromPixelInternal(t);if(o){var i=hn();i&&(this.transform_=on(this.mapProjection_,i)),this.transform_(o,o);var r=this.getCoordinateFormat();e=r?r(o):o.toString()}}this.renderedHTML_&&e===this.renderedHTML_||(this.element.innerHTML=e,this.renderedHTML_=e)},e.prototype.render=function(t){var e=t.frameState;e?this.mapProjection_!=e.viewState.projection&&(this.mapProjection_=e.viewState.projection,this.transform_=null):this.mapProjection_=null},e}(pi);const Zr=Kr;class Vr extends Zr{constructor(t){const e=t||{};e.projection=e.projection?e.projection:"EPSG:4326",e.coordinateFormat=e.coordinateFormat?e.coordinateFormat:t=>t?function(t,e,n){return t?e.replace("{x}",t[0].toFixed(n)).replace("{y}",t[1].toFixed(n)):""}(t,"{x}°N/{y}°E",4):"",e.undefinedHTML=e.undefinedHTML?e.undefinedHTML:"&nbsp;-&nbsp;°N/&nbsp;-&nbsp;°E",e.className=e.className?e.className:"ol-control ol-mouse-position bgis-mouseposition",super(e)}}class Ur extends mi{constructor(t){const e=t||{};super(Object.assign(Object.assign({},e),{zoomInLabel:String.fromCodePoint(59700),zoomOutLabel:String.fromCodePoint(59701)})),this.element.className="ol-control bgis-control zoom-container"}}const Xr=25.4/.28,Hr=[1,2,5];class Br extends pi{constructor(t){const e=t||{},n=e.className?e.className:"bgis-scaleline";super({element:document.createElement("div"),target:e.target}),this.viewState=null,this._minWidth=void 0!==e.minWidth?e.minWidth:64,this.renderedVisible=!1,this.renderedWidth=void 0,this.renderedSVG=void 0,this.dpi=e.dpi||void 0,this.element.className=n}render(t){const e=t.frameState;this.viewState=e?e.viewState:null,this.updateElement()}updateElement(){const t=this.viewState;if(!t)return void(this.renderedVisible&&(this.element.style.display="none",this.renderedVisible=!1));const e=t.center,n=t.projection,o=Re.METERS;let i=Je(n,t.resolution,e,o);const r=this._minWidth*(this.dpi||Xr)/Xr,s=r*i;let a="";s<.001?(a="μm",i*=1e6):s<1?(a="mm",i*=1e3):s<1e3?a="m":(a="km",i/=1e3);let l,u,c,h=3*Math.floor(Math.log(r*i)/Math.log(10));for(;;){c=Math.floor(h/3);const t=Math.pow(10,c);if(l=Hr[(h%3+3)%3]*t,u=Math.round(l/i),isNaN(u))return this.element.style.display="none",void(this.renderedVisible=!1);if(u>=r)break;++h}let p=null;l&&c>=0&&(p=this.getGeneratedSVG(l.toFixed(c<0?-c:0)+" "+a,u)),p&&this.renderedSVG!=p&&(this.element.innerHTML="",this.element.appendChild(p),this.renderedSVG=p),this.renderedWidth!=u&&(this.element.style.width=u+"px",p&&p.setAttribute("width",String(u)),this.renderedWidth=u),this.renderedVisible||(this.element.style.display="",this.renderedVisible=!0)}getGeneratedSVG(t,e){const n=document.createElementNS("http://www.w3.org/2000/svg","svg");n.setAttribute("id","bgis-scaleline-svg"),n.setAttribute("viewBox","0 0 "+e+" 18"),n.setAttribute("width",String(e)),n.setAttribute("height","100%");const o=document.createElementNS("http://www.w3.org/2000/svg","rect");o.setAttribute("id","bgis-scaleline-svg-background"),o.setAttribute("x",String(0)),o.setAttribute("y",String(0)),o.setAttribute("width","100%"),o.setAttribute("height","100%"),o.setAttribute("fill","#e5ecf0"),o.setAttribute("fill-opacity",".5"),o.setAttribute("stroke","black"),o.setAttribute("stroke-width","1"),o.setAttribute("stroke-dasharray","0 "+e+" "+(e+36)),n.appendChild(o);const i=document.createElementNS("http://www.w3.org/2000/svg","text");return i.textContent=t,i.setAttribute("x",String(e/2)),i.setAttribute("y",String(12)),i.setAttribute("text-anchor","middle"),i.setAttribute("font-size","1em"),i.setAttribute("style",'font-size: 0.75rem; font-family: "Source Sans Pro", sans-serif'),i.setAttribute("font-family",'"Source Sans Pro", sans-serif'),i.setAttribute("fill","black"),n.appendChild(i),n}setMinWidth(t){this._minWidth=t}getMinWidth(){return this._minWidth}}class Wr extends e{constructor(t,e){super(t),this.originalEvent=e}}class Yr extends pi{constructor(t){const e=t||{},n=document.createElement("div");n.className="bgis-overview-image";const o=document.createElement("figure");o.innerHTML=Yr.SVG_CODE,n.appendChild(o),e.element=n,super(e),this.preventDefault=e.preventDefault||!1,this.overviewContainerElement=n,this.extent=Zt([[101e4,579e4],[196e4,633e4]]),this.overviewContainerElement.addEventListener("click",(t=>this.dispatchEvent(new Wr("click",t))),!1),this.preventDefault||this.on("click",this.onOverviewImageClick),this.svgElement=o.firstChild,this.backgroundSVGRectElement=document.createElementNS("http://www.w3.org/2000/svg","rect"),this.backgroundSVGRectElement.setAttribute("class","bgis-overviewmap-svg-background"),this.backgroundSVGRectElement.setAttribute("x",String(0)),this.backgroundSVGRectElement.setAttribute("y",String(0)),this.backgroundSVGRectElement.setAttribute("rx",String(8)),this.backgroundSVGRectElement.setAttribute("ry",String(8)),this.backgroundSVGRectElement.setAttribute("width",String(Yr.SVG_WIDTH)),this.backgroundSVGRectElement.setAttribute("height",String(Yr.SVG_HEIGHT)),this.backgroundSVGRectElement.setAttribute("style","stroke-width:0"),this.backgroundSVGRectElement.setAttribute("fill",Yr.BACKGROUND_COLOR),this.svgElement.prepend(this.backgroundSVGRectElement)}setMap(t){super.setMap(t),t&&(this.preventDefault||t.on("moveend",(t=>this.updateCrosshair(t))))}updateCrosshair(t){var e;const n=[Yr.SVG_WIDTH,Yr.SVG_HEIGHT],o=this.getOverviewPxFromLonLat(null===(e=t.map.getView())||void 0===e?void 0:e.getCenter());if(o[0]>n[0]?o[0]=n[0]:o[0]<0&&(o[0]=0),o[1]>n[1]?o[1]=n[1]:o[1]<0&&(o[1]=0),this.svgElement){const t=this.svgElement.getElementsByClassName("bgis-overviewmap-svg-crosshair");if(t)for(const e of Array.from(t))this.svgElement.removeChild(e);this.svgElement.appendChild(Yr.getCrosshair(o[0],0,o[0],Yr.SVG_HEIGHT,"bgis-overviewmap-svg-crosshair-x")),this.svgElement.appendChild(Yr.getCrosshair(0,o[1],Yr.SVG_WIDTH,o[1],"bgis-overviewmap-svg-crosshair-y"))}}static getCrosshair(t,e,n,o,i){const r=document.createElementNS("http://www.w3.org/2000/svg","line");return r.setAttribute("x1",String(t)),r.setAttribute("y1",String(e)),r.setAttribute("x2",String(n)),r.setAttribute("y2",String(o)),r.setAttribute("style","fill: none; stroke: black; stroke-width: 1px;"),r.setAttribute("class","bgis-overviewmap-svg-crosshair "+i),r}static calculateResolutionFromWidth(t,e,n){return Math.abs(t-e)/n}getOverviewPxFromLonLat(t){if(t){const e=[Yr.SVG_WIDTH,Yr.SVG_HEIGHT],n=[Yr.calculateResolutionFromWidth(this.extent[0],this.extent[2],e[0]),Yr.calculateResolutionFromWidth(this.extent[1],this.extent[3],e[1])];return[Math.round(1/n[0]*(t[0]-this.extent[0])),Math.round(1/n[1]*(this.extent[3]-t[1]))]}return[0,0]}onOverviewImageClick(t){var e,n;const o=this.overviewContainerElement.getBoundingClientRect(),i=t.originalEvent.clientX-o.left,r=t.originalEvent.clientY-o.top,s=this.getLonLatFromOverviewPx([i,r]);null===(n=null===(e=this.getMap())||void 0===e?void 0:e.getView())||void 0===n||n.animate({center:s,duration:300})}getLonLatFromOverviewPx(t){const e=[this.overviewContainerElement.clientWidth,this.overviewContainerElement.clientHeight],n=[Yr.calculateResolutionFromWidth(this.extent[0],this.extent[2],e[0]),Yr.calculateResolutionFromWidth(this.extent[1],this.extent[3],e[1])];return[t[0]*n[0]+this.extent[0],this.extent[3]-t[1]*n[1]]}getOverviewContainerElement(){return this.overviewContainerElement}getSVGElement(){return this.svgElement}getBackgroundRectElement(){return this.backgroundSVGRectElement}}Yr.BACKGROUND_COLOR="#e5ecf0",Yr.SVG_HEIGHT=216,Yr.SVG_WIDTH=380,Yr.SVG_CODE="<svg xmlns='http://www.w3.org/2000/svg' class='bgis-overviewmap-svg' xmlns:xlink='http://www.w3.org/1999/xlink' viewBox='0 0 "+Yr.SVG_WIDTH+" "+Yr.SVG_HEIGHT+"' preserveAspectRatio='xMidYMid meet' height='100%' width='100%' color-interpolation='auto' fill='black' fill-opacity='1'  stroke='black' stroke-dasharray='none' stroke-dashoffset='0' stroke-linecap='square' stroke-linejoin='miter' stroke-miterlimit='10' stroke-opacity='1' stroke-width='1' xmlns:v='https://vecta.io/nano'><style><![CDATA[.B{clip-path:url(#A)}.C{fill-rule:evenodd}.D{stroke:none}.E{fill:#999}.F{fill:none}.G{stroke-miterlimit:1}.H{stroke-width:2.5}]]></style><defs><clipPath id='A'><path d='M0 0h380v216H0V0z'/></clipPath><path id='B' d='M356 82l-.4 5.2 4.4 1.6-3.2 2.4v6.4l-3.6.8 2.8 3.6.8 6.8-9.6 1.2-.4-2-1.6 2.4h-3.6l-1.6-3.6-4.8-1.6-8 6.4 6.4 3.2 3.2-.8 1.2 4.8 2 .8-2.8 2.8.4 3.2-3.6 3.2-2.8-.4-.8 1.6-2.4-1.6-.4 4 2.4 4.8-2.4 1.6-.8 4 2 .8-.4 2.4 2.8-.4.8 1.6-3.2 1.6 2.8 2.8-4 2 3.6 1.6-10-.8-.4 3.2-4 1.6-2.4 4.4-6.4 2.8.8-3.6 6.4-6.8-3.2-5.2 1.6-4.8-4.8-14.8 13.2-6.8v-6l2.8-4-.8-3.6-2.4-1.2-1.2-7.6 3.2.8 2-2.8-2-1.6 2.8-.8 2-4 3.2-.4 2.4 4 5.6-5.6v-2.8l5.6-1.2 2.4-3.2L352 88l1.6-3.6-2-2 2.8 1.6 1.6-2z'/><path id='C' d='M162.4 146.8l.4 2 8.4 1.2 1.6 2.8 4.4 1.6 8-2 .4-2.8 4.8-.8 2 2 10.8.8 8.4 9.6 5.6-2 2.4-4 8.4-4.8 1.6 3.2h6l.8 3.2 4.8-3.2 5.6 2 10-3.6 8 8.8-2 8.8 2.4.8-.4 6.4 2 1.2-3.6 3.2-1.2-2-1.6 2-2.4-.4-2.4 6.4-4.8.8-.4 2.4-4.8 1.6-.8 4-2.4-3.6-2 1.2-2-2.4-12.4.8-1.2-2.8h-5.2l-4-2.8-5.6 1.2-18-4.8-6.8 1.6-6.4-3.2H168l-2.4-2.8-4.8-.4v-3.2h1.6V172l9.2-1.2 1.6-2.4-5.6-4v-3.2l-4.4-3.2-.8-2.4 2-3.2h-2.8l-2.4-3.6 3.2-2z'/><path id='D' d='M264.8 20.8l5.6 1.6.4 4 4.4-.8 1.6-2.8 8.8 3.2.8 2 8 4 6.8-1.6V32l5.2 2 .4 2.4 5.6 3.2 12.8 1.2 3.6-5.6 3.6-.4 2.4 2.4 2.8-.4 1.2 4 10.4 1.6 1.6 10.8-4.8 6-.8 4.8 5.6 7.6.8 6.4 4.4 3.2-1.6 2.8-2.8-1.6 2 2L352 88l-4.4-3.6-2.4 3.2-5.6 1.2v2.8l-5.6 5.6-2.4-4-3.2.4-1.6 3.6-3.2 1.2 2 1.2-2 3.2-3.2-.8 1.2 7.6 2.4 1.2.8 3.6-2.8 4 1.2 4-5.2 5.2h-2.8l-2-6.8-2.4 2.8-1.2-2-4.8-.8-1.2-2.8-2 .4.4-4-5.2-.4-1.2-5.6-1.6 1.2-3.2-3.6-4.4.4v-1.6H284l-4.4-4-2.4.4-.4 2-3.2-.4-.8 3.2-10.4.4-2 2.4-4-2.4-3.2 1.2-2.4-4v-4.4l2.8-1.6-.4-1.6-1.6-2.4-1.6.8-8.4-4.4-2-3.2v-3.6l1.6-.8-.8-6.4 2-2.4 6.8 5.2 7.2-2L258 74h3.2l1.2 2.4.8-8.4h-2l.8-4.8-2 .4 1.6-1.6-4-4.8 2.8-1.6-10.4-5.2 1.6-7.2 3.6-2.8.4-3.6 7.2 1.2V23.2l2-2.4zm62 47.2l-7.2 5.6-2.4-1.6-.8 6 1.6 3.2 9.6.4 2-2.8 4.4 1.6-2-2.4.8-6-2-2-1.6 1.2-2.4-3.2z'/><path id='E' d='M212.4 38l9.6 6.4-2.4 2 2.4 3.2h6l6.4 2.8 2-2.8h2.4L240 46l4 3.2 2.4-2 5.6 5.2 7.2 2 1.2 1.2-2.8 1.6.4 2 3.6 2.8-1.6 1.6 2-.4-.8 4.8h2v4.4l-.8 4-1.2-2.4H258l-1.6 2.8-6 2-6.8-5.2-3.2 2.4.8 6.4-1.6.8v3.6l6.4 6 5.6.8 2 3.2-2.8 2.4 1.6 6.8-2.4-.8-2 2.4-5.2.8-.8 2.4-8.4 4.8-3.2-.4-2-2.8-6.8 2.4v-3.6l-2-2-10.4-1.2-3.6 5.6 2.8 8.4-1.6 3.2h-2.4l-8.4-4 2-6.4-1.6-2 2.8-4.4-5.2-2 1.2-2.8 3.2.8v-1.6l-6.4.4-4.4-2-.4-8.8 3.6 1.2.4-2.8-4-2-6 2.8v-2l-3.2-.4-1.2-2.4h-4.4l-3.2 3.2-5.2-5.2-.4-3.2 12-9.6 14-4 4.8-7.2-.4-8.8 2 .4 1.2-2.4 10 5.2 4.4-7.2.4-5.6-2-.8 2.4-3.6z'/><path id='F' d='M176.4 86.8l1.6 2.4 3.2.4v2l6-2.8 4 2-.4 2.8-3.6-1.2.4 8.8 11.2 2.4h-3.6l-1.2 3.2 5.2 1.6-2.8 4.4 1.6 2-2 6.4 5.2 3.2-1.6 3.2 1.6 8.8 5.2 2 5.2-2.4.8 4.4 6.8 6.4-5.2 1.2 1.2 2.8-4.4 8-5.2-3.6v-2.4l-10.4-2.8-2.8.8-1.6-2-5.2.8-.4 2.8-7.2 2-5.2-1.6-1.6-2.8-8.4-1.2v-2l-4 2-6-3.6H148l-6.4 5.6-6-1.2-2-12.8 1.6-1.6 6.8.4 1.2-2 8.4.4v-3.6l4.4-.8 2.4-4.8 2.8-.8-3.2-4.8 2-2-4.4-1.6 1.2-4.4h8.4l-1.2 1.6 2.8 2.4-2 2 .8 2 7.6 5.2 3.6-1.2-.4-5.6 2.8-3.6-.8-4-2.4-2h-5.6l4.4-9.2-6.4-8.4 4-3.6h4z'/><path id='G' d='M279.2 101.2l7.2 3.6v1.6l4.4-.4 3.2 3.6 1.6-1.2 1.2 5.6 5.2.4-.8 3.2 2.4.4 1.2 2.8 4.8.8 1.2 2 1.6-2.8 1.2.8-.4 2.8 2.8 3.2-7.2 3.6 4.8 14.8-1.6 4.8 3.2 4.8-7.6 10.8v6l2.4 5.2-6.8-4h-3.6l-9.6 2-2 1.2v2.8l-3.2 1.2-2.8-3.2-14.8.8-2.4-1.6.4-6.4-2.4-.8 2-8.8-8-8.8-10 3.6-5.6-2-4.8 3.2-.8-3.2h-6l-1.6-3.2-8.4 4.8-2.4 4-4.4 2-3.2-1.6 5.6-8.8-1.2-2.8 5.2-1.2-6.8-6.4-.8-4.4-5.2 2.4-4.8-1.6-2-8.4 1.6-4.4 5.6 1.2 1.6-3.2-2.8-8.4 3.6-5.6 10.4 1.2 2 2v3.6l6.8-2.4 2 2.8 3.2.4 16.4-10.4 3.2 2.4 3.2-1.2 4 2.4 2-2.4 10.4-.4.8-3.2 3.2.4.4-2h2z'/><path id='H' d='M151.6 145.2l6.4 2.4 3.6 4.8h2.8l-2 3.2.8 2.4 4.4 3.2v3.2l5.6 4-1.6 2.4-9.2 1.2-1.6 5.6-5.6.4-8-4-1.2-4-3.2-.4-.4-6.8-2.8.8-3.2-2.8 1.2-1.6-2-4.8 3.6-.8 7.2-7.6 5.2-.8z'/><path id='I' d='M61.2 118.8l5.6 1.6 2-2.4 6.8 3.6 5.2-1.6 1.2 1.6-2.4 2h3.2l2 6h6l4-2.8 2 .4-.8 2.4 2.4-.4 2-3.2 4 .4-1.6-2.4 2.4-2.8 6 .4 2.4-5.2 9.6.8 6.8-2.8 9.2 1.2-2-6.4 4.4-2.8v4.4l8-1.2 2.8 4.8 3.2-.8v2l4 1.2-1.6 2.4 3.2 4.8-2.8.8-2.4 4.8-4.4.8v3.6l-8.4-.4-1.2 2-6.8-.4-1.6 1.6 2.4 13.6-8 2-9.2 5.2-5.2-3.2-3.6 2-3.2-1.6-2.4 2.8-2.4-1.6-9.2 1.6.4 1.6-3.2 1.6-3.2 10h-7.2l-6-1.6 1.6-2.4-4-3.2L66 166l-4-1.2.8-5.6-2.8-.8-1.6-3.2-3.6 3.2.4 2-3.6-.4v4l-4 1.2-1.6-2.8-.4-2.4 2.8-3.6-2-2.4 1.6-1.2-1.2-2.8 4-4 .4-7.2-2.4-1.2 6.8-2 4.8-5.2 2-3.2-2-4 .8-4.4z'/><path id='J' d='M31.2 116.4l2 .4-.4 2.8h6.8l1.2 4 4.4 1.6.4 2.4-1.6.8 1.6 3.6 6-2-.8 5.2-2 1.2 2.4 2.4-.4 7.2-4 4 1.2 2.8-1.6 1.2 2 2.4-2.8 3.6 2 3.6-1.2 2-3.2-1.2-1.2-2.8-6.4-2V154l-12-2.4 1.2-4.8-3.2-2.4.4-4.8-2-2 6.4-8-.4-4-2.8-.4-1.6-2.8 7.6-2 2-4z'/><path id='K' d='M327.6 68.4l.4 2 2.8-.4 2 2-.8 6 2 2.4-4.4-1.6-2 2.8-9.6-.4-1.6-3.2.8-6 2.4 1.6 1.6-2.4 3.6-.4.4-2.8 2.4.4z'/></defs><g text-rendering='optimizeLegibility'><use xlink:href='#B' class='B C D E'/><g stroke='silver'><use xlink:href='#B' class='B F G H'/><use xlink:href='#C' class='B C D E'/><use xlink:href='#C' class='B F G H'/><use xlink:href='#D' class='B C D E'/><use xlink:href='#D' class='B F G H'/><use xlink:href='#E' class='B C D E'/><use xlink:href='#E' class='B F G H'/><use xlink:href='#F' class='B C D E'/><use xlink:href='#F' class='B F G H'/><use xlink:href='#G' class='B C D E'/><use xlink:href='#G' class='B F G H'/><use xlink:href='#H' class='B C D E'/><use xlink:href='#H' class='B F G H'/><path d='M61.2 118.8l-1.2-1.2 2.4-.8-1.2 2z' class='B C D E'/><path d='M61.2 118.8l-1.2-1.2 2.4-.8-1.2 2z' class='B F G H'/><use xlink:href='#I' class='B C D E'/><use xlink:href='#I' class='B F G H'/><use xlink:href='#J' class='B C D E'/><use xlink:href='#J' class='B F G H'/><use xlink:href='#K' class='B C D E'/><use xlink:href='#K' class='B F G H'/></g></g></svg>";class qr extends _r{constructor(t){const e=t||{};super(Object.assign({unicode:59666,tooltip:"Ansicht drucken",tooltipAsTextElement:!0},e))}}class Qr extends _r{constructor(t){const e=t||{};super(Object.assign({unicode:Qr.DEFAULT_UNICODE,tooltip:Qr.DEFAULT_TOOLTIP_TEXT,tooltipAsTextElement:!0},e))}}Qr.DEFAULT_TOOLTIP_TEXT="Ansicht teilen",Qr.DEFAULT_UNICODE=59692;class $r extends _r{constructor(t){const e=t||{};super(Object.assign({unicode:59707,tooltip:"Toolbox einblenden",tooltipAsTextElement:!0},e))}}class Jr extends _r{constructor(t){const e=t||{};super(Object.assign({unicode:59703,tooltip:"Liste anzeigen"},e))}}class ts extends _r{constructor(t){const e=t||{};super(Object.assign({unicode:59704,tooltip:"Begleitkarten verwalten"},e))}}var es=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function o(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}(),ns=function(t){function e(e,n,o){var i=t.call(this)||this,r=o||{};return i.tileCoord=e,i.state=n,i.interimTile=null,i.key="",i.transition_=void 0===r.transition?250:r.transition,i.transitionStarts_={},i.interpolate=!!r.interpolate,i}return es(e,t),e.prototype.changed=function(){this.dispatchEvent(_)},e.prototype.release=function(){},e.prototype.getKey=function(){return this.key+"/"+this.tileCoord},e.prototype.getInterimTile=function(){if(!this.interimTile)return this;var t=this.interimTile;do{if(2==t.getState())return this.transition_=0,t;t=t.interimTile}while(t);return this},e.prototype.refreshInterimChain=function(){if(this.interimTile){var t=this.interimTile,e=this;do{if(2==t.getState()){t.interimTile=null;break}1==t.getState()?e=t:0==t.getState()?e.interimTile=t.interimTile:e=t,t=e.interimTile}while(t)}},e.prototype.getTileCoord=function(){return this.tileCoord},e.prototype.getState=function(){return this.state},e.prototype.setState=function(t){if(3!==this.state&&this.state>t)throw new Error("Tile load sequence violation");this.state=t,this.changed()},e.prototype.load=function(){A()},e.prototype.getAlpha=function(t,e){if(!this.transition_)return 1;var n=this.transitionStarts_[t];if(n){if(-1===n)return 1}else n=e,this.transitionStarts_[t]=n;var o=e-n+1e3/60;return o>=this.transition_?1:Mn(o/this.transition_)},e.prototype.inTransition=function(t){return!!this.transition_&&-1!==this.transitionStarts_[t]},e.prototype.endTransition=function(t){this.transition_&&(this.transitionStarts_[t]=-1)},e}(v);const os=ns;var is=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function o(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}();const rs=function(t){function e(e,n,o,i){var r=t.call(this)||this;return r.extent=e,r.pixelRatio_=o,r.resolution=n,r.state=i,r}return is(e,t),e.prototype.changed=function(){this.dispatchEvent(_)},e.prototype.getExtent=function(){return this.extent},e.prototype.getImage=function(){return A()},e.prototype.getPixelRatio=function(){return this.pixelRatio_},e.prototype.getResolution=function(){return this.resolution},e.prototype.getState=function(){return this.state},e.prototype.load=function(){A()},e}(v);var ss=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function o(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}();function as(t,e,n){var o=t,i=!0,r=!1,s=!1,a=[P(o,"load",(function(){s=!0,r||e()}))];return o.src&&At?(r=!0,o.decode().then((function(){i&&e()})).catch((function(t){i&&(s?e():n())}))):a.push(P(o,y,n)),function(){i=!1,a.forEach(O)}}!function(t){function e(e,n,o,i,r,s){var a=t.call(this,e,n,o,0)||this;return a.src_=i,a.image_=new Image,null!==r&&(a.image_.crossOrigin=r),a.unlisten_=null,a.state=0,a.imageLoadFunction_=s,a}ss(e,t),e.prototype.getImage=function(){return this.image_},e.prototype.handleImageError_=function(){this.state=3,this.unlistenImage_(),this.changed()},e.prototype.handleImageLoad_=function(){void 0===this.resolution&&(this.resolution=se(this.extent)/this.image_.height),this.state=2,this.unlistenImage_(),this.changed()},e.prototype.load=function(){0!=this.state&&3!=this.state||(this.state=1,this.changed(),this.imageLoadFunction_(this,this.src_),this.unlisten_=as(this.image_,this.handleImageLoad_.bind(this),this.handleImageError_.bind(this)))},e.prototype.setImage=function(t){this.image_=t,this.resolution=se(this.extent)/this.image_.height},e.prototype.unlistenImage_=function(){this.unlisten_&&(this.unlisten_(),this.unlisten_=null)}}(rs);var ls=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function o(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}();const us=function(t){function e(e,n,o,i,r,s){var a=t.call(this,e,n,s)||this;return a.crossOrigin_=i,a.src_=o,a.key=o,a.image_=new Image,null!==i&&(a.image_.crossOrigin=i),a.unlisten_=null,a.tileLoadFunction_=r,a}return ls(e,t),e.prototype.getImage=function(){return this.image_},e.prototype.setImage=function(t){this.image_=t,this.state=2,this.unlistenImage_(),this.changed()},e.prototype.handleImageError_=function(){var t;this.state=3,this.unlistenImage_(),this.image_=((t=de(1,1)).fillStyle="rgba(0,0,0,0)",t.fillRect(0,0,1,1),t.canvas),this.changed()},e.prototype.handleImageLoad_=function(){var t=this.image_;t.naturalWidth&&t.naturalHeight?this.state=2:this.state=4,this.unlistenImage_(),this.changed()},e.prototype.load=function(){3==this.state&&(this.state=0,this.image_=new Image,null!==this.crossOrigin_&&(this.image_.crossOrigin=this.crossOrigin_)),0==this.state&&(this.state=1,this.changed(),this.tileLoadFunction_(this,this.src_),this.unlisten_=as(this.image_,this.handleImageLoad_.bind(this),this.handleImageError_.bind(this)))},e.prototype.unlistenImage_=function(){this.unlisten_&&(this.unlisten_(),this.unlisten_=null)},e}(os),cs=function(){function t(t,e,n,o,i,r){this.sourceProj_=t,this.targetProj_=e;var s={},a=rn(this.targetProj_,this.sourceProj_);this.transformInv_=function(t){var e=t[0]+"/"+t[1];return s[e]||(s[e]=a(t)),s[e]},this.maxSourceExtent_=o,this.errorThresholdSquared_=i*i,this.triangles_=[],this.wrapsXInSource_=!1,this.canWrapXInSource_=this.sourceProj_.canWrapX()&&!!o&&!!this.sourceProj_.getExtent()&&ce(o)==ce(this.sourceProj_.getExtent()),this.sourceWorldWidth_=this.sourceProj_.getExtent()?ce(this.sourceProj_.getExtent()):null,this.targetWorldWidth_=this.targetProj_.getExtent()?ce(this.targetProj_.getExtent()):null;var l=le(n),u=ue(n),c=ne(n),h=ee(n),p=this.transformInv_(l),d=this.transformInv_(u),f=this.transformInv_(c),g=this.transformInv_(h),v=10+(r?Math.max(0,Math.ceil(Q(te(n)/(r*r*256*256)))):0);if(this.addQuad_(l,u,c,h,p,d,f,g,v),this.wrapsXInSource_){var _=1/0;this.triangles_.forEach((function(t,e,n){_=Math.min(_,t.source[0][0],t.source[1][0],t.source[2][0])})),this.triangles_.forEach(function(t){if(Math.max(t.source[0][0],t.source[1][0],t.source[2][0])-_>this.sourceWorldWidth_/2){var e=[[t.source[0][0],t.source[0][1]],[t.source[1][0],t.source[1][1]],[t.source[2][0],t.source[2][1]]];e[0][0]-_>this.sourceWorldWidth_/2&&(e[0][0]-=this.sourceWorldWidth_),e[1][0]-_>this.sourceWorldWidth_/2&&(e[1][0]-=this.sourceWorldWidth_),e[2][0]-_>this.sourceWorldWidth_/2&&(e[2][0]-=this.sourceWorldWidth_);var n=Math.min(e[0][0],e[1][0],e[2][0]);Math.max(e[0][0],e[1][0],e[2][0])-n<this.sourceWorldWidth_/2&&(t.source=e)}}.bind(this))}s={}}return t.prototype.addTriangle_=function(t,e,n,o,i,r){this.triangles_.push({source:[o,i,r],target:[t,e,n]})},t.prototype.addQuad_=function(t,e,n,o,i,r,s,a,l){var u=Zt([i,r,s,a]),c=this.sourceWorldWidth_?ce(u)/this.sourceWorldWidth_:null,h=this.sourceWorldWidth_,p=this.sourceProj_.canWrapX()&&c>.5&&c<1,d=!1;if(l>0&&(this.targetProj_.isGlobal()&&this.targetWorldWidth_&&(d=ce(Zt([t,e,n,o]))/this.targetWorldWidth_>.25||d),!p&&this.sourceProj_.isGlobal()&&c&&(d=c>.25||d)),!(!d&&this.maxSourceExtent_&&isFinite(u[0])&&isFinite(u[1])&&isFinite(u[2])&&isFinite(u[3]))||he(u,this.maxSourceExtent_)){var f=0;if(!(d||isFinite(i[0])&&isFinite(i[1])&&isFinite(r[0])&&isFinite(r[1])&&isFinite(s[0])&&isFinite(s[1])&&isFinite(a[0])&&isFinite(a[1])))if(l>0)d=!0;else if(1!=(f=(isFinite(i[0])&&isFinite(i[1])?0:8)+(isFinite(r[0])&&isFinite(r[1])?0:4)+(isFinite(s[0])&&isFinite(s[1])?0:2)+(isFinite(a[0])&&isFinite(a[1])?0:1))&&2!=f&&4!=f&&8!=f)return;if(l>0){if(!d){var g=[(t[0]+n[0])/2,(t[1]+n[1])/2],v=this.transformInv_(g),_=void 0;_=p?(nt(i[0],h)+nt(s[0],h))/2-nt(v[0],h):(i[0]+s[0])/2-v[0];var y=(i[1]+s[1])/2-v[1];d=_*_+y*y>this.errorThresholdSquared_}if(d){if(Math.abs(t[0]-n[0])<=Math.abs(t[1]-n[1])){var m=[(e[0]+n[0])/2,(e[1]+n[1])/2],w=this.transformInv_(m),C=[(o[0]+t[0])/2,(o[1]+t[1])/2],x=this.transformInv_(C);this.addQuad_(t,e,m,C,i,r,w,x,l-1),this.addQuad_(C,m,n,o,x,w,s,a,l-1)}else{var E=[(t[0]+e[0])/2,(t[1]+e[1])/2],b=this.transformInv_(E),T=[(n[0]+o[0])/2,(n[1]+o[1])/2],P=this.transformInv_(T);this.addQuad_(t,E,T,o,i,b,P,a,l-1),this.addQuad_(E,e,n,T,b,r,s,P,l-1)}return}}if(p){if(!this.canWrapXInSource_)return;this.wrapsXInSource_=!0}0==(11&f)&&this.addTriangle_(t,n,o,i,s,a),0==(14&f)&&this.addTriangle_(t,n,e,i,s,r),f&&(0==(13&f)&&this.addTriangle_(e,o,t,r,a,i),0==(7&f)&&this.addTriangle_(e,o,n,r,a,s))}},t.prototype.calculateSourceExtent=function(){var t=[1/0,1/0,-1/0,-1/0];return this.triangles_.forEach((function(e,n,o){var i=e.source;qt(t,i[0]),qt(t,i[1]),qt(t,i[2])})),t},t.prototype.getTriangles=function(){return this.triangles_},t}();var hs;function ps(t,e,n,o,i){t.beginPath(),t.moveTo(0,0),t.lineTo(e,n),t.lineTo(o,i),t.closePath(),t.save(),t.clip(),t.fillRect(0,0,Math.max(e,o)+1,Math.max(n,i)),t.restore()}function ds(t,e){return Math.abs(t[4*e]-210)>2||Math.abs(t[4*e+3]-191.25)>2}function fs(t,e,n,o){var i=sn(n,e,t),r=Je(e,o,n),s=e.getMetersPerUnit();void 0!==s&&(r*=s);var a=t.getMetersPerUnit();void 0!==a&&(r/=a);var l=t.getExtent();if(!l||Ut(l,i)){var u=Je(t,r,i)/r;isFinite(u)&&u>0&&(r/=u)}return r}var gs=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function o(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}();const vs=function(t){function e(e,n,o,i,r,s,a,l,u,c,h,p){var d=t.call(this,r,0,{interpolate:!!p})||this;d.renderEdges_=void 0!==h&&h,d.pixelRatio_=a,d.gutter_=l,d.canvas_=null,d.sourceTileGrid_=n,d.targetTileGrid_=i,d.wrappedTileCoord_=s||r,d.sourceTiles_=[],d.sourcesListenerKeys_=null,d.sourceZ_=0;var f=i.getTileCoordExtent(d.wrappedTileCoord_),g=d.targetTileGrid_.getExtent(),v=d.sourceTileGrid_.getExtent(),_=g?ae(f,g):f;if(0===te(_))return d.state=4,d;var y=e.getExtent();y&&(v=v?ae(v,y):y);var m=i.getResolution(d.wrappedTileCoord_[0]),w=function(t,e,n,o){var i=oe(n),r=fs(t,e,i,o);return(!isFinite(r)||r<=0)&&Jt(n,(function(n){return r=fs(t,e,n,o),isFinite(r)&&r>0})),r}(e,o,_,m);if(!isFinite(w)||w<=0)return d.state=4,d;var C=void 0!==c?c:.5;if(d.triangulation_=new cs(e,o,_,v,w*C,m),0===d.triangulation_.getTriangles().length)return d.state=4,d;d.sourceZ_=n.getZForResolution(w);var x=d.triangulation_.calculateSourceExtent();if(v&&(e.canWrapX()?(x[1]=Y(x[1],v[1],v[3]),x[3]=Y(x[3],v[1],v[3])):x=ae(x,v)),te(x)){for(var E=n.getTileRangeForExtentAndZ(x,d.sourceZ_),b=E.minX;b<=E.maxX;b++)for(var T=E.minY;T<=E.maxY;T++){var P=u(d.sourceZ_,b,T,a);P&&d.sourceTiles_.push(P)}0===d.sourceTiles_.length&&(d.state=4)}else d.state=4;return d}return gs(e,t),e.prototype.getImage=function(){return this.canvas_},e.prototype.reproject_=function(){var t=[];if(this.sourceTiles_.forEach(function(e,n,o){e&&2==e.getState()&&t.push({extent:this.sourceTileGrid_.getTileCoordExtent(e.tileCoord),image:e.getImage()})}.bind(this)),this.sourceTiles_.length=0,0===t.length)this.state=3;else{var e=this.wrappedTileCoord_[0],n=this.targetTileGrid_.getTileSize(e),o="number"==typeof n?n:n[0],i="number"==typeof n?n:n[1],r=this.targetTileGrid_.getResolution(e),s=this.sourceTileGrid_.getResolution(this.sourceZ_),a=this.targetTileGrid_.getTileCoordExtent(this.wrappedTileCoord_);this.canvas_=function(t,e,n,o,i,r,s,a,l,u,c,p){var d=de(Math.round(n*t),Math.round(n*e));if(p||h(d,xe),0===l.length)return d.canvas;function f(t){return Math.round(t*n)/n}d.scale(n,n),d.globalCompositeOperation="lighter";var g=[1/0,1/0,-1/0,-1/0];l.forEach((function(t,e,n){var o,i;o=g,(i=t.extent)[0]<o[0]&&(o[0]=i[0]),i[2]>o[2]&&(o[2]=i[2]),i[1]<o[1]&&(o[1]=i[1]),i[3]>o[3]&&(o[3]=i[3])}));var v=ce(g),_=se(g),y=de(Math.round(n*v/o),Math.round(n*_/o));p||h(y,xe);var m=n/o;l.forEach((function(t,e,n){var o=t.extent[0]-g[0],i=-(t.extent[3]-g[3]),r=ce(t.extent),s=se(t.extent);t.image.width>0&&t.image.height>0&&y.drawImage(t.image,u,u,t.image.width-2*u,t.image.height-2*u,o*m,i*m,r*m,s*m)}));var w=le(s);return a.getTriangles().forEach((function(t,e,i){var s=t.source,a=t.target,l=s[0][0],u=s[0][1],c=s[1][0],h=s[1][1],v=s[2][0],_=s[2][1],m=f((a[0][0]-w[0])/r),C=f(-(a[0][1]-w[1])/r),x=f((a[1][0]-w[0])/r),E=f(-(a[1][1]-w[1])/r),b=f((a[2][0]-w[0])/r),T=f(-(a[2][1]-w[1])/r),P=l,O=u;l=0,u=0;var R=function(t){for(var e=t.length,n=0;n<e;n++){for(var o=n,i=Math.abs(t[n][n]),r=n+1;r<e;r++){var s=Math.abs(t[r][n]);s>i&&(i=s,o=r)}if(0===i)return null;var a=t[o];t[o]=t[n],t[n]=a;for(var l=n+1;l<e;l++)for(var u=-t[l][n]/t[n][n],c=n;c<e+1;c++)n==c?t[l][c]=0:t[l][c]+=u*t[n][c]}for(var h=new Array(e),p=e-1;p>=0;p--){h[p]=t[p][e]/t[p][p];for(var d=p-1;d>=0;d--)t[d][e]-=t[d][p]*h[p]}return h}([[c-=P,h-=O,0,0,x-m],[v-=P,_-=O,0,0,b-m],[0,0,c,h,E-C],[0,0,v,_,T-C]]);if(R){if(d.save(),d.beginPath(),function(){if(void 0===hs){var t=document.createElement("canvas").getContext("2d");t.globalCompositeOperation="lighter",t.fillStyle="rgba(210, 0, 0, 0.75)",ps(t,4,5,4,0),ps(t,4,5,0,5);var e=t.getImageData(0,0,3,3).data;hs=ds(e,0)||ds(e,4)||ds(e,8)}return hs}()||!p){d.moveTo(x,E);for(var S=m-x,M=C-E,A=0;A<4;A++)d.lineTo(x+f((A+1)*S/4),E+f(A*M/3)),3!=A&&d.lineTo(x+f((A+1)*S/4),E+f((A+1)*M/3));d.lineTo(b,T)}else d.moveTo(x,E),d.lineTo(m,C),d.lineTo(b,T);d.clip(),d.transform(R[0],R[2],R[1],R[3],m,C),d.translate(g[0]-P,g[3]-O),d.scale(o/n,-o/n),d.drawImage(y.canvas,0,0),d.restore()}})),c&&(d.save(),d.globalCompositeOperation="source-over",d.strokeStyle="black",d.lineWidth=1,a.getTriangles().forEach((function(t,e,n){var o=t.target,i=(o[0][0]-w[0])/r,s=-(o[0][1]-w[1])/r,a=(o[1][0]-w[0])/r,l=-(o[1][1]-w[1])/r,u=(o[2][0]-w[0])/r,c=-(o[2][1]-w[1])/r;d.beginPath(),d.moveTo(a,l),d.lineTo(i,s),d.lineTo(u,c),d.closePath(),d.stroke()})),d.restore()),d.canvas}(o,i,this.pixelRatio_,s,this.sourceTileGrid_.getExtent(),r,a,this.triangulation_,t,this.gutter_,this.renderEdges_,this.interpolate),this.state=2}this.changed()},e.prototype.load=function(){if(0==this.state){this.state=1,this.changed();var t=0;this.sourcesListenerKeys_=[],this.sourceTiles_.forEach(function(e,n,o){var i=e.getState();if(0==i||1==i){t++;var r=T(e,_,(function(n){var o=e.getState();2!=o&&3!=o&&4!=o||(O(r),0==--t&&(this.unlistenSources_(),this.reproject_()))}),this);this.sourcesListenerKeys_.push(r)}}.bind(this)),0===t?setTimeout(this.reproject_.bind(this),0):this.sourceTiles_.forEach((function(t,e,n){0==t.getState()&&t.load()}))}},e.prototype.unlistenSources_=function(){this.sourcesListenerKeys_.forEach(O),this.sourcesListenerKeys_=null},e}(os),_s=function(){function t(t){this.highWaterMark=void 0!==t?t:2048,this.count_=0,this.entries_={},this.oldest_=null,this.newest_=null}return t.prototype.canExpireCache=function(){return this.highWaterMark>0&&this.getCount()>this.highWaterMark},t.prototype.clear=function(){this.count_=0,this.entries_={},this.oldest_=null,this.newest_=null},t.prototype.containsKey=function(t){return this.entries_.hasOwnProperty(t)},t.prototype.forEach=function(t){for(var e=this.oldest_;e;)t(e.value_,e.key_,this),e=e.newer},t.prototype.get=function(t,e){var n=this.entries_[t];return W(void 0!==n,15),n===this.newest_||(n===this.oldest_?(this.oldest_=this.oldest_.newer,this.oldest_.older=null):(n.newer.older=n.older,n.older.newer=n.newer),n.newer=null,n.older=this.newest_,this.newest_.newer=n,this.newest_=n),n.value_},t.prototype.remove=function(t){var e=this.entries_[t];return W(void 0!==e,15),e===this.newest_?(this.newest_=e.older,this.newest_&&(this.newest_.newer=null)):e===this.oldest_?(this.oldest_=e.newer,this.oldest_&&(this.oldest_.older=null)):(e.newer.older=e.older,e.older.newer=e.newer),delete this.entries_[t],--this.count_,e.value_},t.prototype.getCount=function(){return this.count_},t.prototype.getKeys=function(){var t,e=new Array(this.count_),n=0;for(t=this.newest_;t;t=t.older)e[n++]=t.key_;return e},t.prototype.getValues=function(){var t,e=new Array(this.count_),n=0;for(t=this.newest_;t;t=t.older)e[n++]=t.value_;return e},t.prototype.peekLast=function(){return this.oldest_.value_},t.prototype.peekLastKey=function(){return this.oldest_.key_},t.prototype.peekFirstKey=function(){return this.newest_.key_},t.prototype.pop=function(){var t=this.oldest_;return delete this.entries_[t.key_],t.newer&&(t.newer.older=null),this.oldest_=t.newer,this.oldest_||(this.newest_=null),--this.count_,t.value_},t.prototype.replace=function(t,e){this.get(t),this.entries_[t].value_=e},t.prototype.set=function(t,e){W(!(t in this.entries_),16);var n={key_:t,newer:null,older:this.newest_,value_:e};this.newest_?this.newest_.newer=n:this.oldest_=n,this.newest_=n,this.entries_[t]=n,++this.count_},t.prototype.setSize=function(t){this.highWaterMark=t},t}();function ys(t,e,n,o){return void 0!==o?(o[0]=t,o[1]=e,o[2]=n,o):[t,e,n]}function ms(t,e,n){return t+"/"+e+"/"+n}function ws(t){return ms(t[0],t[1],t[2])}var Cs=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function o(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}(),xs=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return Cs(e,t),e.prototype.expireCache=function(t){for(;this.canExpireCache()&&!(this.peekLast().getKey()in t);)this.pop().release()},e.prototype.pruneExceptNewestZ=function(){if(0!==this.getCount()){var t=this.peekFirstKey().split("/").map(Number)[0];this.forEach(function(e){e.tileCoord[0]!==t&&(this.remove(ws(e.tileCoord)),e.release())}.bind(this))}},e}(_s);const Es=xs;var bs=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function o(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}();function Ts(t){return t?Array.isArray(t)?function(e){return t}:"function"==typeof t?t:function(e){return[t]}:null}const Ps=function(t){function e(e){var n=t.call(this)||this;n.projection=$e(e.projection),n.attributions_=Ts(e.attributions),n.attributionsCollapsible_=void 0===e.attributionsCollapsible||e.attributionsCollapsible,n.loading=!1,n.state_=void 0!==e.state?e.state:pt,n.wrapX_=void 0!==e.wrapX&&e.wrapX,n.interpolate_=!!e.interpolate,n.viewResolver=null,n.viewRejector=null;var o=n;return n.viewPromise_=new Promise((function(t,e){o.viewResolver=t,o.viewRejector=e})),n}return bs(e,t),e.prototype.getAttributions=function(){return this.attributions_},e.prototype.getAttributionsCollapsible=function(){return this.attributionsCollapsible_},e.prototype.getProjection=function(){return this.projection},e.prototype.getResolutions=function(){return A()},e.prototype.getView=function(){return this.viewPromise_},e.prototype.getState=function(){return this.state_},e.prototype.getWrapX=function(){return this.wrapX_},e.prototype.getInterpolate=function(){return this.interpolate_},e.prototype.refresh=function(){this.changed()},e.prototype.setAttributions=function(t){this.attributions_=Ts(t),this.changed()},e.prototype.setState=function(t){this.state_=t,this.changed()},e}(k);var Os=[0,0,0];const Rs=function(){function t(t){var e,n,o;if(this.minZoom=void 0!==t.minZoom?t.minZoom:0,this.resolutions_=t.resolutions,W((e=this.resolutions_,!0,n=function(t,e){return e-t}||i,e.every((function(t,o){if(0===o)return!0;var i=n(e[o-1],t);return!(i>0||0===i)}))),17),!t.origins)for(var r=0,s=this.resolutions_.length-1;r<s;++r)if(o){if(this.resolutions_[r]/this.resolutions_[r+1]!==o){o=void 0;break}}else o=this.resolutions_[r]/this.resolutions_[r+1];this.zoomFactor_=o,this.maxZoom=this.resolutions_.length-1,this.origin_=void 0!==t.origin?t.origin:null,this.origins_=null,void 0!==t.origins&&(this.origins_=t.origins,W(this.origins_.length==this.resolutions_.length,20));var a=t.extent;void 0===a||this.origin_||this.origins_||(this.origin_=le(a)),W(!this.origin_&&this.origins_||this.origin_&&!this.origins_,18),this.tileSizes_=null,void 0!==t.tileSizes&&(this.tileSizes_=t.tileSizes,W(this.tileSizes_.length==this.resolutions_.length,19)),this.tileSize_=void 0!==t.tileSize?t.tileSize:this.tileSizes_?null:256,W(!this.tileSize_&&this.tileSizes_||this.tileSize_&&!this.tileSizes_,22),this.extent_=void 0!==a?a:null,this.fullTileRanges_=null,this.tmpSize_=[0,0],this.tmpExtent_=[0,0,0,0],void 0!==t.sizes?this.fullTileRanges_=t.sizes.map((function(t,e){var n=new Ce(Math.min(0,t[0]),Math.max(t[0]-1,-1),Math.min(0,t[1]),Math.max(t[1]-1,-1));if(a){var o=this.getTileRangeForExtentAndZ(a,e);n.minX=Math.max(o.minX,n.minX),n.maxX=Math.min(o.maxX,n.maxX),n.minY=Math.max(o.minY,n.minY),n.maxY=Math.min(o.maxY,n.maxY)}return n}),this):a&&this.calculateTileRanges_(a)}return t.prototype.forEachTileCoord=function(t,e,n){for(var o=this.getTileRangeForExtentAndZ(t,e),i=o.minX,r=o.maxX;i<=r;++i)for(var s=o.minY,a=o.maxY;s<=a;++s)n([e,i,s])},t.prototype.forEachTileCoordParentTileRange=function(t,e,n,o){var i,r,s=null,a=t[0]-1;for(2===this.zoomFactor_?(i=t[1],r=t[2]):s=this.getTileCoordExtent(t,o);a>=this.minZoom;){if(e(a,2===this.zoomFactor_?we(i=Math.floor(i/2),i,r=Math.floor(r/2),r,n):this.getTileRangeForExtentAndZ(s,a,n)))return!0;--a}return!1},t.prototype.getExtent=function(){return this.extent_},t.prototype.getMaxZoom=function(){return this.maxZoom},t.prototype.getMinZoom=function(){return this.minZoom},t.prototype.getOrigin=function(t){return this.origin_?this.origin_:this.origins_[t]},t.prototype.getResolution=function(t){return this.resolutions_[t]},t.prototype.getResolutions=function(){return this.resolutions_},t.prototype.getTileCoordChildTileRange=function(t,e,n){if(t[0]<this.maxZoom){if(2===this.zoomFactor_){var o=2*t[1],i=2*t[2];return we(o,o+1,i,i+1,e)}var r=this.getTileCoordExtent(t,n||this.tmpExtent_);return this.getTileRangeForExtentAndZ(r,t[0]+1,e)}return null},t.prototype.getTileRangeForTileCoordAndZ=function(t,e,n){if(e>this.maxZoom||e<this.minZoom)return null;var o=t[0],i=t[1],r=t[2];if(e===o)return we(i,r,i,r,n);if(this.zoomFactor_){var s=Math.pow(this.zoomFactor_,e-o),a=Math.floor(i*s),l=Math.floor(r*s);return e<o?we(a,a,l,l,n):we(a,Math.floor(s*(i+1))-1,l,Math.floor(s*(r+1))-1,n)}var u=this.getTileCoordExtent(t,this.tmpExtent_);return this.getTileRangeForExtentAndZ(u,e,n)},t.prototype.getTileRangeExtent=function(t,e,n){var o=this.getOrigin(t),i=this.getResolution(t),r=si(this.getTileSize(t),this.tmpSize_),s=o[0]+e.minX*r[0]*i,a=o[0]+(e.maxX+1)*r[0]*i;return Bt(s,o[1]+e.minY*r[1]*i,a,o[1]+(e.maxY+1)*r[1]*i,n)},t.prototype.getTileRangeForExtentAndZ=function(t,e,n){var o=Os;this.getTileCoordForXYAndZ_(t[0],t[3],e,!1,o);var i=o[1],r=o[2];return this.getTileCoordForXYAndZ_(t[2],t[1],e,!0,o),we(i,o[1],r,o[2],n)},t.prototype.getTileCoordCenter=function(t){var e=this.getOrigin(t[0]),n=this.getResolution(t[0]),o=si(this.getTileSize(t[0]),this.tmpSize_);return[e[0]+(t[1]+.5)*o[0]*n,e[1]-(t[2]+.5)*o[1]*n]},t.prototype.getTileCoordExtent=function(t,e){var n=this.getOrigin(t[0]),o=this.getResolution(t[0]),i=si(this.getTileSize(t[0]),this.tmpSize_),r=n[0]+t[1]*i[0]*o,s=n[1]-(t[2]+1)*i[1]*o;return Bt(r,s,r+i[0]*o,s+i[1]*o,e)},t.prototype.getTileCoordForCoordAndResolution=function(t,e,n){return this.getTileCoordForXYAndResolution_(t[0],t[1],e,!1,n)},t.prototype.getTileCoordForXYAndResolution_=function(t,e,n,o,i){var r=this.getZForResolution(n),s=n/this.getResolution(r),a=this.getOrigin(r),l=si(this.getTileSize(r),this.tmpSize_),u=s*(t-a[0])/n/l[0],c=s*(a[1]-e)/n/l[1];return o?(u=st(u,5)-1,c=st(c,5)-1):(u=rt(u,5),c=rt(c,5)),ys(r,u,c,i)},t.prototype.getTileCoordForXYAndZ_=function(t,e,n,o,i){var r=this.getOrigin(n),s=this.getResolution(n),a=si(this.getTileSize(n),this.tmpSize_),l=(t-r[0])/s/a[0],u=(r[1]-e)/s/a[1];return o?(l=st(l,5)-1,u=st(u,5)-1):(l=rt(l,5),u=rt(u,5)),ys(n,l,u,i)},t.prototype.getTileCoordForCoordAndZ=function(t,e,n){return this.getTileCoordForXYAndZ_(t[0],t[1],e,!1,n)},t.prototype.getTileCoordResolution=function(t){return this.resolutions_[t[0]]},t.prototype.getTileSize=function(t){return this.tileSize_?this.tileSize_:this.tileSizes_[t]},t.prototype.getFullTileRange=function(t){return this.fullTileRanges_?this.fullTileRanges_[t]:this.extent_?this.getTileRangeForExtentAndZ(this.extent_,t):null},t.prototype.getZForResolution=function(t,e){return Y(r(this.resolutions_,t,e||0),this.minZoom,this.maxZoom)},t.prototype.calculateTileRanges_=function(t){for(var e=this.resolutions_.length,n=new Array(e),o=this.minZoom;o<e;++o)n[o]=this.getTileRangeForExtentAndZ(t,o);this.fullTileRanges_=n},t}();function Ss(t){var e=t.getDefaultTileGrid();return e||(e=function(t,e,n,o){return function(t,e,n,o){var i=Ms(t,undefined,n);return new Rs({extent:t,origin:ie(t,"top-left"),resolutions:i,tileSize:n})}(As(t),0,void 0)}(t),t.setDefaultTileGrid(e)),e}function Ms(t,e,n,o){for(var i=void 0!==e?e:42,r=se(t),s=ce(t),a=si(void 0!==n?n:256),l=o>0?o:Math.max(s/a[0],r/a[1]),u=i+1,c=new Array(u),h=0;h<u;++h)c[h]=l/Math.pow(2,h);return c}function As(t){var e=(t=$e(t)).getExtent();if(!e){var n=180*Oe[Re.DEGREES]/t.getMetersPerUnit();e=Bt(-n,-n,n,n)}return e}var Is=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function o(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}(),js=function(t){function e(e){var n=t.call(this,{attributions:e.attributions,attributionsCollapsible:e.attributionsCollapsible,projection:e.projection,state:e.state,wrapX:e.wrapX,interpolate:e.interpolate})||this;n.on,n.once,n.un,n.opaque_=void 0!==e.opaque&&e.opaque,n.tilePixelRatio_=void 0!==e.tilePixelRatio?e.tilePixelRatio:1,n.tileGrid=void 0!==e.tileGrid?e.tileGrid:null;var o=e.tileGrid;return o&&si(o.getTileSize(o.getMinZoom()),[256,256]),n.tileCache=new Es(e.cacheSize||0),n.tmpSize=[0,0],n.key_=e.key||"",n.tileOptions={transition:e.transition,interpolate:e.interpolate},n.zDirection=e.zDirection?e.zDirection:0,n}return Is(e,t),e.prototype.canExpireCache=function(){return this.tileCache.canExpireCache()},e.prototype.expireCache=function(t,e){var n=this.getTileCacheForProjection(t);n&&n.expireCache(e)},e.prototype.forEachLoadedTile=function(t,e,n,o){var i=this.getTileCacheForProjection(t);if(!i)return!1;for(var r,s,a,l=!0,u=n.minX;u<=n.maxX;++u)for(var c=n.minY;c<=n.maxY;++c)s=ms(e,u,c),a=!1,i.containsKey(s)&&(a=2===(r=i.get(s)).getState())&&(a=!1!==o(r)),a||(l=!1);return l},e.prototype.getGutterForProjection=function(t){return 0},e.prototype.getKey=function(){return this.key_},e.prototype.setKey=function(t){this.key_!==t&&(this.key_=t,this.changed())},e.prototype.getOpaque=function(t){return this.opaque_},e.prototype.getResolutions=function(){return this.tileGrid.getResolutions()},e.prototype.getTile=function(t,e,n,o,i){return A()},e.prototype.getTileGrid=function(){return this.tileGrid},e.prototype.getTileGridForProjection=function(t){return this.tileGrid?this.tileGrid:Ss(t)},e.prototype.getTileCacheForProjection=function(t){return W(nn(this.getProjection(),t),68),this.tileCache},e.prototype.getTilePixelRatio=function(t){return this.tilePixelRatio_},e.prototype.getTilePixelSize=function(t,e,n){var o,i,r,s=this.getTileGridForProjection(n),a=this.getTilePixelRatio(e),l=si(s.getTileSize(t),this.tmpSize);return 1==a?l:(o=l,i=a,void 0===(r=this.tmpSize)&&(r=[0,0]),r[0]=o[0]*i+.5|0,r[1]=o[1]*i+.5|0,r)},e.prototype.getTileCoordForTileUrlFunction=function(t,e){var n=void 0!==e?e:this.getProjection(),o=this.getTileGridForProjection(n);return this.getWrapX()&&n.isGlobal()&&(t=function(t,e,n){var o=e[0],i=t.getTileCoordCenter(e),r=As(n);if(Ut(r,i))return e;var s=ce(r),a=Math.ceil((r[0]-i[0])/s);return i[0]+=s*a,t.getTileCoordForCoordAndZ(i,o)}(o,t,n)),function(t,e){var n=t[0],o=t[1],i=t[2];if(e.getMinZoom()>n||n>e.getMaxZoom())return!1;var r=e.getFullTileRange(n);return!r||r.containsXY(o,i)}(t,o)?t:null},e.prototype.clear=function(){this.tileCache.clear()},e.prototype.refresh=function(){this.clear(),t.prototype.refresh.call(this)},e.prototype.updateCacheSize=function(t,e){var n=this.getTileCacheForProjection(e);t>n.highWaterMark&&(n.highWaterMark=t)},e.prototype.useTile=function(t,e,n,o){},e}(Ps),Ls=function(t){function e(e,n){var o=t.call(this,e)||this;return o.tile=n,o}return Is(e,t),e}(e);const Fs=js;function ks(t,e){var n=/\{z\}/g,o=/\{x\}/g,i=/\{y\}/g,r=/\{-y\}/g;return function(s,a,l){return s?t.replace(n,s[0].toString()).replace(o,s[1].toString()).replace(i,s[2].toString()).replace(r,(function(){var t=s[0],n=e.getFullTileRange(t);return W(n,55),(n.getHeight()-s[2]-1).toString()})):void 0}}var Ds=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function o(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}();const zs=function(t){function e(n){var o=t.call(this,{attributions:n.attributions,cacheSize:n.cacheSize,opaque:n.opaque,projection:n.projection,state:n.state,tileGrid:n.tileGrid,tilePixelRatio:n.tilePixelRatio,wrapX:n.wrapX,transition:n.transition,interpolate:n.interpolate,key:n.key,attributionsCollapsible:n.attributionsCollapsible,zDirection:n.zDirection})||this;return o.generateTileUrlFunction_=o.tileUrlFunction===e.prototype.tileUrlFunction,o.tileLoadFunction=n.tileLoadFunction,n.tileUrlFunction&&(o.tileUrlFunction=n.tileUrlFunction),o.urls=null,n.urls?o.setUrls(n.urls):n.url&&o.setUrl(n.url),o.tileLoadingKeys_={},o}return Ds(e,t),e.prototype.getTileLoadFunction=function(){return this.tileLoadFunction},e.prototype.getTileUrlFunction=function(){return Object.getPrototypeOf(this).tileUrlFunction===this.tileUrlFunction?this.tileUrlFunction.bind(this):this.tileUrlFunction},e.prototype.getUrls=function(){return this.urls},e.prototype.handleTileChange=function(t){var e,n=t.target,o=j(n),i=n.getState();1==i?(this.tileLoadingKeys_[o]=!0,e="tileloadstart"):o in this.tileLoadingKeys_&&(delete this.tileLoadingKeys_[o],e=3==i?"tileloaderror":2==i?"tileloadend":void 0),null!=e&&this.dispatchEvent(new Ls(e,n))},e.prototype.setTileLoadFunction=function(t){this.tileCache.clear(),this.tileLoadFunction=t,this.changed()},e.prototype.setTileUrlFunction=function(t,e){this.tileUrlFunction=t,this.tileCache.pruneExceptNewestZ(),void 0!==e?this.setKey(e):this.changed()},e.prototype.setUrl=function(t){var e=function(t){var e=[],n=/\{([a-z])-([a-z])\}/.exec(t);if(n){var o=n[1].charCodeAt(0),i=n[2].charCodeAt(0),r=void 0;for(r=o;r<=i;++r)e.push(t.replace(n[0],String.fromCharCode(r)));return e}if(n=/\{(\d+)-(\d+)\}/.exec(t)){for(var s=parseInt(n[2],10),a=parseInt(n[1],10);a<=s;a++)e.push(t.replace(n[0],a.toString()));return e}return e.push(t),e}(t);this.urls=e,this.setUrls(e)},e.prototype.setUrls=function(t){this.urls=t;var e=t.join("\n");this.generateTileUrlFunction_?this.setTileUrlFunction(function(t,e){for(var n=t.length,o=new Array(n),i=0;i<n;++i)o[i]=ks(t[i],e);return function(t){return 1===t.length?t[0]:function(e,n,o){if(e){var i=function(t){return(t[1]<<t[0])+t[2]}(e),r=nt(i,t.length);return t[r](e,n,o)}}}(o)}(t,this.tileGrid),e):this.setKey(e)},e.prototype.tileUrlFunction=function(t,e,n){},e.prototype.useTile=function(t,e,n){var o=ms(t,e,n);this.tileCache.containsKey(o)&&this.tileCache.get(o)},e}(Fs);var Ns=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function o(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}(),Gs=function(t){function e(e){var n=this,o=void 0===e.imageSmoothing||e.imageSmoothing;return void 0!==e.interpolate&&(o=e.interpolate),(n=t.call(this,{attributions:e.attributions,cacheSize:e.cacheSize,opaque:e.opaque,projection:e.projection,state:e.state,tileGrid:e.tileGrid,tileLoadFunction:e.tileLoadFunction?e.tileLoadFunction:Ks,tilePixelRatio:e.tilePixelRatio,tileUrlFunction:e.tileUrlFunction,url:e.url,urls:e.urls,wrapX:e.wrapX,transition:e.transition,interpolate:o,key:e.key,attributionsCollapsible:e.attributionsCollapsible,zDirection:e.zDirection})||this).crossOrigin=void 0!==e.crossOrigin?e.crossOrigin:null,n.tileClass=void 0!==e.tileClass?e.tileClass:us,n.tileCacheForProjection={},n.tileGridForProjection={},n.reprojectionErrorThreshold_=e.reprojectionErrorThreshold,n.renderReprojectionEdges_=!1,n}return Ns(e,t),e.prototype.canExpireCache=function(){if(this.tileCache.canExpireCache())return!0;for(var t in this.tileCacheForProjection)if(this.tileCacheForProjection[t].canExpireCache())return!0;return!1},e.prototype.expireCache=function(t,e){var n=this.getTileCacheForProjection(t);for(var o in this.tileCache.expireCache(this.tileCache==n?e:{}),this.tileCacheForProjection){var i=this.tileCacheForProjection[o];i.expireCache(i==n?e:{})}},e.prototype.getGutterForProjection=function(t){return this.getProjection()&&t&&!nn(this.getProjection(),t)?0:this.getGutter()},e.prototype.getGutter=function(){return 0},e.prototype.getKey=function(){var e=t.prototype.getKey.call(this);return this.getInterpolate()||(e+=":disable-interpolation"),e},e.prototype.getOpaque=function(e){return!(this.getProjection()&&e&&!nn(this.getProjection(),e))&&t.prototype.getOpaque.call(this,e)},e.prototype.getTileGridForProjection=function(t){var e=this.getProjection();if(!this.tileGrid||e&&!nn(e,t)){var n=j(t);return n in this.tileGridForProjection||(this.tileGridForProjection[n]=Ss(t)),this.tileGridForProjection[n]}return this.tileGrid},e.prototype.getTileCacheForProjection=function(t){var e=this.getProjection();if(!e||nn(e,t))return this.tileCache;var n=j(t);return n in this.tileCacheForProjection||(this.tileCacheForProjection[n]=new Es(this.tileCache.highWaterMark)),this.tileCacheForProjection[n]},e.prototype.createTile_=function(t,e,n,o,i,r){var s=[t,e,n],a=this.getTileCoordForTileUrlFunction(s,i),l=a?this.tileUrlFunction(a,o,i):void 0,u=new this.tileClass(s,void 0!==l?0:4,void 0!==l?l:"",this.crossOrigin,this.tileLoadFunction,this.tileOptions);return u.key=r,u.addEventListener(_,this.handleTileChange.bind(this)),u},e.prototype.getTile=function(t,e,n,o,i){var r=this.getProjection();if(r&&i&&!nn(r,i)){var s=this.getTileCacheForProjection(i),a=[t,e,n],l=void 0,u=ws(a);s.containsKey(u)&&(l=s.get(u));var c=this.getKey();if(l&&l.key==c)return l;var h=this.getTileGridForProjection(r),p=this.getTileGridForProjection(i),d=this.getTileCoordForTileUrlFunction(a,i),f=new vs(r,h,i,p,a,d,this.getTilePixelRatio(o),this.getGutter(),function(t,e,n,o){return this.getTileInternal(t,e,n,o,r)}.bind(this),this.reprojectionErrorThreshold_,this.renderReprojectionEdges_,this.getInterpolate());return f.key=c,l?(f.interimTile=l,f.refreshInterimChain(),s.replace(u,f)):s.set(u,f),f}return this.getTileInternal(t,e,n,o,r||i)},e.prototype.getTileInternal=function(t,e,n,o,i){var r=null,s=ms(t,e,n),a=this.getKey();if(this.tileCache.containsKey(s)){if((r=this.tileCache.get(s)).key!=a){var l=r;r=this.createTile_(t,e,n,o,i,a),0==l.getState()?r.interimTile=l.interimTile:r.interimTile=l,r.refreshInterimChain(),this.tileCache.replace(s,r)}}else r=this.createTile_(t,e,n,o,i,a),this.tileCache.set(s,r);return r},e.prototype.setRenderReprojectionEdges=function(t){if(this.renderReprojectionEdges_!=t){for(var e in this.renderReprojectionEdges_=t,this.tileCacheForProjection)this.tileCacheForProjection[e].clear();this.changed()}},e.prototype.setTileGridForProjection=function(t,e){var n=$e(t);if(n){var o=j(n);o in this.tileGridForProjection||(this.tileGridForProjection[o]=e)}},e}(zs);function Ks(t,e){t.getImage().src=e}const Zs=Gs;var Vs=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function o(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}();const Us=function(t){function e(e){var n=e||{},o=void 0===n.imageSmoothing||n.imageSmoothing;void 0!==n.interpolate&&(o=n.interpolate);var i=void 0!==n.projection?n.projection:"EPSG:3857",r=void 0!==n.tileGrid?n.tileGrid:function(t){var e=t||{},n=e.extent||$e("EPSG:3857").getExtent(),o={extent:n,minZoom:e.minZoom,tileSize:e.tileSize,resolutions:Ms(n,e.maxZoom,e.tileSize,e.maxResolution)};return new Rs(o)}({extent:As(i),maxResolution:n.maxResolution,maxZoom:n.maxZoom,minZoom:n.minZoom,tileSize:n.tileSize});return t.call(this,{attributions:n.attributions,cacheSize:n.cacheSize,crossOrigin:n.crossOrigin,interpolate:o,opaque:n.opaque,projection:i,reprojectionErrorThreshold:n.reprojectionErrorThreshold,tileGrid:r,tileLoadFunction:n.tileLoadFunction,tilePixelRatio:n.tilePixelRatio,tileUrlFunction:n.tileUrlFunction,url:n.url,urls:n.urls,wrapX:void 0===n.wrapX||n.wrapX,transition:n.transition,attributionsCollapsible:n.attributionsCollapsible,zDirection:n.zDirection})||this}return Vs(e,t),e}(Zs),Xs={geolandbasemap:"https://maps{1-4}.wien.gv.at/basemap/geolandbasemap/normal/google3857/{z}/{y}/{x}.png",bmapgrau:"https://maps{1-4}.wien.gv.at/basemap/bmapgrau/normal/google3857/{z}/{y}/{x}.png",bmaporthofoto30cm:"https://maps{1-4}.wien.gv.at/basemap/bmaporthofoto30cm/normal/google3857/{z}/{y}/{x}.jpeg",bmapgelaende:"https://maps{1-4}.wien.gv.at/basemap/bmapgelaende/grau/google3857/{z}/{y}/{x}.jpeg",bmapoberflaeche:"https://maps{1-4}.wien.gv.at/basemap/bmapoberflaeche/grau/google3857/{z}/{y}/{x}.jpeg",bmapoverlay:"https://maps{1-4}.wien.gv.at/basemap/bmapoverlay/normal/google3857/{z}/{y}/{x}.png"};class Hs extends Us{constructor(t){const e=(null==t?void 0:t.variant)||"geolandbasemap";super({url:Xs[e],attributions:'Grundkarte: <a href="https://basemap.at/">basemap.at</a>',crossOrigin:"Anonymous"})}}return new pr({target:"bgis-map",layers:[new mn({source:new Hs})],controls:[new gr([new Br,new Vr,new Dr]),new wr({horizontalControls:[new ts,new Jr],verticalControls:[new qr,new Qr,new $r]}),new Cr([new kr,new Ur]),new Yr],view:new Co({center:oe([106e4,5838030,1913530,6281290]),constrainOnlyCenter:!0,constrainResolution:!1,extent:[106e4,5838030,1913530,6281290],maxZoom:15,minZoom:6,zoom:7})}),new pr({target:"bgis-map-2",layers:[new mn({source:new Hs})],controls:[new gr([new Br,new Vr,new Dr]),new wr({horizontalControls:[new ts,new Jr],verticalControls:[new qr,new Qr,new $r]}),new Cr([new kr,new Ur]),new Yr],view:new Co({center:oe([106e4,5838030,1913530,6281290]),constrainOnlyCenter:!0,constrainResolution:!1,extent:[106e4,5838030,1913530,6281290],maxZoom:15,minZoom:6,zoom:7})}),t})()}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,