!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e():"function"==typeof define&&define.amd?define([],e):"object"==typeof exports?exports["bgis-core"]=e():t["bgis-core"]=e()}(self,(()=>(()=>{"use strict";var t={};(t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})})(t);const e=class{constructor(t){this.propagationStopped,this.defaultPrevented,this.type=t,this.target=null}preventDefault(){this.defaultPrevented=!0}stopPropagation(){this.propagationStopped=!0}},i="propertychange",n=class{constructor(){this.disposed=!1}dispose(){this.disposed||(this.disposed=!0,this.disposeInternal())}disposeInternal(){}};function s(t,e){return t>e?1:t<e?-1:0}function o(t,e,i){if(t[0]<=e)return 0;const n=t.length;if(e<=t[n-1])return n-1;if("function"==typeof i){for(let s=1;s<n;++s){const n=t[s];if(n===e)return s;if(n<e)return i(e,t[s-1],n)>0?s-1:s}return n-1}if(i>0){for(let i=1;i<n;++i)if(t[i]<e)return i-1;return n-1}if(i<0){for(let i=1;i<n;++i)if(t[i]<=e)return i;return n-1}for(let i=1;i<n;++i){if(t[i]==e)return i;if(t[i]<e)return t[i-1]-e<e-t[i]?i-1:i}return n-1}function r(t,e){const i=Array.isArray(e)?e:[e],n=i.length;for(let e=0;e<n;e++)t[t.length]=i[e]}function a(t,e){const i=t.length;if(i!==e.length)return!1;for(let n=0;n<i;n++)if(t[n]!==e[n])return!1;return!0}function l(){return!0}function h(){return!1}function c(){}function u(t){for(const e in t)delete t[e]}const d=class extends n{constructor(t){super(),this.eventTarget_=t,this.pendingRemovals_=null,this.dispatching_=null,this.listeners_=null}addEventListener(t,e){if(!t||!e)return;const i=this.listeners_||(this.listeners_={}),n=i[t]||(i[t]=[]);n.includes(e)||n.push(e)}dispatchEvent(t){const i="string"==typeof t,n=i?t:t.type,s=this.listeners_&&this.listeners_[n];if(!s)return;const o=i?new e(t):t;o.target||(o.target=this.eventTarget_||this);const r=this.dispatching_||(this.dispatching_={}),a=this.pendingRemovals_||(this.pendingRemovals_={});let l;n in r||(r[n]=0,a[n]=0),++r[n];for(let t=0,e=s.length;t<e;++t)if(l="handleEvent"in s[t]?s[t].handleEvent(o):s[t].call(this,o),!1===l||o.propagationStopped){l=!1;break}if(0==--r[n]){let t=a[n];for(delete a[n];t--;)this.removeEventListener(n,c);delete r[n]}return l}disposeInternal(){this.listeners_&&u(this.listeners_)}getListeners(t){return this.listeners_&&this.listeners_[t]||void 0}hasListener(t){return!!this.listeners_&&(t?t in this.listeners_:Object.keys(this.listeners_).length>0)}removeEventListener(t,e){const i=this.listeners_&&this.listeners_[t];if(i){const n=i.indexOf(e);-1!==n&&(this.pendingRemovals_&&t in this.pendingRemovals_?(i[n]=c,++this.pendingRemovals_[t]):(i.splice(n,1),0===i.length&&delete this.listeners_[t]))}}},g="change",p="contextmenu",m="click",_="keydown",f="keypress",v="touchmove",y="wheel";function C(t,e,i,n,s){if(n&&n!==t&&(i=i.bind(n)),s){const n=i;i=function(){t.removeEventListener(e,i),n.apply(this,arguments)}}const o={target:t,type:e,listener:i};return t.addEventListener(e,i),o}function x(t,e,i,n){return C(t,e,i,n,!0)}function E(t){t&&t.target&&(t.target.removeEventListener(t.type,t.listener),u(t))}class T extends d{constructor(){super(),this.on=this.onInternal,this.once=this.onceInternal,this.un=this.unInternal,this.revision_=0}changed(){++this.revision_,this.dispatchEvent(g)}getRevision(){return this.revision_}onInternal(t,e){if(Array.isArray(t)){const i=t.length,n=new Array(i);for(let s=0;s<i;++s)n[s]=C(this,t[s],e);return n}return C(this,t,e)}onceInternal(t,e){let i;if(Array.isArray(t)){const n=t.length;i=new Array(n);for(let s=0;s<n;++s)i[s]=x(this,t[s],e)}else i=x(this,t,e);return e.ol_key=i,i}unInternal(t,e){const i=e.ol_key;if(i)!function(t){if(Array.isArray(t))for(let e=0,i=t.length;e<i;++e)E(t[e]);else E(t)}(i);else if(Array.isArray(t))for(let i=0,n=t.length;i<n;++i)this.removeEventListener(t[i],e);else this.removeEventListener(t,e)}}T.prototype.on,T.prototype.once,T.prototype.un;const w=T;function b(){throw new Error("Unimplemented abstract method.")}let R=0;function S(t){return t.ol_uid||(t.ol_uid=String(++R))}class P extends e{constructor(t,e,i){super(t),this.key=e,this.oldValue=i}}const M=class extends w{constructor(t){super(),this.on,this.once,this.un,S(this),this.values_=null,void 0!==t&&this.setProperties(t)}get(t){let e;return this.values_&&this.values_.hasOwnProperty(t)&&(e=this.values_[t]),e}getKeys(){return this.values_&&Object.keys(this.values_)||[]}getProperties(){return this.values_&&Object.assign({},this.values_)||{}}hasProperties(){return!!this.values_}notify(t,e){let n;n=`change:${t}`,this.hasListener(n)&&this.dispatchEvent(new P(n,t,e)),n=i,this.hasListener(n)&&this.dispatchEvent(new P(n,t,e))}addChangeListener(t,e){this.addEventListener(`change:${t}`,e)}removeChangeListener(t,e){this.removeEventListener(`change:${t}`,e)}set(t,e,i){const n=this.values_||(this.values_={});if(i)n[t]=e;else{const i=n[t];n[t]=e,i!==e&&this.notify(t,i)}}setProperties(t,e){for(const i in t)this.set(i,t[i],e)}applyProperties(t){t.values_&&Object.assign(this.values_||(this.values_={}),t.values_)}unset(t,e){if(this.values_&&t in this.values_){const i=this.values_[t];delete this.values_[t],function(t){let e;for(e in t)return!1;return!e}(this.values_)&&(this.values_=null),e||this.notify(t,i)}}},I="opacity",L="visible",F="extent",A="zIndex",O="maxResolution",k="minResolution",z="maxZoom",N="minZoom",D="source",j={1:"The view center is not defined",2:"The view resolution is not defined",3:"The view rotation is not defined",4:"`image` and `src` cannot be provided at the same time",5:"`imgSize` must be set when `image` is provided",7:"`format` must be set when `url` is set",8:"Unknown `serverType` configured",9:"`url` must be configured or set using `#setUrl()`",10:"The default `geometryFunction` can only handle `Point` geometries",11:"`options.featureTypes` must be an Array",12:"`options.geometryName` must also be provided when `options.bbox` is set",13:"Invalid corner",14:"Invalid color",15:"Tried to get a value for a key that does not exist in the cache",16:"Tried to set a value for a key that is used already",17:"`resolutions` must be sorted in descending order",18:"Either `origin` or `origins` must be configured, never both",19:"Number of `tileSizes` and `resolutions` must be equal",20:"Number of `origins` and `resolutions` must be equal",22:"Either `tileSize` or `tileSizes` must be configured, never both",24:"Invalid extent or geometry provided as `geometry`",25:"Cannot fit empty extent provided as `geometry`",26:"Features must have an id set",27:"Features must have an id set",28:'`renderMode` must be `"hybrid"` or `"vector"`',30:"The passed `feature` was already added to the source",31:"Tried to enqueue an `element` that was already added to the queue",32:"Transformation matrix cannot be inverted",33:"Invalid units",34:"Invalid geometry layout",36:"Unknown SRS type",37:"Unknown geometry type found",38:"`styleMapValue` has an unknown type",39:"Unknown geometry type",40:"Expected `feature` to have a geometry",41:"Expected an `ol/style/Style` or an array of `ol/style/Style.js`",42:"Question unknown, the answer is 42",43:"Expected `layers` to be an array or a `Collection`",47:"Expected `controls` to be an array or an `ol/Collection`",48:"Expected `interactions` to be an array or an `ol/Collection`",49:"Expected `overlays` to be an array or an `ol/Collection`",50:"`options.featureTypes` should be an Array",51:"Either `url` or `tileJSON` options must be provided",52:"Unknown `serverType` configured",53:"Unknown `tierSizeCalculation` configured",55:"The {-y} placeholder requires a tile grid with extent",56:"mapBrowserEvent must originate from a pointer event",57:"At least 2 conditions are required",59:"Invalid command found in the PBF",60:"Missing or invalid `size`",61:"Cannot determine IIIF Image API version from provided image information JSON",62:"A `WebGLArrayBuffer` must either be of type `ELEMENT_ARRAY_BUFFER` or `ARRAY_BUFFER`",64:"Layer opacity must be a number",66:"`forEachFeatureAtCoordinate` cannot be used on a WebGL layer if the hit detection logic has not been enabled. This is done by providing adequate shaders using the `hitVertexShader` and `hitFragmentShader` properties of `WebGLPointsLayerRenderer`",67:"A layer can only be added to the map once. Use either `layer.setMap()` or `map.addLayer()`, not both",68:"A VectorTile source can only be rendered if it has a projection compatible with the view projection",69:"`width` or `height` cannot be provided together with `scale`"};class G extends Error{constructor(t){const e=j[t];super(e),this.code=t,this.name="AssertionError",this.message=e}}const K=G;function V(t,e){if(!t)throw new K(e)}function Z(t,e,i){return Math.min(Math.max(t,e),i)}function B(t,e,i,n,s,o){const r=s-i,a=o-n;if(0!==r||0!==a){const l=((t-i)*r+(e-n)*a)/(r*r+a*a);l>1?(i=s,n=o):l>0&&(i+=r*l,n+=a*l)}return U(t,e,i,n)}function U(t,e,i,n){const s=i-t,o=n-e;return s*s+o*o}function X(t){return 180*t/Math.PI}function H(t){return t*Math.PI/180}function W(t,e){const i=t%e;return i*e<0?i+e:i}function Y(t,e,i){return t+i*(e-t)}function q(t,e){const i=Math.pow(10,e);return Math.round(t*i)/i}function Q(t,e){return Math.floor(q(t,e))}function $(t,e){return Math.ceil(q(t,e))}const J=class extends M{constructor(t){super(),this.on,this.once,this.un,this.background_=t.background;const e=Object.assign({},t);"object"==typeof t.properties&&(delete e.properties,Object.assign(e,t.properties)),e[I]=void 0!==t.opacity?t.opacity:1,V("number"==typeof e[I],64),e[L]=void 0===t.visible||t.visible,e[A]=t.zIndex,e[O]=void 0!==t.maxResolution?t.maxResolution:1/0,e[k]=void 0!==t.minResolution?t.minResolution:0,e[N]=void 0!==t.minZoom?t.minZoom:-1/0,e[z]=void 0!==t.maxZoom?t.maxZoom:1/0,this.className_=void 0!==e.className?e.className:"ol-layer",delete e.className,this.setProperties(e),this.state_=null}getBackground(){return this.background_}getClassName(){return this.className_}getLayerState(t){const e=this.state_||{layer:this,managed:void 0===t||t},i=this.getZIndex();return e.opacity=Z(Math.round(100*this.getOpacity())/100,0,1),e.visible=this.getVisible(),e.extent=this.getExtent(),e.zIndex=void 0!==i||e.managed?i:1/0,e.maxResolution=this.getMaxResolution(),e.minResolution=Math.max(this.getMinResolution(),0),e.minZoom=this.getMinZoom(),e.maxZoom=this.getMaxZoom(),this.state_=e,e}getLayersArray(t){return b()}getLayerStatesArray(t){return b()}getExtent(){return this.get(F)}getMaxResolution(){return this.get(O)}getMinResolution(){return this.get(k)}getMinZoom(){return this.get(N)}getMaxZoom(){return this.get(z)}getOpacity(){return this.get(I)}getSourceState(){return b()}getVisible(){return this.get(L)}getZIndex(){return this.get(A)}setBackground(t){this.background_=t,this.changed()}setExtent(t){this.set(F,t)}setMaxResolution(t){this.set(O,t)}setMinResolution(t){this.set(k,t)}setMaxZoom(t){this.set(z,t)}setMinZoom(t){this.set(N,t)}setOpacity(t){V("number"==typeof t,64),this.set(I,t)}setVisible(t){this.set(L,t)}setZIndex(t){this.set(A,t)}disposeInternal(){this.state_&&(this.state_.layer=null,this.state_=null),super.disposeInternal()}},tt="precompose",et="rendercomplete",it={CENTER:"center",RESOLUTION:"resolution",ROTATION:"rotation"},nt=42,st=256,ot={radians:6370997/(2*Math.PI),degrees:2*Math.PI*6370997/360,ft:.3048,m:1,"us-ft":1200/3937},rt=class{constructor(t){this.code_=t.code,this.units_=t.units,this.extent_=void 0!==t.extent?t.extent:null,this.worldExtent_=void 0!==t.worldExtent?t.worldExtent:null,this.axisOrientation_=void 0!==t.axisOrientation?t.axisOrientation:"enu",this.global_=void 0!==t.global&&t.global,this.canWrapX_=!(!this.global_||!this.extent_),this.getPointResolutionFunc_=t.getPointResolution,this.defaultTileGrid_=null,this.metersPerUnit_=t.metersPerUnit}canWrapX(){return this.canWrapX_}getCode(){return this.code_}getExtent(){return this.extent_}getUnits(){return this.units_}getMetersPerUnit(){return this.metersPerUnit_||ot[this.units_]}getWorldExtent(){return this.worldExtent_}getAxisOrientation(){return this.axisOrientation_}isGlobal(){return this.global_}setGlobal(t){this.global_=t,this.canWrapX_=!(!t||!this.extent_)}getDefaultTileGrid(){return this.defaultTileGrid_}setDefaultTileGrid(t){this.defaultTileGrid_=t}setExtent(t){this.extent_=t,this.canWrapX_=!(!this.global_||!t)}setWorldExtent(t){this.worldExtent_=t}setGetPointResolution(t){this.getPointResolutionFunc_=t}getPointResolutionFunc(){return this.getPointResolutionFunc_}},at=6378137,lt=Math.PI*at,ht=[-lt,-lt,lt,lt],ct=[-180,-85,180,85],ut=at*Math.log(Math.tan(Math.PI/2));class dt extends rt{constructor(t){super({code:t,units:"m",extent:ht,global:!0,worldExtent:ct,getPointResolution:function(t,e){return t/Math.cosh(e[1]/at)}})}}const gt=[new dt("EPSG:3857"),new dt("EPSG:102100"),new dt("EPSG:102113"),new dt("EPSG:900913"),new dt("http://www.opengis.net/def/crs/EPSG/0/3857"),new dt("http://www.opengis.net/gml/srs/epsg.xml#3857")];const pt=[-180,-90,180,90],mt=6378137*Math.PI/180;class _t extends rt{constructor(t,e){super({code:t,units:"degrees",extent:pt,axisOrientation:e,global:!0,metersPerUnit:mt,worldExtent:pt})}}const ft=[new _t("CRS:84"),new _t("EPSG:4326","neu"),new _t("urn:ogc:def:crs:OGC:1.3:CRS84"),new _t("urn:ogc:def:crs:OGC:2:84"),new _t("http://www.opengis.net/def/crs/OGC/1.3/CRS84"),new _t("http://www.opengis.net/gml/srs/epsg.xml#4326","neu"),new _t("http://www.opengis.net/def/crs/EPSG/0/4326","neu")];let vt={},yt={};function Ct(t,e,i){const n=t.getCode(),s=e.getCode();n in yt||(yt[n]={}),yt[n][s]=i}const xt={UNKNOWN:0,INTERSECTING:1,ABOVE:2,RIGHT:4,BELOW:8,LEFT:16};function Et(t){const e=[1/0,1/0,-1/0,-1/0];for(let i=0,n=t.length;i<n;++i)It(e,t[i]);return e}function Tt(t,e,i){let n,s;return n=e<t[0]?t[0]-e:t[2]<e?e-t[2]:0,s=i<t[1]?t[1]-i:t[3]<i?i-t[3]:0,n*n+s*s}function wt(t,e){return bt(t,e[0],e[1])}function bt(t,e,i){return t[0]<=e&&e<=t[2]&&t[1]<=i&&i<=t[3]}function Rt(t,e){const i=t[0],n=t[1],s=t[2],o=t[3],r=e[0],a=e[1];let l=xt.UNKNOWN;return r<i?l|=xt.LEFT:r>s&&(l|=xt.RIGHT),a<n?l|=xt.BELOW:a>o&&(l|=xt.ABOVE),l===xt.UNKNOWN&&(l=xt.INTERSECTING),l}function St(t,e,i,n,s){return s?(s[0]=t,s[1]=e,s[2]=i,s[3]=n,s):[t,e,i,n]}function Pt(t){return St(1/0,1/0,-1/0,-1/0,t)}function Mt(t,e){return t[0]==e[0]&&t[2]==e[2]&&t[1]==e[1]&&t[3]==e[3]}function It(t,e){e[0]<t[0]&&(t[0]=e[0]),e[0]>t[2]&&(t[2]=e[0]),e[1]<t[1]&&(t[1]=e[1]),e[1]>t[3]&&(t[3]=e[1])}function Lt(t,e,i,n,s){for(;i<n;i+=s)Ft(t,e[i],e[i+1]);return t}function Ft(t,e,i){t[0]=Math.min(t[0],e),t[1]=Math.min(t[1],i),t[2]=Math.max(t[2],e),t[3]=Math.max(t[3],i)}function At(t,e){let i;return i=e(kt(t)),i||(i=e(zt(t)),i||(i=e(Bt(t)),i||(i=e(Zt(t)),i||!1)))}function Ot(t){let e=0;return Ht(t)||(e=Ut(t)*Kt(t)),e}function kt(t){return[t[0],t[1]]}function zt(t){return[t[2],t[1]]}function Nt(t){return[(t[0]+t[2])/2,(t[1]+t[3])/2]}function Dt(t,e){let i;return"bottom-left"===e?i=kt(t):"bottom-right"===e?i=zt(t):"top-left"===e?i=Zt(t):"top-right"===e?i=Bt(t):V(!1,13),i}function jt(t,e,i,n,s){const[o,r,a,l,h,c,u,d]=Gt(t,e,i,n);return St(Math.min(o,a,h,u),Math.min(r,l,c,d),Math.max(o,a,h,u),Math.max(r,l,c,d),s)}function Gt(t,e,i,n){const s=e*n[0]/2,o=e*n[1]/2,r=Math.cos(i),a=Math.sin(i),l=s*r,h=s*a,c=o*r,u=o*a,d=t[0],g=t[1];return[d-l+u,g-h-c,d-l-u,g-h+c,d+l-u,g+h+c,d+l+u,g+h-c,d-l+u,g-h-c]}function Kt(t){return t[3]-t[1]}function Vt(t,e,i){const n=i||[1/0,1/0,-1/0,-1/0];return Xt(t,e)?(t[0]>e[0]?n[0]=t[0]:n[0]=e[0],t[1]>e[1]?n[1]=t[1]:n[1]=e[1],t[2]<e[2]?n[2]=t[2]:n[2]=e[2],t[3]<e[3]?n[3]=t[3]:n[3]=e[3]):Pt(n),n}function Zt(t){return[t[0],t[3]]}function Bt(t){return[t[2],t[3]]}function Ut(t){return t[2]-t[0]}function Xt(t,e){return t[0]<=e[2]&&t[2]>=e[0]&&t[1]<=e[3]&&t[3]>=e[1]}function Ht(t){return t[2]<t[0]||t[3]<t[1]}function Wt(t,e){let i=!0;for(let n=t.length-1;n>=0;--n)if(t[n]!=e[n]){i=!1;break}return i}function Yt(t,e){const i=Math.cos(e),n=Math.sin(e),s=t[0]*i-t[1]*n,o=t[1]*i+t[0]*n;return t[0]=s,t[1]=o,t}function qt(t,e){if(e.canWrapX()){const i=Ut(e.getExtent()),n=function(t,e,i){const n=e.getExtent();let s=0;return e.canWrapX()&&(t[0]<n[0]||t[0]>n[2])&&(i=i||Ut(n),s=Math.floor((t[0]-n[0])/i)),s}(t,e,i);n&&(t[0]-=n*i)}return t}const Qt=6371008.8;function $t(t,e,i){i=i||Qt;const n=H(t[1]),s=H(e[1]),o=(s-n)/2,r=H(e[0]-t[0])/2,a=Math.sin(o)*Math.sin(o)+Math.sin(r)*Math.sin(r)*Math.cos(n)*Math.cos(s);return 2*i*Math.atan2(Math.sqrt(a),Math.sqrt(1-a))}function Jt(t,e,i,n){n=n||Qt;const s=H(t[1]),o=H(t[0]),r=e/n,a=Math.asin(Math.sin(s)*Math.cos(r)+Math.cos(s)*Math.sin(r)*Math.cos(i));return[X(o+Math.atan2(Math.sin(i)*Math.sin(r)*Math.cos(s),Math.cos(r)-Math.sin(s)*Math.sin(a))),X(a)]}const te={info:1,warn:2,error:3,none:4};let ee=te.info;function ie(...t){ee>te.warn||console.warn(...t)}let ne=!0;function se(t){ne=!(void 0===t||t)}function oe(t,e){if(void 0!==e)for(let i=0,n=t.length;i<n;++i)e[i]=t[i];else e=t.slice();return e}function re(t,e){if(void 0!==e&&t!==e){for(let i=0,n=t.length;i<n;++i)e[i]=t[i];t=e}return t}function ae(t){!function(t,e){vt[t]=e}(t.getCode(),t),Ct(t,t,oe)}function le(t){return"string"==typeof t?vt[e=t]||vt[e.replace(/urn:(x-)?ogc:def:crs:EPSG:(.*:)?(\w+)$/,"EPSG:$3")]||null:t||null;var e}function he(t,e,i,n){let s;const o=(t=le(t)).getPointResolutionFunc();if(o){if(s=o(e,i),n&&n!==t.getUnits()){const e=t.getMetersPerUnit();e&&(s=s*e/ot[n])}}else{const o=t.getUnits();if("degrees"==o&&!n||"degrees"==n)s=e;else{const r=ge(t,le("EPSG:4326"));if(r===re&&"degrees"!==o)s=e*t.getMetersPerUnit();else{let t=[i[0]-e/2,i[1],i[0]+e/2,i[1],i[0],i[1]-e/2,i[0],i[1]+e/2];t=r(t,t,2),s=($t(t.slice(0,2),t.slice(2,4))+$t(t.slice(4,6),t.slice(6,8)))/2}const a=n?ot[n]:t.getMetersPerUnit();void 0!==a&&(s/=a)}}return s}function ce(t){!function(t){t.forEach(ae)}(t),t.forEach((function(e){t.forEach((function(t){e!==t&&Ct(e,t,oe)}))}))}function ue(t,e){return t?"string"==typeof t?le(t):t:le(e)}function de(t,e){if(t===e)return!0;const i=t.getUnits()===e.getUnits();return(t.getCode()===e.getCode()||ge(t,e)===oe)&&i}function ge(t,e){let i=function(t,e){let i;return t in yt&&e in yt[t]&&(i=yt[t][e]),i}(t.getCode(),e.getCode());return i||(i=re),i}function pe(t,e){return ge(le(t),le(e))}function me(t,e,i){return pe(e,i)(t,void 0,t.length)}let _e=null;function fe(){return _e}function ve(t,e){return t}function ye(t,e){return ne&&!Wt(t,[0,0])&&t[0]>=-180&&t[0]<=180&&t[1]>=-90&&t[1]<=90&&(ne=!1,ie("Call useGeographic() from ol/proj once to work with [longitude, latitude] coordinates.")),t}function Ce(t,e){return t}var xe,Ee,Te;function we(t,e,i){return function(n,s,o,r,a){if(!n)return;if(!s&&!e)return n;const l=e?0:o[0]*s,h=e?0:o[1]*s,c=a?a[0]:0,u=a?a[1]:0;let d=t[0]+l/2+c,g=t[2]-l/2+c,p=t[1]+h/2+u,m=t[3]-h/2+u;d>g&&(d=(g+d)/2,g=d),p>m&&(p=(m+p)/2,m=p);let _=Z(n[0],d,g),f=Z(n[1],p,m);if(r&&i&&s){const t=30*s;_+=-t*Math.log(1+Math.max(0,d-n[0])/t)+t*Math.log(1+Math.max(0,n[0]-g)/t),f+=-t*Math.log(1+Math.max(0,p-n[1])/t)+t*Math.log(1+Math.max(0,n[1]-m)/t)}return[_,f]}}function be(t){return t}function Re(t,e,i,n){const s=Ut(e)/i[0],o=Kt(e)/i[1];return n?Math.min(t,Math.max(s,o)):Math.min(t,Math.min(s,o))}function Se(t,e,i){let n=Math.min(t,e);return n*=Math.log(1+50*Math.max(0,t/e-1))/50+1,i&&(n=Math.max(n,i),n/=Math.log(1+50*Math.max(0,i/t-1))/50+1),Z(n,i/2,2*e)}function Pe(t,e,i,n,s){return i=void 0===i||i,function(o,r,a,l){if(void 0!==o){const r=n?Re(t,n,a,s):t;return i&&l?Se(o,r,e):Z(o,e,r)}}}function Me(t){if(void 0!==t)return 0}function Ie(t){if(void 0!==t)return t}function Le(t){return Math.pow(t,3)}function Fe(t){return 1-Le(1-t)}function Ae(t){return 3*t*t-2*t*t*t}function Oe(t){return t}ce(gt),ce(ft),xe=gt,Ee=function(t,e,i){const n=t.length;i=i>1?i:2,void 0===e&&(e=i>2?t.slice():new Array(n));for(let s=0;s<n;s+=i){e[s]=lt*t[s]/180;let i=at*Math.log(Math.tan(Math.PI*(+t[s+1]+90)/360));i>ut?i=ut:i<-ut&&(i=-ut),e[s+1]=i}return e},Te=function(t,e,i){const n=t.length;i=i>1?i:2,void 0===e&&(e=i>2?t.slice():new Array(n));for(let s=0;s<n;s+=i)e[s]=180*t[s]/lt,e[s+1]=360*Math.atan(Math.exp(t[s+1]/at))/Math.PI-90;return e},ft.forEach((function(t){xe.forEach((function(e){Ct(t,e,Ee),Ct(e,t,Te)}))}));const ke="undefined"!=typeof navigator&&void 0!==navigator.userAgent?navigator.userAgent.toLowerCase():"",ze=ke.includes("firefox"),Ne=(ke.includes("safari")&&!ke.includes("chrom")&&(ke.includes("version/15.4")||/cpu (os|iphone os) 15_4 like mac os x/.test(ke)),ke.includes("webkit")&&!ke.includes("edge")),De=ke.includes("macintosh"),je="undefined"!=typeof devicePixelRatio?devicePixelRatio:1,Ge="undefined"!=typeof WorkerGlobalScope&&"undefined"!=typeof OffscreenCanvas&&self instanceof WorkerGlobalScope,Ke="undefined"!=typeof Image&&Image.prototype.decode,Ve=function(){let t=!1;try{const e=Object.defineProperty({},"passive",{get:function(){t=!0}});window.addEventListener("_",null,e),window.removeEventListener("_",null,e)}catch(t){}return t}();function Ze(t,e){const i=e[0],n=e[1];return e[0]=t[0]*i+t[2]*n+t[4],e[1]=t[1]*i+t[3]*n+t[5],e}function Be(t,e,i,n,s,o,r,a){const l=Math.sin(o),h=Math.cos(o);return t[0]=n*h,t[1]=s*l,t[2]=-n*l,t[3]=s*h,t[4]=r*n*h-a*n*l+e,t[5]=r*s*l+a*s*h+i,t}function Ue(t,e){const i=(n=e)[0]*n[3]-n[1]*n[2];var n;V(0!==i,32);const s=e[0],o=e[1],r=e[2],a=e[3],l=e[4],h=e[5];return t[0]=a/i,t[1]=-o/i,t[2]=-r/i,t[3]=s/i,t[4]=(r*h-a*l)/i,t[5]=-(s*h-o*l)/i,t}let Xe;new Array(6);const He=[1,0,0,1,0,0],We=class extends M{constructor(){super(),this.extent_=[1/0,1/0,-1/0,-1/0],this.extentRevision_=-1,this.simplifiedGeometryMaxMinSquaredTolerance=0,this.simplifiedGeometryRevision=0,this.simplifyTransformedInternal=function(t){let e,i,n,s=!1;return function(){const o=Array.prototype.slice.call(arguments);return s&&this===n&&a(o,i)||(s=!0,n=this,i=o,e=t.apply(this,arguments)),e}}((function(t,e,i){if(!i)return this.getSimplifiedGeometry(e);const n=this.clone();return n.applyTransform(i),n.getSimplifiedGeometry(e)}))}simplifyTransformed(t,e){return this.simplifyTransformedInternal(this.getRevision(),t,e)}clone(){return b()}closestPointXY(t,e,i,n){return b()}containsXY(t,e){const i=this.getClosestPoint([t,e]);return i[0]===t&&i[1]===e}getClosestPoint(t,e){return e=e||[NaN,NaN],this.closestPointXY(t[0],t[1],e,1/0),e}intersectsCoordinate(t){return this.containsXY(t[0],t[1])}computeExtent(t){return b()}getExtent(t){if(this.extentRevision_!=this.getRevision()){const t=this.computeExtent(this.extent_);(isNaN(t[0])||isNaN(t[1]))&&Pt(t),this.extentRevision_=this.getRevision()}return function(t,e){return e?(e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e):t}(this.extent_,t)}rotate(t,e){b()}scale(t,e,i){b()}simplify(t){return this.getSimplifiedGeometry(t*t)}getSimplifiedGeometry(t){return b()}getType(){return b()}applyTransform(t){b()}intersectsExtent(t){return b()}translate(t,e){b()}transform(t,e){const i=le(t),n="tile-pixels"==i.getUnits()?function(t,n,s){const o=i.getExtent(),r=i.getWorldExtent(),a=Kt(r)/Kt(o);return Be(He,r[0],r[3],a,-a,0,0,0),function(t,e,i,n,s,o){o=o||[];let r=0;for(let e=0;e<i;e+=n){const i=t[e],n=t[e+1];o[r++]=s[0]*i+s[2]*n+s[4],o[r++]=s[1]*i+s[3]*n+s[5]}o&&o.length!=r&&(o.length=r)}(t,0,t.length,s,He,n),pe(i,e)(t,n,s)}:pe(i,e);return this.applyTransform(n),this}};function Ye(t){let e;return"XY"==t?e=2:"XYZ"==t||"XYM"==t?e=3:"XYZM"==t&&(e=4),e}const qe=class extends We{constructor(){super(),this.layout="XY",this.stride=2,this.flatCoordinates=null}computeExtent(t){return e=this.flatCoordinates,i=this.flatCoordinates.length,n=this.stride,Lt(Pt(t),e,0,i,n);var e,i,n}getCoordinates(){return b()}getFirstCoordinate(){return this.flatCoordinates.slice(0,this.stride)}getFlatCoordinates(){return this.flatCoordinates}getLastCoordinate(){return this.flatCoordinates.slice(this.flatCoordinates.length-this.stride)}getLayout(){return this.layout}getSimplifiedGeometry(t){if(this.simplifiedGeometryRevision!==this.getRevision()&&(this.simplifiedGeometryMaxMinSquaredTolerance=0,this.simplifiedGeometryRevision=this.getRevision()),t<0||0!==this.simplifiedGeometryMaxMinSquaredTolerance&&t<=this.simplifiedGeometryMaxMinSquaredTolerance)return this;const e=this.getSimplifiedGeometryInternal(t);return e.getFlatCoordinates().length<this.flatCoordinates.length?e:(this.simplifiedGeometryMaxMinSquaredTolerance=t,this)}getSimplifiedGeometryInternal(t){return this}getStride(){return this.stride}setFlatCoordinates(t,e){this.stride=Ye(t),this.layout=t,this.flatCoordinates=e}setCoordinates(t,e){b()}setLayout(t,e,i){let n;if(t)n=Ye(t);else{for(let t=0;t<i;++t){if(0===e.length)return this.layout="XY",void(this.stride=2);e=e[0]}n=e.length,t=function(t){let e;return 2==t?e="XY":3==t?e="XYZ":4==t&&(e="XYZM"),e}(n)}this.layout=t,this.stride=n}applyTransform(t){this.flatCoordinates&&(t(this.flatCoordinates,this.flatCoordinates,this.stride),this.changed())}rotate(t,e){const i=this.getFlatCoordinates();if(i){const n=this.getStride();!function(t,e,i,n,s,o,r){r=r||[];const a=Math.cos(s),l=Math.sin(s),h=o[0],c=o[1];let u=0;for(let e=0;e<i;e+=n){const i=t[e]-h,s=t[e+1]-c;r[u++]=h+i*a-s*l,r[u++]=c+i*l+s*a;for(let i=e+2;i<e+n;++i)r[u++]=t[i]}r&&r.length!=u&&(r.length=u)}(i,0,i.length,n,t,e,i),this.changed()}}scale(t,e,i){void 0===e&&(e=t),i||(i=Nt(this.getExtent()));const n=this.getFlatCoordinates();if(n){const s=this.getStride();!function(t,e,i,n,s,o,r,a){a=a||[];const l=r[0],h=r[1];let c=0;for(let e=0;e<i;e+=n){const i=t[e]-l,r=t[e+1]-h;a[c++]=l+s*i,a[c++]=h+o*r;for(let i=e+2;i<e+n;++i)a[c++]=t[i]}a&&a.length!=c&&(a.length=c)}(n,0,n.length,s,t,e,i,n),this.changed()}}translate(t,e){const i=this.getFlatCoordinates();if(i){const n=this.getStride();!function(t,e,i,n,s,o,r){r=r||[];let a=0;for(let e=0;e<i;e+=n){r[a++]=t[e]+s,r[a++]=t[e+1]+o;for(let i=e+2;i<e+n;++i)r[a++]=t[i]}r&&r.length!=a&&(r.length=a)}(i,0,i.length,n,t,e,i),this.changed()}}};function Qe(t,e,i,n,s,o,r){const a=t[e],l=t[e+1],h=t[i]-a,c=t[i+1]-l;let u;if(0===h&&0===c)u=e;else{const d=((s-a)*h+(o-l)*c)/(h*h+c*c);if(d>1)u=i;else{if(d>0){for(let s=0;s<n;++s)r[s]=Y(t[e+s],t[i+s],d);return void(r.length=n)}u=e}}for(let e=0;e<n;++e)r[e]=t[u+e];r.length=n}function $e(t,e,i,n,s){let o=t[e],r=t[e+1];for(e+=n;e<i;e+=n){const i=t[e],n=t[e+1],a=U(o,r,i,n);a>s&&(s=a),o=i,r=n}return s}function Je(t,e,i,n,s,o,r,a,l,h,c){if(e==i)return h;let u,d;if(0===s){if(d=U(r,a,t[e],t[e+1]),d<h){for(u=0;u<n;++u)l[u]=t[e+u];return l.length=n,d}return h}c=c||[NaN,NaN];let g=e+n;for(;g<i;)if(Qe(t,g-n,g,n,r,a,c),d=U(r,a,c[0],c[1]),d<h){for(h=d,u=0;u<n;++u)l[u]=c[u];l.length=n,g+=n}else g+=n*Math.max((Math.sqrt(d)-Math.sqrt(h))/s|0,1);if(o&&(Qe(t,i-n,e,n,r,a,c),d=U(r,a,c[0],c[1]),d<h)){for(h=d,u=0;u<n;++u)l[u]=c[u];l.length=n}return h}function ti(t,e,i,n){for(let s=0,o=i.length;s<o;++s){const o=i[s];for(let i=0;i<n;++i)t[e++]=o[i]}return e}function ei(t,e){return e*Math.round(t/e)}function ii(t,e,i,n,s,o,r){if(e==i)return r;let a,l,h=ei(t[e],s),c=ei(t[e+1],s);e+=n,o[r++]=h,o[r++]=c;do{if(a=ei(t[e],s),l=ei(t[e+1],s),(e+=n)==i)return o[r++]=a,o[r++]=l,r}while(a==h&&l==c);for(;e<i;){const i=ei(t[e],s),u=ei(t[e+1],s);if(e+=n,i==a&&u==l)continue;const d=a-h,g=l-c,p=i-h,m=u-c;d*m==g*p&&(d<0&&p<d||d==p||d>0&&p>d)&&(g<0&&m<g||g==m||g>0&&m>g)?(a=i,l=u):(o[r++]=a,o[r++]=l,h=a,c=l,a=i,l=u)}return o[r++]=a,o[r++]=l,r}function ni(t,e,i,n,s){s=void 0!==s?s:[];let o=0;for(let r=e;r<i;r+=n)s[o++]=t.slice(r,r+n);return s.length=o,s}function si(t,e,i,n){let s=0,o=t[i-n],r=t[i-n+1];for(;e<i;e+=n){const i=t[e],n=t[e+1];s+=r*i-o*n,o=i,r=n}return s/2}class oi extends qe{constructor(t,e){super(),this.maxDelta_=-1,this.maxDeltaRevision_=-1,void 0===e||Array.isArray(t[0])?this.setCoordinates(t,e):this.setFlatCoordinates(e,t)}clone(){return new oi(this.flatCoordinates.slice(),this.layout)}closestPointXY(t,e,i,n){return n<Tt(this.getExtent(),t,e)?n:(this.maxDeltaRevision_!=this.getRevision()&&(this.maxDelta_=Math.sqrt($e(this.flatCoordinates,0,this.flatCoordinates.length,this.stride,0)),this.maxDeltaRevision_=this.getRevision()),Je(this.flatCoordinates,0,this.flatCoordinates.length,this.stride,this.maxDelta_,!0,t,e,i,n))}getArea(){return si(this.flatCoordinates,0,this.flatCoordinates.length,this.stride)}getCoordinates(){return ni(this.flatCoordinates,0,this.flatCoordinates.length,this.stride)}getSimplifiedGeometryInternal(t){const e=[];return e.length=function(t,e,i,n,s,o,r){const a=(i-e)/n;if(a<3){for(;e<i;e+=n)o[r++]=t[e],o[r++]=t[e+1];return r}const l=new Array(a);l[0]=1,l[a-1]=1;const h=[e,i-n];let c=0;for(;h.length>0;){const i=h.pop(),o=h.pop();let r=0;const a=t[o],u=t[o+1],d=t[i],g=t[i+1];for(let e=o+n;e<i;e+=n){const i=B(t[e],t[e+1],a,u,d,g);i>r&&(c=e,r=i)}r>s&&(l[(c-e)/n]=1,o+n<c&&h.push(o,c),c+n<i&&h.push(c,i))}for(let i=0;i<a;++i)l[i]&&(o[r++]=t[e+i*n],o[r++]=t[e+i*n+1]);return r}(this.flatCoordinates,0,this.flatCoordinates.length,this.stride,t,e,0),new oi(e,"XY")}getType(){return"LinearRing"}intersectsExtent(t){return!1}setCoordinates(t,e){this.setLayout(e,t,1),this.flatCoordinates||(this.flatCoordinates=[]),this.flatCoordinates.length=ti(this.flatCoordinates,0,t,this.stride),this.changed()}}const ri=oi;class ai extends qe{constructor(t,e){super(),this.setCoordinates(t,e)}clone(){const t=new ai(this.flatCoordinates.slice(),this.layout);return t.applyProperties(this),t}closestPointXY(t,e,i,n){const s=this.flatCoordinates,o=U(t,e,s[0],s[1]);if(o<n){const t=this.stride;for(let e=0;e<t;++e)i[e]=s[e];return i.length=t,o}return n}getCoordinates(){return this.flatCoordinates?this.flatCoordinates.slice():[]}computeExtent(t){return function(t,e){const i=t[0],n=t[1];return St(i,n,i,n,e)}(this.flatCoordinates,t)}getType(){return"Point"}intersectsExtent(t){return bt(t,this.flatCoordinates[0],this.flatCoordinates[1])}setCoordinates(t,e){this.setLayout(e,t,0),this.flatCoordinates||(this.flatCoordinates=[]),this.flatCoordinates.length=function(t,e,i,n){for(let n=0,s=i.length;n<s;++n)t[e++]=i[n];return e}(this.flatCoordinates,0,t,this.stride),this.changed()}}const li=ai;function hi(t,e,i,n,s){return!At(s,(function(s){return!ci(t,e,i,n,s[0],s[1])}))}function ci(t,e,i,n,s,o){let r=0,a=t[i-n],l=t[i-n+1];for(;e<i;e+=n){const i=t[e],n=t[e+1];l<=o?n>o&&(i-a)*(o-l)-(s-a)*(n-l)>0&&r++:n<=o&&(i-a)*(o-l)-(s-a)*(n-l)<0&&r--,a=i,l=n}return 0!==r}function ui(t,e,i,n,s,o){if(0===i.length)return!1;if(!ci(t,e,i[0],n,s,o))return!1;for(let e=1,r=i.length;e<r;++e)if(ci(t,i[e-1],i[e],n,s,o))return!1;return!0}function di(t,e,i,n,s){const o=Lt([1/0,1/0,-1/0,-1/0],t,e,i,n);return!!Xt(s,o)&&(a=o,(r=s)[0]<=a[0]&&a[2]<=r[2]&&r[1]<=a[1]&&a[3]<=r[3]||o[0]>=s[0]&&o[2]<=s[2]||o[1]>=s[1]&&o[3]<=s[3]||function(t,e,i,n,o){let r;for(e+=n;e<i;e+=n)if(a=t.slice(e-n,e),l=t.slice(e,e+n),r=function(t,e,i){let n=!1;const s=Rt(t,e),o=Rt(t,i);if(s===xt.INTERSECTING||o===xt.INTERSECTING)n=!0;else{const r=t[0],a=t[1],l=t[2],h=t[3],c=e[0],u=e[1],d=i[0],g=i[1],p=(g-u)/(d-c);let m,_;o&xt.ABOVE&&!(s&xt.ABOVE)&&(m=d-(g-h)/p,n=m>=r&&m<=l),n||!(o&xt.RIGHT)||s&xt.RIGHT||(_=g-(d-l)*p,n=_>=a&&_<=h),n||!(o&xt.BELOW)||s&xt.BELOW||(m=d-(g-a)/p,n=m>=r&&m<=l),n||!(o&xt.LEFT)||s&xt.LEFT||(_=g-(d-r)*p,n=_>=a&&_<=h)}return n}(s,a,l),r)return r;var a,l;return!1}(t,e,i,n));var r,a}function gi(t,e,i,n,s){return!!(di(t,e,i,n,s)||ci(t,e,i,n,s[0],s[1])||ci(t,e,i,n,s[0],s[3])||ci(t,e,i,n,s[2],s[1])||ci(t,e,i,n,s[2],s[3]))}function pi(t,e,i,n){for(;e<i-n;){for(let s=0;s<n;++s){const o=t[e+s];t[e+s]=t[i-n+s],t[i-n+s]=o}e+=n,i-=n}}function mi(t,e,i,n){let s=0,o=t[i-n],r=t[i-n+1];for(;e<i;e+=n){const i=t[e],n=t[e+1];s+=(i-o)*(n+r),o=i,r=n}return 0===s?void 0:s>0}function _i(t,e,i,n,s){s=void 0!==s&&s;for(let o=0,r=i.length;o<r;++o){const r=i[o],a=mi(t,e,r,n);(0===o?s&&a||!s&&!a:s&&!a||!s&&a)&&pi(t,e,r,n),e=r}return e}class fi extends qe{constructor(t,e,i){super(),this.ends_=[],this.flatInteriorPointRevision_=-1,this.flatInteriorPoint_=null,this.maxDelta_=-1,this.maxDeltaRevision_=-1,this.orientedRevision_=-1,this.orientedFlatCoordinates_=null,void 0!==e&&i?(this.setFlatCoordinates(e,t),this.ends_=i):this.setCoordinates(t,e)}appendLinearRing(t){this.flatCoordinates?r(this.flatCoordinates,t.getFlatCoordinates()):this.flatCoordinates=t.getFlatCoordinates().slice(),this.ends_.push(this.flatCoordinates.length),this.changed()}clone(){const t=new fi(this.flatCoordinates.slice(),this.layout,this.ends_.slice());return t.applyProperties(this),t}closestPointXY(t,e,i,n){return n<Tt(this.getExtent(),t,e)?n:(this.maxDeltaRevision_!=this.getRevision()&&(this.maxDelta_=Math.sqrt(function(t,e,i,n,s){for(let o=0,r=i.length;o<r;++o){const r=i[o];s=$e(t,e,r,n,s),e=r}return s}(this.flatCoordinates,0,this.ends_,this.stride,0)),this.maxDeltaRevision_=this.getRevision()),function(t,e,i,n,s,o,r,a,l,h,c){c=c||[NaN,NaN];for(let u=0,d=i.length;u<d;++u){const d=i[u];h=Je(t,e,d,n,s,o,r,a,l,h,c),e=d}return h}(this.flatCoordinates,0,this.ends_,this.stride,this.maxDelta_,!0,t,e,i,n))}containsXY(t,e){return ui(this.getOrientedFlatCoordinates(),0,this.ends_,this.stride,t,e)}getArea(){return function(t,e,i,n){let s=0;for(let o=0,r=i.length;o<r;++o){const r=i[o];s+=si(t,e,r,n),e=r}return s}(this.getOrientedFlatCoordinates(),0,this.ends_,this.stride)}getCoordinates(t){let e;return void 0!==t?(e=this.getOrientedFlatCoordinates().slice(),_i(e,0,this.ends_,this.stride,t)):e=this.flatCoordinates,function(t,e,i,n,s){s=void 0!==s?s:[];let o=0;for(let r=0,a=i.length;r<a;++r){const a=i[r];s[o++]=ni(t,e,a,n,s[o]),e=a}return s.length=o,s}(e,0,this.ends_,this.stride)}getEnds(){return this.ends_}getFlatInteriorPoint(){if(this.flatInteriorPointRevision_!=this.getRevision()){const t=Nt(this.getExtent());this.flatInteriorPoint_=function(t,e,i,n,o,r,a){let l,h,c,u,d,g,p;const m=o[r+1],_=[];for(let s=0,o=i.length;s<o;++s){const o=i[s];for(u=t[o-n],g=t[o-n+1],l=e;l<o;l+=n)d=t[l],p=t[l+1],(m<=g&&p<=m||g<=m&&m<=p)&&(c=(m-g)/(p-g)*(d-u)+u,_.push(c)),u=d,g=p}let f=NaN,v=-1/0;for(_.sort(s),u=_[0],l=1,h=_.length;l<h;++l){d=_[l];const s=Math.abs(d-u);s>v&&(c=(u+d)/2,ui(t,e,i,n,c,m)&&(f=c,v=s)),u=d}return isNaN(f)&&(f=o[r]),a?(a.push(f,m,v),a):[f,m,v]}(this.getOrientedFlatCoordinates(),0,this.ends_,this.stride,t,0),this.flatInteriorPointRevision_=this.getRevision()}return this.flatInteriorPoint_}getInteriorPoint(){return new li(this.getFlatInteriorPoint(),"XYM")}getLinearRingCount(){return this.ends_.length}getLinearRing(t){return t<0||this.ends_.length<=t?null:new ri(this.flatCoordinates.slice(0===t?0:this.ends_[t-1],this.ends_[t]),this.layout)}getLinearRings(){const t=this.layout,e=this.flatCoordinates,i=this.ends_,n=[];let s=0;for(let o=0,r=i.length;o<r;++o){const r=i[o],a=new ri(e.slice(s,r),t);n.push(a),s=r}return n}getOrientedFlatCoordinates(){if(this.orientedRevision_!=this.getRevision()){const t=this.flatCoordinates;!function(t,e,i,n,s){s=void 0!==s&&s;for(let o=0,r=i.length;o<r;++o){const r=i[o],a=mi(t,e,r,n);if(0===o){if(s&&a||!s&&!a)return!1}else if(s&&!a||!s&&a)return!1;e=r}return!0}(t,0,this.ends_,this.stride)?(this.orientedFlatCoordinates_=t.slice(),this.orientedFlatCoordinates_.length=_i(this.orientedFlatCoordinates_,0,this.ends_,this.stride)):this.orientedFlatCoordinates_=t,this.orientedRevision_=this.getRevision()}return this.orientedFlatCoordinates_}getSimplifiedGeometryInternal(t){const e=[],i=[];return e.length=function(t,e,i,n,s,o,r,a){for(let l=0,h=i.length;l<h;++l){const h=i[l];r=ii(t,e,h,n,s,o,r),a.push(r),e=h}return r}(this.flatCoordinates,0,this.ends_,this.stride,Math.sqrt(t),e,0,i),new fi(e,"XY",i)}getType(){return"Polygon"}intersectsExtent(t){return function(t,e,i,n,s){if(!gi(t,e,i[0],n,s))return!1;if(1===i.length)return!0;for(let e=1,o=i.length;e<o;++e)if(hi(t,i[e-1],i[e],n,s)&&!di(t,i[e-1],i[e],n,s))return!1;return!0}(this.getOrientedFlatCoordinates(),0,this.ends_,this.stride,t)}setCoordinates(t,e){this.setLayout(e,t,2),this.flatCoordinates||(this.flatCoordinates=[]);const i=function(t,e,i,n,s){s=s||[];let o=0;for(let r=0,a=i.length;r<a;++r){const a=ti(t,e,i[r],n);s[o++]=a,e=a}return s.length=o,s}(this.flatCoordinates,0,t,this.stride,this.ends_);this.flatCoordinates.length=0===i.length?0:i[i.length-1],this.changed()}}const vi=fi;function yi(t){if(Ht(t))throw new Error("Cannot create polygon from empty extent");const e=t[0],i=t[1],n=t[2],s=t[3],o=[e,i,e,s,n,s,n,i,e,i];return new fi(o,"XY",[o.length])}function Ci(t,e){setTimeout((function(){t(e)}),0)}function xi(t){return!(t.sourceCenter&&t.targetCenter&&!Wt(t.sourceCenter,t.targetCenter))&&t.sourceResolution===t.targetResolution&&t.sourceRotation===t.targetRotation}function Ei(t,e,i,n,s){const o=Math.cos(-s);let r=Math.sin(-s),a=t[0]*o-t[1]*r,l=t[1]*o+t[0]*r;return a+=(e[0]/2-i[0])*n,l+=(i[1]-e[1]/2)*n,r=-r,[a*o-l*r,l*o+a*r]}const Ti=class extends M{constructor(t){super(),this.on,this.once,this.un,t=Object.assign({},t),this.hints_=[0,0],this.animations_=[],this.updateAnimationKey_,this.projection_=ue(t.projection,"EPSG:3857"),this.viewportSize_=[100,100],this.targetCenter_=null,this.targetResolution_,this.targetRotation_,this.nextCenter_=null,this.nextResolution_,this.nextRotation_,this.cancelAnchor_=void 0,t.projection&&se(),t.center&&(t.center=ye(t.center,this.projection_)),t.extent&&(t.extent=Ce(t.extent,this.projection_)),this.applyOptions_(t)}applyOptions_(t){const e=Object.assign({},t);for(const t in it)delete e[t];this.setProperties(e,!0);const i=function(t){let e,i,n;let s=void 0!==t.minZoom?t.minZoom:0,r=void 0!==t.maxZoom?t.maxZoom:28;const a=void 0!==t.zoomFactor?t.zoomFactor:2,l=void 0!==t.multiWorld&&t.multiWorld,h=void 0===t.smoothResolutionConstraint||t.smoothResolutionConstraint,c=void 0!==t.showFullExtent&&t.showFullExtent,u=ue(t.projection,"EPSG:3857"),d=u.getExtent();let g=t.constrainOnlyCenter,p=t.extent;if(l||p||!u.isGlobal()||(g=!1,p=d),void 0!==t.resolutions){const a=t.resolutions;i=a[s],n=void 0!==a[r]?a[r]:a[a.length-1],e=t.constrainResolution?function(t,e,i,n){return e=void 0===e||e,function(s,r,a,l){if(void 0!==s){const h=t[0],c=t[t.length-1],u=i?Re(h,i,a,n):h;if(l)return e?Se(s,u,c):Z(s,c,u);const d=Math.min(u,s),g=Math.floor(o(t,d,r));return t[g]>u&&g<t.length-1?t[g+1]:t[g]}}}(a,h,!g&&p,c):Pe(i,n,h,!g&&p,c)}else{const o=(d?Math.max(Ut(d),Kt(d)):360*ot.degrees/u.getMetersPerUnit())/st/Math.pow(2,0),l=o/Math.pow(2,28);i=t.maxResolution,void 0!==i?s=0:i=o/Math.pow(a,s),n=t.minResolution,void 0===n&&(n=void 0!==t.maxZoom?void 0!==t.maxResolution?i/Math.pow(a,r):o/Math.pow(a,r):l),r=s+Math.floor(Math.log(i/n)/Math.log(a)),n=i/Math.pow(a,r-s),e=t.constrainResolution?function(t,e,i,n,s,o){return n=void 0===n||n,i=void 0!==i?i:0,function(r,a,l,h){if(void 0!==r){const c=s?Re(e,s,l,o):e;if(h)return n?Se(r,c,i):Z(r,i,c);const u=1e-9,d=Math.ceil(Math.log(e/c)/Math.log(t)-u),g=-a*(.5-u)+.5,p=Math.min(c,r),m=Math.floor(Math.log(e/p)/Math.log(t)+g),_=Math.max(d,m);return Z(e/Math.pow(t,_),i,c)}}}(a,i,n,h,!g&&p,c):Pe(i,n,h,!g&&p,c)}return{constraint:e,maxResolution:i,minResolution:n,minZoom:s,zoomFactor:a}}(t);this.maxResolution_=i.maxResolution,this.minResolution_=i.minResolution,this.zoomFactor_=i.zoomFactor,this.resolutions_=t.resolutions,this.padding_=t.padding,this.minZoom_=i.minZoom;const n=function(t){if(void 0!==t.extent){const e=void 0===t.smoothExtentConstraint||t.smoothExtentConstraint;return we(t.extent,t.constrainOnlyCenter,e)}const e=ue(t.projection,"EPSG:3857");if(!0!==t.multiWorld&&e.isGlobal()){const t=e.getExtent().slice();return t[0]=-1/0,t[2]=1/0,we(t,!1,!1)}return be}(t),s=i.constraint,r=function(t){if(void 0===t.enableRotation||t.enableRotation){const i=t.constrainRotation;return void 0===i||!0===i?(e=e||H(5),function(t,i){return i?t:void 0!==t?Math.abs(t)<=e?0:t:void 0}):!1===i?Ie:"number"==typeof i?function(t){const e=2*Math.PI/t;return function(t,i){return i?t:void 0!==t?t=Math.floor(t/e+.5)*e:void 0}}(i):Ie}var e;return Me}(t);this.constraints_={center:n,resolution:s,rotation:r},this.setRotation(void 0!==t.rotation?t.rotation:0),this.setCenterInternal(void 0!==t.center?t.center:null),void 0!==t.resolution?this.setResolution(t.resolution):void 0!==t.zoom&&this.setZoom(t.zoom)}get padding(){return this.padding_}set padding(t){let e=this.padding_;this.padding_=t;const i=this.getCenterInternal();if(i){const n=t||[0,0,0,0];e=e||[0,0,0,0];const s=this.getResolution(),o=s/2*(n[3]-e[3]+e[1]-n[1]),r=s/2*(n[0]-e[0]+e[2]-n[2]);this.setCenterInternal([i[0]+o,i[1]-r])}}getUpdatedOptions_(t){const e=this.getProperties();return void 0!==e.resolution?e.resolution=this.getResolution():e.zoom=this.getZoom(),e.center=this.getCenterInternal(),e.rotation=this.getRotation(),Object.assign({},e,t)}animate(t){this.isDef()&&!this.getAnimating()&&this.resolveConstraints(0);const e=new Array(arguments.length);for(let t=0;t<e.length;++t){let i=arguments[t];i.center&&(i=Object.assign({},i),i.center=ye(i.center,this.getProjection())),i.anchor&&(i=Object.assign({},i),i.anchor=ye(i.anchor,this.getProjection())),e[t]=i}this.animateInternal.apply(this,e)}animateInternal(t){let e,i=arguments.length;i>1&&"function"==typeof arguments[i-1]&&(e=arguments[i-1],--i);let n=0;for(;n<i&&!this.isDef();++n){const t=arguments[n];t.center&&this.setCenterInternal(t.center),void 0!==t.zoom?this.setZoom(t.zoom):t.resolution&&this.setResolution(t.resolution),void 0!==t.rotation&&this.setRotation(t.rotation)}if(n===i)return void(e&&Ci(e,!0));let s=Date.now(),o=this.targetCenter_.slice(),r=this.targetResolution_,a=this.targetRotation_;const l=[];for(;n<i;++n){const t=arguments[n],i={start:s,complete:!1,anchor:t.anchor,duration:void 0!==t.duration?t.duration:1e3,easing:t.easing||Ae,callback:e};if(t.center&&(i.sourceCenter=o,i.targetCenter=t.center.slice(),o=i.targetCenter),void 0!==t.zoom?(i.sourceResolution=r,i.targetResolution=this.getResolutionForZoom(t.zoom),r=i.targetResolution):t.resolution&&(i.sourceResolution=r,i.targetResolution=t.resolution,r=i.targetResolution),void 0!==t.rotation){i.sourceRotation=a;const e=W(t.rotation-a+Math.PI,2*Math.PI)-Math.PI;i.targetRotation=a+e,a=i.targetRotation}xi(i)?i.complete=!0:s+=i.duration,l.push(i)}this.animations_.push(l),this.setHint(0,1),this.updateAnimations_()}getAnimating(){return this.hints_[0]>0}getInteracting(){return this.hints_[1]>0}cancelAnimations(){let t;this.setHint(0,-this.hints_[0]);for(let e=0,i=this.animations_.length;e<i;++e){const i=this.animations_[e];if(i[0].callback&&Ci(i[0].callback,!1),!t)for(let e=0,n=i.length;e<n;++e){const n=i[e];if(!n.complete){t=n.anchor;break}}}this.animations_.length=0,this.cancelAnchor_=t,this.nextCenter_=null,this.nextResolution_=NaN,this.nextRotation_=NaN}updateAnimations_(){if(void 0!==this.updateAnimationKey_&&(cancelAnimationFrame(this.updateAnimationKey_),this.updateAnimationKey_=void 0),!this.getAnimating())return;const t=Date.now();let e=!1;for(let i=this.animations_.length-1;i>=0;--i){const n=this.animations_[i];let s=!0;for(let i=0,o=n.length;i<o;++i){const o=n[i];if(o.complete)continue;const r=t-o.start;let a=o.duration>0?r/o.duration:1;a>=1?(o.complete=!0,a=1):s=!1;const l=o.easing(a);if(o.sourceCenter){const t=o.sourceCenter[0],e=o.sourceCenter[1],i=o.targetCenter[0],n=o.targetCenter[1];this.nextCenter_=o.targetCenter;const s=t+l*(i-t),r=e+l*(n-e);this.targetCenter_=[s,r]}if(o.sourceResolution&&o.targetResolution){const t=1===l?o.targetResolution:o.sourceResolution+l*(o.targetResolution-o.sourceResolution);if(o.anchor){const e=this.getViewportSize_(this.getRotation()),i=this.constraints_.resolution(t,0,e,!0);this.targetCenter_=this.calculateCenterZoom(i,o.anchor)}this.nextResolution_=o.targetResolution,this.targetResolution_=t,this.applyTargetState_(!0)}if(void 0!==o.sourceRotation&&void 0!==o.targetRotation){const t=1===l?W(o.targetRotation+Math.PI,2*Math.PI)-Math.PI:o.sourceRotation+l*(o.targetRotation-o.sourceRotation);if(o.anchor){const e=this.constraints_.rotation(t,!0);this.targetCenter_=this.calculateCenterRotate(e,o.anchor)}this.nextRotation_=o.targetRotation,this.targetRotation_=t}if(this.applyTargetState_(!0),e=!0,!o.complete)break}if(s){this.animations_[i]=null,this.setHint(0,-1),this.nextCenter_=null,this.nextResolution_=NaN,this.nextRotation_=NaN;const t=n[0].callback;t&&Ci(t,!0)}}this.animations_=this.animations_.filter(Boolean),e&&void 0===this.updateAnimationKey_&&(this.updateAnimationKey_=requestAnimationFrame(this.updateAnimations_.bind(this)))}calculateCenterRotate(t,e){let i;const n=this.getCenterInternal();var s,o;return void 0!==n&&(i=[n[0]-e[0],n[1]-e[1]],Yt(i,t-this.getRotation()),o=e,(s=i)[0]+=+o[0],s[1]+=+o[1]),i}calculateCenterZoom(t,e){let i;const n=this.getCenterInternal(),s=this.getResolution();return void 0!==n&&void 0!==s&&(i=[e[0]-t*(e[0]-n[0])/s,e[1]-t*(e[1]-n[1])/s]),i}getViewportSize_(t){const e=this.viewportSize_;if(t){const i=e[0],n=e[1];return[Math.abs(i*Math.cos(t))+Math.abs(n*Math.sin(t)),Math.abs(i*Math.sin(t))+Math.abs(n*Math.cos(t))]}return e}setViewportSize(t){this.viewportSize_=Array.isArray(t)?t.slice():[100,100],this.getAnimating()||this.resolveConstraints(0)}getCenter(){const t=this.getCenterInternal();return t?ve(t,this.getProjection()):t}getCenterInternal(){return this.get(it.CENTER)}getConstraints(){return this.constraints_}getConstrainResolution(){return this.get("constrainResolution")}getHints(t){return void 0!==t?(t[0]=this.hints_[0],t[1]=this.hints_[1],t):this.hints_.slice()}calculateExtent(t){return e=this.calculateExtentInternal(t),this.getProjection(),e;var e}calculateExtentInternal(t){t=t||this.getViewportSizeMinusPadding_();const e=this.getCenterInternal();V(e,1);const i=this.getResolution();V(void 0!==i,2);const n=this.getRotation();return V(void 0!==n,3),jt(e,i,n,t)}getMaxResolution(){return this.maxResolution_}getMinResolution(){return this.minResolution_}getMaxZoom(){return this.getZoomForResolution(this.minResolution_)}setMaxZoom(t){this.applyOptions_(this.getUpdatedOptions_({maxZoom:t}))}getMinZoom(){return this.getZoomForResolution(this.maxResolution_)}setMinZoom(t){this.applyOptions_(this.getUpdatedOptions_({minZoom:t}))}setConstrainResolution(t){this.applyOptions_(this.getUpdatedOptions_({constrainResolution:t}))}getProjection(){return this.projection_}getResolution(){return this.get(it.RESOLUTION)}getResolutions(){return this.resolutions_}getResolutionForExtent(t,e){return this.getResolutionForExtentInternal(Ce(t,this.getProjection()),e)}getResolutionForExtentInternal(t,e){e=e||this.getViewportSizeMinusPadding_();const i=Ut(t)/e[0],n=Kt(t)/e[1];return Math.max(i,n)}getResolutionForValueFunction(t){t=t||2;const e=this.getConstrainedResolution(this.maxResolution_),i=this.minResolution_,n=Math.log(e/i)/Math.log(t);return function(i){return e/Math.pow(t,i*n)}}getRotation(){return this.get(it.ROTATION)}getValueForResolutionFunction(t){const e=Math.log(t||2),i=this.getConstrainedResolution(this.maxResolution_),n=this.minResolution_,s=Math.log(i/n)/e;return function(t){return Math.log(i/t)/e/s}}getViewportSizeMinusPadding_(t){let e=this.getViewportSize_(t);const i=this.padding_;return i&&(e=[e[0]-i[1]-i[3],e[1]-i[0]-i[2]]),e}getState(){const t=this.getProjection(),e=this.getResolution(),i=this.getRotation();let n=this.getCenterInternal();const s=this.padding_;if(s){const t=this.getViewportSizeMinusPadding_();n=Ei(n,this.getViewportSize_(),[t[0]/2+s[3],t[1]/2+s[0]],e,i)}return{center:n.slice(0),projection:void 0!==t?t:null,resolution:e,nextCenter:this.nextCenter_,nextResolution:this.nextResolution_,nextRotation:this.nextRotation_,rotation:i,zoom:this.getZoom()}}getViewStateAndExtent(){return{viewState:this.getState(),extent:this.calculateExtent()}}getZoom(){let t;const e=this.getResolution();return void 0!==e&&(t=this.getZoomForResolution(e)),t}getZoomForResolution(t){let e,i,n=this.minZoom_||0;if(this.resolutions_){const s=o(this.resolutions_,t,1);n=s,e=this.resolutions_[s],i=s==this.resolutions_.length-1?2:e/this.resolutions_[s+1]}else e=this.maxResolution_,i=this.zoomFactor_;return n+Math.log(e/t)/Math.log(i)}getResolutionForZoom(t){if(this.resolutions_){if(this.resolutions_.length<=1)return 0;const e=Z(Math.floor(t),0,this.resolutions_.length-2),i=this.resolutions_[e]/this.resolutions_[e+1];return this.resolutions_[e]/Math.pow(i,Z(t-e,0,1))}return this.maxResolution_/Math.pow(this.zoomFactor_,t-this.minZoom_)}fit(t,e){let i;if(V(Array.isArray(t)||"function"==typeof t.getSimplifiedGeometry,24),Array.isArray(t))V(!Ht(t),25),i=yi(Ce(t,this.getProjection()));else if("Circle"===t.getType()){const e=Ce(t.getExtent(),this.getProjection());i=yi(e),i.rotate(this.getRotation(),Nt(e))}else{const e=fe();i=e?t.clone().transform(e,this.getProjection()):t}this.fitInternal(i,e)}rotatedExtentForGeometry(t){const e=this.getRotation(),i=Math.cos(e),n=Math.sin(-e),s=t.getFlatCoordinates(),o=t.getStride();let r=1/0,a=1/0,l=-1/0,h=-1/0;for(let t=0,e=s.length;t<e;t+=o){const e=s[t]*i-s[t+1]*n,o=s[t]*n+s[t+1]*i;r=Math.min(r,e),a=Math.min(a,o),l=Math.max(l,e),h=Math.max(h,o)}return[r,a,l,h]}fitInternal(t,e){let i=(e=e||{}).size;i||(i=this.getViewportSizeMinusPadding_());const n=void 0!==e.padding?e.padding:[0,0,0,0],s=void 0!==e.nearest&&e.nearest;let o;o=void 0!==e.minResolution?e.minResolution:void 0!==e.maxZoom?this.getResolutionForZoom(e.maxZoom):0;const r=this.rotatedExtentForGeometry(t);let a=this.getResolutionForExtentInternal(r,[i[0]-n[1]-n[3],i[1]-n[0]-n[2]]);a=isNaN(a)?o:Math.max(a,o),a=this.getConstrainedResolution(a,s?0:1);const l=this.getRotation(),h=Math.sin(l),u=Math.cos(l),d=Nt(r);d[0]+=(n[1]-n[3])/2*a,d[1]+=(n[0]-n[2])/2*a;const g=d[0]*u-d[1]*h,p=d[1]*u+d[0]*h,m=this.getConstrainedCenter([g,p],a),_=e.callback?e.callback:c;void 0!==e.duration?this.animateInternal({resolution:a,center:m,duration:e.duration,easing:e.easing},_):(this.targetResolution_=a,this.targetCenter_=m,this.applyTargetState_(!1,!0),Ci(_,!0))}centerOn(t,e,i){this.centerOnInternal(ye(t,this.getProjection()),e,i)}centerOnInternal(t,e,i){this.setCenterInternal(Ei(t,e,i,this.getResolution(),this.getRotation()))}calculateCenterShift(t,e,i,n){let s;const o=this.padding_;if(o&&t){const r=this.getViewportSizeMinusPadding_(-i),a=Ei(t,n,[r[0]/2+o[3],r[1]/2+o[0]],e,i);s=[t[0]-a[0],t[1]-a[1]]}return s}isDef(){return!!this.getCenterInternal()&&void 0!==this.getResolution()}adjustCenter(t){const e=ve(this.targetCenter_,this.getProjection());this.setCenter([e[0]+t[0],e[1]+t[1]])}adjustCenterInternal(t){const e=this.targetCenter_;this.setCenterInternal([e[0]+t[0],e[1]+t[1]])}adjustResolution(t,e){e=e&&ye(e,this.getProjection()),this.adjustResolutionInternal(t,e)}adjustResolutionInternal(t,e){const i=this.getAnimating()||this.getInteracting(),n=this.getViewportSize_(this.getRotation()),s=this.constraints_.resolution(this.targetResolution_*t,0,n,i);e&&(this.targetCenter_=this.calculateCenterZoom(s,e)),this.targetResolution_*=t,this.applyTargetState_()}adjustZoom(t,e){this.adjustResolution(Math.pow(this.zoomFactor_,-t),e)}adjustRotation(t,e){e&&(e=ye(e,this.getProjection())),this.adjustRotationInternal(t,e)}adjustRotationInternal(t,e){const i=this.getAnimating()||this.getInteracting(),n=this.constraints_.rotation(this.targetRotation_+t,i);e&&(this.targetCenter_=this.calculateCenterRotate(n,e)),this.targetRotation_+=t,this.applyTargetState_()}setCenter(t){this.setCenterInternal(t?ye(t,this.getProjection()):t)}setCenterInternal(t){this.targetCenter_=t,this.applyTargetState_()}setHint(t,e){return this.hints_[t]+=e,this.changed(),this.hints_[t]}setResolution(t){this.targetResolution_=t,this.applyTargetState_()}setRotation(t){this.targetRotation_=t,this.applyTargetState_()}setZoom(t){this.setResolution(this.getResolutionForZoom(t))}applyTargetState_(t,e){const i=this.getAnimating()||this.getInteracting()||e,n=this.constraints_.rotation(this.targetRotation_,i),s=this.getViewportSize_(n),o=this.constraints_.resolution(this.targetResolution_,0,s,i),r=this.constraints_.center(this.targetCenter_,o,s,i,this.calculateCenterShift(this.targetCenter_,o,n,s));this.get(it.ROTATION)!==n&&this.set(it.ROTATION,n),this.get(it.RESOLUTION)!==o&&(this.set(it.RESOLUTION,o),this.set("zoom",this.getZoom(),!0)),r&&this.get(it.CENTER)&&Wt(this.get(it.CENTER),r)||this.set(it.CENTER,r),this.getAnimating()&&!t&&this.cancelAnimations(),this.cancelAnchor_=void 0}resolveConstraints(t,e,i){t=void 0!==t?t:200;const n=e||0,s=this.constraints_.rotation(this.targetRotation_),o=this.getViewportSize_(s),r=this.constraints_.resolution(this.targetResolution_,n,o),a=this.constraints_.center(this.targetCenter_,r,o,!1,this.calculateCenterShift(this.targetCenter_,r,s,o));if(0===t&&!this.cancelAnchor_)return this.targetResolution_=r,this.targetRotation_=s,this.targetCenter_=a,void this.applyTargetState_();i=i||(0===t?this.cancelAnchor_:void 0),this.cancelAnchor_=void 0,this.getResolution()===r&&this.getRotation()===s&&this.getCenterInternal()&&Wt(this.getCenterInternal(),a)||(this.getAnimating()&&this.cancelAnimations(),this.animateInternal({rotation:s,center:a,resolution:r,duration:t,easing:Fe,anchor:i}))}beginInteraction(){this.resolveConstraints(0),this.setHint(1,1)}endInteraction(t,e,i){i=i&&ye(i,this.getProjection()),this.endInteractionInternal(t,e,i)}endInteractionInternal(t,e,i){this.getInteracting()&&(this.setHint(1,-1),this.resolveConstraints(t,e,i))}getConstrainedCenter(t,e){const i=this.getViewportSize_(this.getRotation());return this.constraints_.center(t,e||this.getResolution(),i)}getConstrainedZoom(t,e){const i=this.getResolutionForZoom(t);return this.getZoomForResolution(this.getConstrainedResolution(i,e))}getConstrainedResolution(t,e){e=e||0;const i=this.getViewportSize_(this.getRotation());return this.constraints_.resolution(t,e,i)}};function wi(t,e){if(!t.visible)return!1;const i=e.resolution;if(i<t.minResolution||i>=t.maxResolution)return!1;const n=e.zoom;return n>t.minZoom&&n<=t.maxZoom}const bi=class extends J{constructor(t){const e=Object.assign({},t);delete e.source,super(e),this.on,this.once,this.un,this.mapPrecomposeKey_=null,this.mapRenderKey_=null,this.sourceChangeKey_=null,this.renderer_=null,this.sourceReady_=!1,this.rendered=!1,t.render&&(this.render=t.render),t.map&&this.setMap(t.map),this.addChangeListener(D,this.handleSourcePropertyChange_);const i=t.source?t.source:null;this.setSource(i)}getLayersArray(t){return(t=t||[]).push(this),t}getLayerStatesArray(t){return(t=t||[]).push(this.getLayerState()),t}getSource(){return this.get(D)||null}getRenderSource(){return this.getSource()}getSourceState(){const t=this.getSource();return t?t.getState():"undefined"}handleSourceChange_(){this.changed(),this.sourceReady_||"ready"!==this.getSource().getState()||(this.sourceReady_=!0,this.dispatchEvent("sourceready"))}handleSourcePropertyChange_(){this.sourceChangeKey_&&(E(this.sourceChangeKey_),this.sourceChangeKey_=null),this.sourceReady_=!1;const t=this.getSource();t&&(this.sourceChangeKey_=C(t,g,this.handleSourceChange_,this),"ready"===t.getState()&&(this.sourceReady_=!0,setTimeout((()=>{this.dispatchEvent("sourceready")}),0))),this.changed()}getFeatures(t){return this.renderer_?this.renderer_.getFeatures(t):Promise.resolve([])}getData(t){return this.renderer_&&this.rendered?this.renderer_.getData(t):null}isVisible(t){let e;const i=this.getMapInternal();let n;!t&&i&&(t=i.getView()),e=t instanceof Ti?{viewState:t.getState(),extent:t.calculateExtent()}:t,!e.layerStatesArray&&i&&(e.layerStatesArray=i.getLayerGroup().getLayerStatesArray()),n=e.layerStatesArray?e.layerStatesArray.find((t=>t.layer===this)):this.getLayerState();const s=this.getExtent();return wi(n,e.viewState)&&(!s||Xt(s,e.extent))}getAttributions(t){if(!this.isVisible(t))return[];let e;const i=this.getSource();if(i&&(e=i.getAttributions()),!e)return[];let n=e(t instanceof Ti?t.getViewStateAndExtent():t);return Array.isArray(n)||(n=[n]),n}render(t,e){const i=this.getRenderer();return i.prepareFrame(t)?(this.rendered=!0,i.renderFrame(t,e)):null}unrender(){this.rendered=!1}setMapInternal(t){t||this.unrender(),this.set("map",t)}getMapInternal(){return this.get("map")}setMap(t){this.mapPrecomposeKey_&&(E(this.mapPrecomposeKey_),this.mapPrecomposeKey_=null),t||this.changed(),this.mapRenderKey_&&(E(this.mapRenderKey_),this.mapRenderKey_=null),t&&(this.mapPrecomposeKey_=C(t,tt,(function(t){const e=t.frameState.layerStatesArray,i=this.getLayerState(!1);V(!e.some((function(t){return t.layer===i.layer})),67),e.push(i)}),this),this.mapRenderKey_=C(this,g,t.render,t),this.changed())}setSource(t){this.set(D,t)}getRenderer(){return this.renderer_||(this.renderer_=this.createRenderer()),this.renderer_}hasRenderer(){return!!this.renderer_}createRenderer(){return null}disposeInternal(){this.renderer_&&(this.renderer_.dispose(),delete this.renderer_),this.setSource(null),super.disposeInternal()}},Ri="preload",Si="useInterimTilesOnError",Pi=class extends bi{constructor(t){t=t||{};const e=Object.assign({},t);delete e.preload,delete e.useInterimTilesOnError,super(e),this.on,this.once,this.un,this.setPreload(void 0!==t.preload?t.preload:0),this.setUseInterimTilesOnError(void 0===t.useInterimTilesOnError||t.useInterimTilesOnError)}getPreload(){return this.get(Ri)}setPreload(t){this.set(Ri,t)}getUseInterimTilesOnError(){return this.get(Si)}setUseInterimTilesOnError(t){this.set(Si,t)}getData(t){return super.getData(t)}},Mi=class extends w{constructor(t){super(),this.ready=!0,this.boundHandleImageChange_=this.handleImageChange_.bind(this),this.layer_=t,this.declutterExecutorGroup=null}getFeatures(t){return b()}getData(t){return null}prepareFrame(t){return b()}renderFrame(t,e){return b()}loadedTileCallback(t,e,i){t[e]||(t[e]={}),t[e][i.tileCoord.toString()]=i}createLoadedTileFinder(t,e,i){return(n,s)=>{const o=this.loadedTileCallback.bind(this,i,n);return t.forEachLoadedTile(e,n,s,o)}}forEachFeatureAtCoordinate(t,e,i,n,s){}getLayer(){return this.layer_}handleFontsChanged(){}handleImageChange_(t){const e=t.target;2!==e.getState()&&3!==e.getState()||this.renderIfReadyAndVisible()}loadImage(t){let e=t.getState();return 2!=e&&3!=e&&t.addEventListener(g,this.boundHandleImageChange_),0==e&&(t.load(),e=t.getState()),2==e}renderIfReadyAndVisible(){const t=this.getLayer();t&&t.getVisible()&&"ready"===t.getSourceState()&&t.changed()}disposeInternal(){delete this.layer_,super.disposeInternal()}},Ii=class extends e{constructor(t,e,i,n){super(t),this.inversePixelTransform=e,this.frameState=i,this.context=n}},Li=/^#([a-f0-9]{3}|[a-f0-9]{4}(?:[a-f0-9]{2}){0,2})$/i,Fi=/^([a-z]*)$|^hsla?\(.*\)$/i;const Ai=function(){const t={};let e=0;return function(i){let n;if(t.hasOwnProperty(i))n=t[i];else{if(e>=1024){let i=0;for(const n in t)0==(3&i++)&&(delete t[n],--e)}n=function(t){let e,i,n,s,o;if(Fi.exec(t)&&(t=function(t){const e=document.createElement("div");if(e.style.color=t,""!==e.style.color){document.body.appendChild(e);const t=getComputedStyle(e).color;return document.body.removeChild(e),t}return""}(t)),Li.exec(t)){const r=t.length-1;let a;a=r<=4?1:2;const l=4===r||8===r;e=parseInt(t.substr(1+0*a,a),16),i=parseInt(t.substr(1+1*a,a),16),n=parseInt(t.substr(1+2*a,a),16),s=l?parseInt(t.substr(1+3*a,a),16):255,1==a&&(e=(e<<4)+e,i=(i<<4)+i,n=(n<<4)+n,l&&(s=(s<<4)+s)),o=[e,i,n,s/255]}else t.startsWith("rgba(")?(o=t.slice(5,-1).split(",").map(Number),ki(o)):t.startsWith("rgb(")?(o=t.slice(4,-1).split(",").map(Number),o.push(1),ki(o)):V(!1,14);return o}(i),t[i]=n,++e}return n}}();function Oi(t){return Array.isArray(t)?t:Ai(t)}function ki(t){return t[0]=Z(t[0]+.5|0,0,255),t[1]=Z(t[1]+.5|0,0,255),t[2]=Z(t[2]+.5|0,0,255),t[3]=Z(t[3],0,1),t}function zi(t,e,i,n){let s;return s=i&&i.length?i.shift():Ge?new OffscreenCanvas(t||300,e||300):document.createElement("canvas"),t&&(s.width=t),e&&(s.height=e),s.getContext("2d",n)}function Ni(t){const e=t.canvas;e.width=1,e.height=1,t.clearRect(0,0,1,1)}function Di(t,e){const i=e.parentNode;i&&i.replaceChild(t,e)}function ji(t){return t&&t.parentNode?t.parentNode.removeChild(t):null}let Gi=null;const Ki=class extends Mi{constructor(t){super(t),this.container=null,this.renderedResolution,this.tempTransform=[1,0,0,1,0,0],this.pixelTransform=[1,0,0,1,0,0],this.inversePixelTransform=[1,0,0,1,0,0],this.context=null,this.containerReused=!1,this.pixelContext_=null,this.frameState=null}getImageData(t,e,i){let n;Gi||(Gi=zi(1,1,void 0,{willReadFrequently:!0})),Gi.clearRect(0,0,1,1);try{Gi.drawImage(t,e,i,1,1,0,0,1,1),n=Gi.getImageData(0,0,1,1).data}catch(t){return Gi=null,null}return n}getBackground(t){let e=this.getLayer().getBackground();return"function"==typeof e&&(e=e(t.viewState.resolution)),e||void 0}useContainer(t,e,i){const n=this.getLayer().getClassName();let s,o;if(t&&t.className===n&&(!i||t&&t.style.backgroundColor&&a(Oi(t.style.backgroundColor),Oi(i)))){const e=t.firstElementChild;e instanceof HTMLCanvasElement&&(o=e.getContext("2d"))}if(o&&o.canvas.style.transform===e?(this.container=t,this.context=o,this.containerReused=!0):this.containerReused?(this.container=null,this.context=null,this.containerReused=!1):this.container&&(this.container.style.backgroundColor=null),!this.container){s=document.createElement("div"),s.className=n;let t=s.style;t.position="absolute",t.width="100%",t.height="100%",o=zi();const e=o.canvas;s.appendChild(e),t=e.style,t.position="absolute",t.left="0",t.transformOrigin="top left",this.container=s,this.context=o}this.containerReused||!i||this.container.style.backgroundColor||(this.container.style.backgroundColor=i)}clipUnrotated(t,e,i){const n=Zt(i),s=Bt(i),o=zt(i),r=kt(i);Ze(e.coordinateToPixelTransform,n),Ze(e.coordinateToPixelTransform,s),Ze(e.coordinateToPixelTransform,o),Ze(e.coordinateToPixelTransform,r);const a=this.inversePixelTransform;Ze(a,n),Ze(a,s),Ze(a,o),Ze(a,r),t.save(),t.beginPath(),t.moveTo(Math.round(n[0]),Math.round(n[1])),t.lineTo(Math.round(s[0]),Math.round(s[1])),t.lineTo(Math.round(o[0]),Math.round(o[1])),t.lineTo(Math.round(r[0]),Math.round(r[1])),t.clip()}dispatchRenderEvent_(t,e,i){const n=this.getLayer();if(n.hasListener(t)){const s=new Ii(t,this.inversePixelTransform,i,e);n.dispatchEvent(s)}}preRender(t,e){this.frameState=e,this.dispatchRenderEvent_("prerender",t,e)}postRender(t,e){this.dispatchRenderEvent_("postrender",t,e)}getRenderTransform(t,e,i,n,s,o,r){const a=s/2,l=o/2,h=n/e,c=-h,u=-t[0]+r,d=-t[1];return Be(this.tempTransform,a,l,h,c,-i,u,d)}disposeInternal(){delete this.frameState,super.disposeInternal()}},Vi=class extends d{constructor(t,e,i){super(),i=i||{},this.tileCoord=t,this.state=e,this.interimTile=null,this.key="",this.transition_=void 0===i.transition?250:i.transition,this.transitionStarts_={},this.interpolate=!!i.interpolate}changed(){this.dispatchEvent(g)}release(){3===this.state&&this.setState(4)}getKey(){return this.key+"/"+this.tileCoord}getInterimTile(){if(!this.interimTile)return this;let t=this.interimTile;do{if(2==t.getState())return this.transition_=0,t;t=t.interimTile}while(t);return this}refreshInterimChain(){if(!this.interimTile)return;let t=this.interimTile,e=this;do{if(2==t.getState()){t.interimTile=null;break}1==t.getState()?e=t:0==t.getState()?e.interimTile=t.interimTile:e=t,t=e.interimTile}while(t)}getTileCoord(){return this.tileCoord}getState(){return this.state}setState(t){if(3!==this.state&&this.state>t)throw new Error("Tile load sequence violation");this.state=t,this.changed()}load(){b()}getAlpha(t,e){if(!this.transition_)return 1;let i=this.transitionStarts_[t];if(i){if(-1===i)return 1}else i=e,this.transitionStarts_[t]=i;const n=e-i+1e3/60;return n>=this.transition_?1:Le(n/this.transition_)}inTransition(t){return!!this.transition_&&-1!==this.transitionStarts_[t]}endTransition(t){this.transition_&&(this.transitionStarts_[t]=-1)}};const Zi=class extends Vi{constructor(t,e,i,n,s,o){super(t,e,o),this.crossOrigin_=n,this.src_=i,this.key=i,this.image_=new Image,null!==n&&(this.image_.crossOrigin=n),this.unlisten_=null,this.tileLoadFunction_=s}getImage(){return this.image_}setImage(t){this.image_=t,this.state=2,this.unlistenImage_(),this.changed()}handleImageError_(){this.state=3,this.unlistenImage_(),this.image_=function(){const t=zi(1,1);return t.fillStyle="rgba(0,0,0,0)",t.fillRect(0,0,1,1),t.canvas}(),this.changed()}handleImageLoad_(){const t=this.image_;t.naturalWidth&&t.naturalHeight?this.state=2:this.state=4,this.unlistenImage_(),this.changed()}load(){3==this.state&&(this.state=0,this.image_=new Image,null!==this.crossOrigin_&&(this.image_.crossOrigin=this.crossOrigin_)),0==this.state&&(this.state=1,this.changed(),this.tileLoadFunction_(this,this.src_),this.unlisten_=function(t,e,i){const n=t;let s=!0,o=!1,r=!1;const a=[x(n,"load",(function(){r=!0,o||e()}))];return n.src&&Ke?(o=!0,n.decode().then((function(){s&&e()})).catch((function(t){s&&(r?e():i())}))):a.push(x(n,"error",i)),function(){s=!1,a.forEach(E)}}(this.image_,this.handleImageLoad_.bind(this),this.handleImageError_.bind(this)))}unlistenImage_(){this.unlisten_&&(this.unlisten_(),this.unlisten_=null)}},Bi=class{constructor(t,e,i,n,s,o){this.sourceProj_=t,this.targetProj_=e;let r={};const a=pe(this.targetProj_,this.sourceProj_);this.transformInv_=function(t){const e=t[0]+"/"+t[1];return r[e]||(r[e]=a(t)),r[e]},this.maxSourceExtent_=n,this.errorThresholdSquared_=s*s,this.triangles_=[],this.wrapsXInSource_=!1,this.canWrapXInSource_=this.sourceProj_.canWrapX()&&!!n&&!!this.sourceProj_.getExtent()&&Ut(n)>=Ut(this.sourceProj_.getExtent()),this.sourceWorldWidth_=this.sourceProj_.getExtent()?Ut(this.sourceProj_.getExtent()):null,this.targetWorldWidth_=this.targetProj_.getExtent()?Ut(this.targetProj_.getExtent()):null;const l=Zt(i),h=Bt(i),c=zt(i),u=kt(i),d=this.transformInv_(l),g=this.transformInv_(h),p=this.transformInv_(c),m=this.transformInv_(u),_=10+(o?Math.max(0,Math.ceil(Math.log2(Ot(i)/(o*o*256*256)))):0);if(this.addQuad_(l,h,c,u,d,g,p,m,_),this.wrapsXInSource_){let t=1/0;this.triangles_.forEach((function(e,i,n){t=Math.min(t,e.source[0][0],e.source[1][0],e.source[2][0])})),this.triangles_.forEach((e=>{if(Math.max(e.source[0][0],e.source[1][0],e.source[2][0])-t>this.sourceWorldWidth_/2){const i=[[e.source[0][0],e.source[0][1]],[e.source[1][0],e.source[1][1]],[e.source[2][0],e.source[2][1]]];i[0][0]-t>this.sourceWorldWidth_/2&&(i[0][0]-=this.sourceWorldWidth_),i[1][0]-t>this.sourceWorldWidth_/2&&(i[1][0]-=this.sourceWorldWidth_),i[2][0]-t>this.sourceWorldWidth_/2&&(i[2][0]-=this.sourceWorldWidth_);const n=Math.min(i[0][0],i[1][0],i[2][0]);Math.max(i[0][0],i[1][0],i[2][0])-n<this.sourceWorldWidth_/2&&(e.source=i)}}))}r={}}addTriangle_(t,e,i,n,s,o){this.triangles_.push({source:[n,s,o],target:[t,e,i]})}addQuad_(t,e,i,n,s,o,r,a,l){const h=Et([s,o,r,a]),c=this.sourceWorldWidth_?Ut(h)/this.sourceWorldWidth_:null,u=this.sourceWorldWidth_,d=this.sourceProj_.canWrapX()&&c>.5&&c<1;let g=!1;if(l>0&&(this.targetProj_.isGlobal()&&this.targetWorldWidth_&&(g=Ut(Et([t,e,i,n]))/this.targetWorldWidth_>.25||g),!d&&this.sourceProj_.isGlobal()&&c&&(g=c>.25||g)),!g&&this.maxSourceExtent_&&isFinite(h[0])&&isFinite(h[1])&&isFinite(h[2])&&isFinite(h[3])&&!Xt(h,this.maxSourceExtent_))return;let p=0;if(!(g||isFinite(s[0])&&isFinite(s[1])&&isFinite(o[0])&&isFinite(o[1])&&isFinite(r[0])&&isFinite(r[1])&&isFinite(a[0])&&isFinite(a[1])))if(l>0)g=!0;else if(p=(isFinite(s[0])&&isFinite(s[1])?0:8)+(isFinite(o[0])&&isFinite(o[1])?0:4)+(isFinite(r[0])&&isFinite(r[1])?0:2)+(isFinite(a[0])&&isFinite(a[1])?0:1),1!=p&&2!=p&&4!=p&&8!=p)return;if(l>0){if(!g){const e=[(t[0]+i[0])/2,(t[1]+i[1])/2],n=this.transformInv_(e);let o;o=d?(W(s[0],u)+W(r[0],u))/2-W(n[0],u):(s[0]+r[0])/2-n[0];const a=(s[1]+r[1])/2-n[1];g=o*o+a*a>this.errorThresholdSquared_}if(g){if(Math.abs(t[0]-i[0])<=Math.abs(t[1]-i[1])){const h=[(e[0]+i[0])/2,(e[1]+i[1])/2],c=this.transformInv_(h),u=[(n[0]+t[0])/2,(n[1]+t[1])/2],d=this.transformInv_(u);this.addQuad_(t,e,h,u,s,o,c,d,l-1),this.addQuad_(u,h,i,n,d,c,r,a,l-1)}else{const h=[(t[0]+e[0])/2,(t[1]+e[1])/2],c=this.transformInv_(h),u=[(i[0]+n[0])/2,(i[1]+n[1])/2],d=this.transformInv_(u);this.addQuad_(t,h,u,n,s,c,d,a,l-1),this.addQuad_(h,e,i,u,c,o,r,d,l-1)}return}}if(d){if(!this.canWrapXInSource_)return;this.wrapsXInSource_=!0}0==(11&p)&&this.addTriangle_(t,i,n,s,r,a),0==(14&p)&&this.addTriangle_(t,i,e,s,r,o),p&&(0==(13&p)&&this.addTriangle_(e,n,t,o,a,s),0==(7&p)&&this.addTriangle_(e,n,i,o,a,r))}calculateSourceExtent(){const t=[1/0,1/0,-1/0,-1/0];return this.triangles_.forEach((function(e,i,n){const s=e.source;It(t,s[0]),It(t,s[1]),It(t,s[2])})),t}getTriangles(){return this.triangles_}};let Ui;const Xi=[];function Hi(t,e,i,n,s){t.beginPath(),t.moveTo(0,0),t.lineTo(e,i),t.lineTo(n,s),t.closePath(),t.save(),t.clip(),t.fillRect(0,0,Math.max(e,n)+1,Math.max(i,s)),t.restore()}function Wi(t,e){return Math.abs(t[4*e]-210)>2||Math.abs(t[4*e+3]-191.25)>2}function Yi(t,e,i,n){const s=me(i,e,t);let o=he(e,n,i);const r=e.getMetersPerUnit();void 0!==r&&(o*=r);const a=t.getMetersPerUnit();void 0!==a&&(o/=a);const l=t.getExtent();if(!l||wt(l,s)){const e=he(t,o,s)/o;isFinite(e)&&e>0&&(o/=e)}return o}const qi=class extends Vi{constructor(t,e,i,n,s,o,r,a,l,h,c,u){super(s,0,{interpolate:!!u}),this.renderEdges_=void 0!==c&&c,this.pixelRatio_=r,this.gutter_=a,this.canvas_=null,this.sourceTileGrid_=e,this.targetTileGrid_=n,this.wrappedTileCoord_=o||s,this.sourceTiles_=[],this.sourcesListenerKeys_=null,this.sourceZ_=0;const d=n.getTileCoordExtent(this.wrappedTileCoord_),g=this.targetTileGrid_.getExtent();let p=this.sourceTileGrid_.getExtent();const m=g?Vt(d,g):d;if(0===Ot(m))return void(this.state=4);const _=t.getExtent();_&&(p=p?Vt(p,_):_);const f=n.getResolution(this.wrappedTileCoord_[0]),v=function(t,e,i,n){const s=Nt(i);let o=Yi(t,e,s,n);return(!isFinite(o)||o<=0)&&At(i,(function(i){return o=Yi(t,e,i,n),isFinite(o)&&o>0})),o}(t,i,m,f);if(!isFinite(v)||v<=0)return void(this.state=4);const y=void 0!==h?h:.5;if(this.triangulation_=new Bi(t,i,m,p,v*y,f),0===this.triangulation_.getTriangles().length)return void(this.state=4);this.sourceZ_=e.getZForResolution(v);let C=this.triangulation_.calculateSourceExtent();if(p&&(t.canWrapX()?(C[1]=Z(C[1],p[1],p[3]),C[3]=Z(C[3],p[1],p[3])):C=Vt(C,p)),Ot(C)){const t=e.getTileRangeForExtentAndZ(C,this.sourceZ_);for(let e=t.minX;e<=t.maxX;e++)for(let i=t.minY;i<=t.maxY;i++){const t=l(this.sourceZ_,e,i,r);t&&this.sourceTiles_.push(t)}0===this.sourceTiles_.length&&(this.state=4)}else this.state=4}getImage(){return this.canvas_}reproject_(){const t=[];if(this.sourceTiles_.forEach((e=>{e&&2==e.getState()&&t.push({extent:this.sourceTileGrid_.getTileCoordExtent(e.tileCoord),image:e.getImage()})})),this.sourceTiles_.length=0,0===t.length)this.state=3;else{const e=this.wrappedTileCoord_[0],i=this.targetTileGrid_.getTileSize(e),n="number"==typeof i?i:i[0],s="number"==typeof i?i:i[1],o=this.targetTileGrid_.getResolution(e),r=this.sourceTileGrid_.getResolution(this.sourceZ_),a=this.targetTileGrid_.getTileCoordExtent(this.wrappedTileCoord_);this.canvas_=function(t,e,i,n,s,o,r,a,l,h,c,u){const d=zi(Math.round(i*t),Math.round(i*e),Xi);if(u||(d.imageSmoothingEnabled=!1),0===l.length)return d.canvas;function g(t){return Math.round(t*i)/i}d.scale(i,i),d.globalCompositeOperation="lighter";const p=[1/0,1/0,-1/0,-1/0];l.forEach((function(t,e,i){var n,s;n=p,(s=t.extent)[0]<n[0]&&(n[0]=s[0]),s[2]>n[2]&&(n[2]=s[2]),s[1]<n[1]&&(n[1]=s[1]),s[3]>n[3]&&(n[3]=s[3])}));const m=Ut(p),_=Kt(p),f=zi(Math.round(i*m/n),Math.round(i*_/n),Xi);u||(f.imageSmoothingEnabled=!1);const v=i/n;l.forEach((function(t,e,i){const n=t.extent[0]-p[0],s=-(t.extent[3]-p[3]),o=Ut(t.extent),r=Kt(t.extent);t.image.width>0&&t.image.height>0&&f.drawImage(t.image,h,h,t.image.width-2*h,t.image.height-2*h,n*v,s*v,o*v,r*v)}));const y=Zt(r);return a.getTriangles().forEach((function(t,e,s){const r=t.source,a=t.target;let l=r[0][0],h=r[0][1],c=r[1][0],m=r[1][1],_=r[2][0],v=r[2][1];const C=g((a[0][0]-y[0])/o),x=g(-(a[0][1]-y[1])/o),E=g((a[1][0]-y[0])/o),T=g(-(a[1][1]-y[1])/o),w=g((a[2][0]-y[0])/o),b=g(-(a[2][1]-y[1])/o),R=l,S=h;l=0,h=0,c-=R,m-=S,_-=R,v-=S;const P=function(t){const e=t.length;for(let i=0;i<e;i++){let n=i,s=Math.abs(t[i][i]);for(let o=i+1;o<e;o++){const e=Math.abs(t[o][i]);e>s&&(s=e,n=o)}if(0===s)return null;const o=t[n];t[n]=t[i],t[i]=o;for(let n=i+1;n<e;n++){const s=-t[n][i]/t[i][i];for(let o=i;o<e+1;o++)i==o?t[n][o]=0:t[n][o]+=s*t[i][o]}}const i=new Array(e);for(let n=e-1;n>=0;n--){i[n]=t[n][e]/t[n][n];for(let s=n-1;s>=0;s--)t[s][e]-=t[s][n]*i[n]}return i}([[c,m,0,0,E-C],[_,v,0,0,w-C],[0,0,c,m,T-x],[0,0,_,v,b-x]]);if(P){if(d.save(),d.beginPath(),function(){if(void 0===Ui){const t=zi(6,6,Xi);t.globalCompositeOperation="lighter",t.fillStyle="rgba(210, 0, 0, 0.75)",Hi(t,4,5,4,0),Hi(t,4,5,0,5);const e=t.getImageData(0,0,3,3).data;Ui=Wi(e,0)||Wi(e,4)||Wi(e,8),Ni(t),Xi.push(t.canvas)}return Ui}()||!u){d.moveTo(E,T);const t=4,e=C-E,i=x-T;for(let n=0;n<t;n++)d.lineTo(E+g((n+1)*e/t),T+g(n*i/(t-1))),n!=t-1&&d.lineTo(E+g((n+1)*e/t),T+g((n+1)*i/(t-1)));d.lineTo(w,b)}else d.moveTo(E,T),d.lineTo(C,x),d.lineTo(w,b);d.clip(),d.transform(P[0],P[2],P[1],P[3],C,x),d.translate(p[0]-R,p[3]-S),d.scale(n/i,-n/i),d.drawImage(f.canvas,0,0),d.restore()}})),Ni(f),Xi.push(f.canvas),c&&(d.save(),d.globalCompositeOperation="source-over",d.strokeStyle="black",d.lineWidth=1,a.getTriangles().forEach((function(t,e,i){const n=t.target,s=(n[0][0]-y[0])/o,r=-(n[0][1]-y[1])/o,a=(n[1][0]-y[0])/o,l=-(n[1][1]-y[1])/o,h=(n[2][0]-y[0])/o,c=-(n[2][1]-y[1])/o;d.beginPath(),d.moveTo(a,l),d.lineTo(s,r),d.lineTo(h,c),d.closePath(),d.stroke()})),d.restore()),d.canvas}(n,s,this.pixelRatio_,r,this.sourceTileGrid_.getExtent(),o,a,this.triangulation_,t,this.gutter_,this.renderEdges_,this.interpolate),this.state=2}this.changed()}load(){if(0==this.state){this.state=1,this.changed();let t=0;this.sourcesListenerKeys_=[],this.sourceTiles_.forEach((e=>{const i=e.getState();if(0==i||1==i){t++;const i=C(e,g,(function(n){const s=e.getState();2!=s&&3!=s&&4!=s||(E(i),t--,0===t&&(this.unlistenSources_(),this.reproject_()))}),this);this.sourcesListenerKeys_.push(i)}})),0===t?setTimeout(this.reproject_.bind(this),0):this.sourceTiles_.forEach((function(t,e,i){0==t.getState()&&t.load()}))}}unlistenSources_(){this.sourcesListenerKeys_.forEach(E),this.sourcesListenerKeys_=null}release(){this.canvas_&&(Ni(this.canvas_.getContext("2d")),Xi.push(this.canvas_),this.canvas_=null),super.release()}};class Qi{constructor(t,e,i,n){this.minX=t,this.maxX=e,this.minY=i,this.maxY=n}contains(t){return this.containsXY(t[1],t[2])}containsTileRange(t){return this.minX<=t.minX&&t.maxX<=this.maxX&&this.minY<=t.minY&&t.maxY<=this.maxY}containsXY(t,e){return this.minX<=t&&t<=this.maxX&&this.minY<=e&&e<=this.maxY}equals(t){return this.minX==t.minX&&this.minY==t.minY&&this.maxX==t.maxX&&this.maxY==t.maxY}extend(t){t.minX<this.minX&&(this.minX=t.minX),t.maxX>this.maxX&&(this.maxX=t.maxX),t.minY<this.minY&&(this.minY=t.minY),t.maxY>this.maxY&&(this.maxY=t.maxY)}getHeight(){return this.maxY-this.minY+1}getSize(){return[this.getWidth(),this.getHeight()]}getWidth(){return this.maxX-this.minX+1}intersects(t){return this.minX<=t.maxX&&this.maxX>=t.minX&&this.minY<=t.maxY&&this.maxY>=t.minY}}function $i(t,e,i,n,s){return void 0!==s?(s.minX=t,s.maxX=e,s.minY=i,s.maxY=n,s):new Qi(t,e,i,n)}const Ji=Qi;function tn(t){return t[0]>0&&t[1]>0}function en(t,e){return Array.isArray(t)?t:(void 0===e?e=[t,t]:(e[0]=t,e[1]=t),e)}const nn=class extends Ki{constructor(t){super(t),this.extentChanged=!0,this.renderedExtent_=null,this.renderedPixelRatio,this.renderedProjection=null,this.renderedRevision,this.renderedTiles=[],this.newTiles_=!1,this.tmpExtent=[1/0,1/0,-1/0,-1/0],this.tmpTileRange_=new Ji(0,0,0,0)}isDrawableTile(t){const e=this.getLayer(),i=t.getState(),n=e.getUseInterimTilesOnError();return 2==i||4==i||3==i&&!n}getTile(t,e,i,n){const s=n.pixelRatio,o=n.viewState.projection,r=this.getLayer();let a=r.getSource().getTile(t,e,i,s,o);return 3==a.getState()&&r.getUseInterimTilesOnError()&&r.getPreload()>0&&(this.newTiles_=!0),this.isDrawableTile(a)||(a=a.getInterimTile()),a}getData(t){const e=this.frameState;if(!e)return null;const i=this.getLayer(),n=Ze(e.pixelToCoordinateTransform,t.slice()),s=i.getExtent();if(s&&!wt(s,n))return null;const o=e.pixelRatio,r=e.viewState.projection,a=e.viewState,l=i.getRenderSource(),h=l.getTileGridForProjection(a.projection),c=l.getTilePixelRatio(e.pixelRatio);for(let t=h.getZForResolution(a.resolution);t>=h.getMinZoom();--t){const e=h.getTileCoordForCoordAndZ(n,t),i=l.getTile(t,e[1],e[2],o,r);if(!(i instanceof Zi||i instanceof qi)||i instanceof qi&&4===i.getState())return null;if(2!==i.getState())continue;const s=h.getOrigin(t),u=en(h.getTileSize(t)),d=h.getResolution(t),g=Math.floor(c*((n[0]-s[0])/d-e[1]*u[0])),p=Math.floor(c*((s[1]-n[1])/d-e[2]*u[1])),m=Math.round(c*l.getGutterForProjection(a.projection));return this.getImageData(i.getImage(),g+m,p+m)}return null}loadedTileCallback(t,e,i){return!!this.isDrawableTile(i)&&super.loadedTileCallback(t,e,i)}prepareFrame(t){return!!this.getLayer().getSource()}renderFrame(t,e){const i=t.layerStatesArray[t.layerIndex],n=t.viewState,o=n.projection,r=n.resolution,a=n.center,l=n.rotation,h=t.pixelRatio,c=this.getLayer(),u=c.getSource(),d=u.getRevision(),g=u.getTileGridForProjection(o),p=g.getZForResolution(r,u.zDirection),m=g.getResolution(p);let _=t.extent;const f=t.viewState.resolution,v=u.getTilePixelRatio(h),y=Math.round(Ut(_)/f*h),C=Math.round(Kt(_)/f*h),x=i.extent&&Ce(i.extent);x&&(_=Vt(_,Ce(i.extent)));const E=m*y/2/v,T=m*C/2/v,w=[a[0]-E,a[1]-T,a[0]+E,a[1]+T],b=g.getTileRangeForExtentAndZ(_,p),R={};R[p]={};const P=this.createLoadedTileFinder(u,o,R),M=this.tmpExtent,I=this.tmpTileRange_;this.newTiles_=!1;const L=l?Gt(n.center,f,l,t.size):void 0;for(let e=b.minX;e<=b.maxX;++e)for(let n=b.minY;n<=b.maxY;++n){if(l&&!g.tileCoordIntersectsViewport([p,e,n],L))continue;const s=this.getTile(p,e,n,t);if(this.isDrawableTile(s)){const e=S(this);if(2==s.getState()){R[p][s.tileCoord.toString()]=s;let t=s.inTransition(e);t&&1!==i.opacity&&(s.endTransition(e),t=!1),this.newTiles_||!t&&this.renderedTiles.includes(s)||(this.newTiles_=!0)}if(1===s.getAlpha(e,t.time))continue}const o=g.getTileCoordChildTileRange(s.tileCoord,I,M);let r=!1;o&&(r=P(p+1,o)),r||g.forEachTileCoordParentTileRange(s.tileCoord,P,I,M)}const F=m/r*h/v;Be(this.pixelTransform,t.size[0]/2,t.size[1]/2,1/h,1/h,l,-y/2,-C/2);const A=function(t){const e="matrix("+t.join(", ")+")";if(Ge)return e;const i=Xe||(Xe=document.createElement("div"));return i.style.transform=e,i.style.transform}(this.pixelTransform);this.useContainer(e,A,this.getBackground(t));const O=this.context,k=O.canvas;Ue(this.inversePixelTransform,this.pixelTransform),Be(this.tempTransform,y/2,C/2,F,F,0,-y/2,-C/2),k.width!=y||k.height!=C?(k.width=y,k.height=C):this.containerReused||O.clearRect(0,0,y,C),x&&this.clipUnrotated(O,t,x),u.getInterpolate()||(O.imageSmoothingEnabled=!1),this.preRender(O,t),this.renderedTiles.length=0;let z,N,D,j=Object.keys(R).map(Number);j.sort(s),1!==i.opacity||this.containerReused&&!u.getOpaque(t.viewState.projection)?(z=[],N=[]):j=j.reverse();for(let e=j.length-1;e>=0;--e){const i=j[e],n=u.getTilePixelSize(i,h,o),s=g.getResolution(i)/m,r=n[0]*s*F,a=n[1]*s*F,l=g.getTileCoordForCoordAndZ(Zt(w),i),c=g.getTileCoordExtent(l),d=Ze(this.tempTransform,[v*(c[0]-w[0])/m,v*(w[3]-c[3])/m]),_=v*u.getGutterForProjection(o),f=R[i];for(const e in f){const n=f[e],s=n.tileCoord,o=l[1]-s[1],h=Math.round(d[0]-(o-1)*r),c=l[2]-s[2],g=Math.round(d[1]-(c-1)*a),m=Math.round(d[0]-o*r),v=Math.round(d[1]-c*a),y=h-m,C=g-v,x=p===i,E=x&&1!==n.getAlpha(S(this),t.time);let T=!1;if(!E)if(z){D=[m,v,m+y,v,m+y,v+C,m,v+C];for(let t=0,e=z.length;t<e;++t)if(p!==i&&i<N[t]){const e=z[t];Xt([m,v,m+y,v+C],[e[0],e[3],e[4],e[7]])&&(T||(O.save(),T=!0),O.beginPath(),O.moveTo(D[0],D[1]),O.lineTo(D[2],D[3]),O.lineTo(D[4],D[5]),O.lineTo(D[6],D[7]),O.moveTo(e[6],e[7]),O.lineTo(e[4],e[5]),O.lineTo(e[2],e[3]),O.lineTo(e[0],e[1]),O.clip())}z.push(D),N.push(i)}else O.clearRect(m,v,y,C);this.drawTileImage(n,t,m,v,y,C,_,x),z&&!E?(T&&O.restore(),this.renderedTiles.unshift(n)):this.renderedTiles.push(n),this.updateUsedTiles(t.usedTiles,u,n)}}return this.renderedRevision=d,this.renderedResolution=m,this.extentChanged=!this.renderedExtent_||!Mt(this.renderedExtent_,w),this.renderedExtent_=w,this.renderedPixelRatio=h,this.renderedProjection=o,this.manageTilePyramid(t,u,g,h,o,_,p,c.getPreload()),this.scheduleExpireCache(t,u),this.postRender(O,t),i.extent&&O.restore(),O.imageSmoothingEnabled=!0,A!==k.style.transform&&(k.style.transform=A),this.container}drawTileImage(t,e,i,n,s,o,r,a){const l=this.getTileImage(t);if(!l)return;const h=S(this),c=e.layerStatesArray[e.layerIndex],u=c.opacity*(a?t.getAlpha(h,e.time):1),d=u!==this.context.globalAlpha;d&&(this.context.save(),this.context.globalAlpha=u),this.context.drawImage(l,r,r,l.width-2*r,l.height-2*r,i,n,s,o),d&&this.context.restore(),u!==c.opacity?e.animate=!0:a&&t.endTransition(h)}getImage(){const t=this.context;return t?t.canvas:null}getTileImage(t){return t.getImage()}scheduleExpireCache(t,e){if(e.canExpireCache()){const i=function(t,e,i){const n=S(t);n in i.usedTiles&&t.expireCache(i.viewState.projection,i.usedTiles[n])}.bind(null,e);t.postRenderFunctions.push(i)}}updateUsedTiles(t,e,i){const n=S(e);n in t||(t[n]={}),t[n][i.getKey()]=!0}manageTilePyramid(t,e,i,n,s,o,r,a,l){const h=S(e);h in t.wantedTiles||(t.wantedTiles[h]={});const c=t.wantedTiles[h],u=t.tileQueue,d=i.getMinZoom(),g=t.viewState.rotation,p=g?Gt(t.viewState.center,t.viewState.resolution,g,t.size):void 0;let m,_,f,v,y,C,x=0;for(C=d;C<=r;++C)for(_=i.getTileRangeForExtentAndZ(o,C,_),f=i.getResolution(C),v=_.minX;v<=_.maxX;++v)for(y=_.minY;y<=_.maxY;++y)g&&!i.tileCoordIntersectsViewport([C,v,y],p)||(r-C<=a?(++x,m=e.getTile(C,v,y,n,s),0==m.getState()&&(c[m.getKey()]=!0,u.isKeyQueued(m.getKey())||u.enqueue([m,h,i.getTileCoordCenter(m.tileCoord),f])),void 0!==l&&l(m)):e.useTile(C,v,y,s));e.updateCacheSize(x,s)}},sn="add",on="remove",rn="length";class an extends e{constructor(t,e,i){super(t),this.element=e,this.index=i}}const ln=class extends M{constructor(t,e){if(super(),this.on,this.once,this.un,e=e||{},this.unique_=!!e.unique,this.array_=t||[],this.unique_)for(let t=0,e=this.array_.length;t<e;++t)this.assertUnique_(this.array_[t],t);this.updateLength_()}clear(){for(;this.getLength()>0;)this.pop()}extend(t){for(let e=0,i=t.length;e<i;++e)this.push(t[e]);return this}forEach(t){const e=this.array_;for(let i=0,n=e.length;i<n;++i)t(e[i],i,e)}getArray(){return this.array_}item(t){return this.array_[t]}getLength(){return this.get(rn)}insertAt(t,e){if(t<0||t>this.getLength())throw new Error("Index out of bounds: "+t);this.unique_&&this.assertUnique_(e),this.array_.splice(t,0,e),this.updateLength_(),this.dispatchEvent(new an(sn,e,t))}pop(){return this.removeAt(this.getLength()-1)}push(t){this.unique_&&this.assertUnique_(t);const e=this.getLength();return this.insertAt(e,t),this.getLength()}remove(t){const e=this.array_;for(let i=0,n=e.length;i<n;++i)if(e[i]===t)return this.removeAt(i)}removeAt(t){if(t<0||t>=this.getLength())return;const e=this.array_[t];return this.array_.splice(t,1),this.updateLength_(),this.dispatchEvent(new an(on,e,t)),e}setAt(t,e){if(t>=this.getLength())return void this.insertAt(t,e);if(t<0)throw new Error("Index out of bounds: "+t);this.unique_&&this.assertUnique_(e,t);const i=this.array_[t];this.array_[t]=e,this.dispatchEvent(new an(on,i,t)),this.dispatchEvent(new an(sn,e,t))}updateLength_(){this.set(rn,this.array_.length)}assertUnique_(t,e){for(let i=0,n=this.array_.length;i<n;++i)if(this.array_[i]===t&&i!==e)throw new K(58)}};function hn(t,e,i){return e+":"+t+":"+(i?function(t){return"string"==typeof t?t:function(t){let e=t[0];e!=(0|e)&&(e=e+.5|0);let i=t[1];i!=(0|i)&&(i=i+.5|0);let n=t[2];return n!=(0|n)&&(n=n+.5|0),"rgba("+e+","+i+","+n+","+(void 0===t[3]?1:Math.round(100*t[3])/100)+")"}(t)}(i):"null")}const cn=new class{constructor(){this.cache_={},this.cacheSize_=0,this.maxCacheSize_=32}clear(){this.cache_={},this.cacheSize_=0}canExpireCache(){return this.cacheSize_>this.maxCacheSize_}expire(){if(this.canExpireCache()){let t=0;for(const e in this.cache_){const i=this.cache_[e];0!=(3&t++)||i.hasListener()||(delete this.cache_[e],--this.cacheSize_)}}}get(t,e,i){const n=hn(t,e,i);return n in this.cache_?this.cache_[n]:null}set(t,e,i,n){const s=hn(t,e,i);this.cache_[s]=n,++this.cacheSize_}setSize(t){this.maxCacheSize_=t,this.expire()}};function un(t,e){cn.expire()}const dn=class extends n{constructor(t){super(),this.map_=t}dispatchRenderEvent(t,e){b()}calculateMatrices2D(t){const e=t.viewState,i=t.coordinateToPixelTransform,n=t.pixelToCoordinateTransform;Be(i,t.size[0]/2,t.size[1]/2,1/e.resolution,-1/e.resolution,-e.rotation,-e.center[0],-e.center[1]),Ue(n,i)}forEachFeatureAtCoordinate(t,e,i,n,s,o,r,a){let l;const h=e.viewState;function c(t,e,i,n){return s.call(o,e,t?i:null,n)}const u=h.projection,d=qt(t.slice(),u),g=[[0,0]];if(u.canWrapX()&&n){const t=Ut(u.getExtent());g.push([-t,0],[t,0])}const p=e.layerStatesArray,m=p.length,_=[],f=[];for(let n=0;n<g.length;n++)for(let s=m-1;s>=0;--s){const o=p[s],u=o.layer;if(u.hasRenderer()&&wi(o,h)&&r.call(a,u)){const s=u.getRenderer(),r=u.getSource();if(s&&r){const a=r.getWrapX()?d:t,h=c.bind(null,o.managed);f[0]=a[0]+g[n][0],f[1]=a[1]+g[n][1],l=s.forEachFeatureAtCoordinate(f,e,i,h,_)}if(l)return l}}if(0===_.length)return;const v=1/_.length;return _.forEach(((t,e)=>t.distanceSq+=e*v)),_.sort(((t,e)=>t.distanceSq-e.distanceSq)),_.some((t=>l=t.callback(t.feature,t.layer,t.geometry))),l}hasFeatureAtCoordinate(t,e,i,n,s,o){return void 0!==this.forEachFeatureAtCoordinate(t,e,i,n,l,this,s,o)}getMap(){return this.map_}renderFrame(t){b()}flushDeclutterItems(t){}scheduleExpireIconCache(t){cn.canExpireCache()&&t.postRenderFunctions.push(un)}},gn="ol-hidden",pn="ol-unselectable",mn="ol-control",_n="ol-collapsed",fn=(new RegExp(["^\\s*(?=(?:(?:[-a-z]+\\s*){0,2}(italic|oblique))?)","(?=(?:(?:[-a-z]+\\s*){0,2}(small-caps))?)","(?=(?:(?:[-a-z]+\\s*){0,2}(bold(?:er)?|lighter|[1-9]00 ))?)","(?:(?:normal|\\1|\\2|\\3)\\s*){0,3}((?:xx?-)?","(?:small|large)|medium|smaller|larger|[\\.\\d]+(?:\\%|in|[cem]m|ex|p[ctx]))","(?:\\s*\\/\\s*(normal|[\\.\\d]+(?:\\%|in|[cem]m|ex|p[ctx])?))","?\\s*([-,\\\"\\'\\sa-z]+?)\\s*$"].join(""),"i"),new M);!function(){const t=["monospace","serif"];t.length}();const vn=class extends dn{constructor(t){super(t),this.fontChangeListenerKey_=C(fn,i,t.redrawText.bind(t)),this.element_=document.createElement("div");const e=this.element_.style;e.position="absolute",e.width="100%",e.height="100%",e.zIndex="0",this.element_.className=pn+" ol-layers";const n=t.getViewport();n.insertBefore(this.element_,n.firstChild||null),this.children_=[],this.renderedVisible_=!0,this.declutterLayers_=[]}dispatchRenderEvent(t,e){const i=this.getMap();if(i.hasListener(t)){const n=new Ii(t,void 0,e);i.dispatchEvent(n)}}disposeInternal(){E(this.fontChangeListenerKey_),this.element_.parentNode.removeChild(this.element_),super.disposeInternal()}renderFrame(t){if(!t)return void(this.renderedVisible_&&(this.element_.style.display="none",this.renderedVisible_=!1));this.calculateMatrices2D(t),this.dispatchRenderEvent(tt,t);const e=t.layerStatesArray.sort((function(t,e){return t.zIndex-e.zIndex})),i=t.viewState;this.children_.length=0;const n=this.declutterLayers_;n.length=0;let s=null;for(let o=0,r=e.length;o<r;++o){const r=e[o];t.layerIndex=o;const a=r.layer,l=a.getSourceState();if(!wi(r,i)||"ready"!=l&&"undefined"!=l){a.unrender();continue}const h=a.render(t,s);h&&(h!==s&&(this.children_.push(h),s=h),"getDeclutter"in a&&n.push(a))}this.flushDeclutterItems(t),function(t,e){const i=t.childNodes;for(let n=0;;++n){const s=i[n],o=e[n];if(!s&&!o)break;s!==o&&(s?o?t.insertBefore(o,s):(t.removeChild(s),--n):t.appendChild(o))}}(this.element_,this.children_),this.dispatchRenderEvent("postcompose",t),this.renderedVisible_||(this.element_.style.display="",this.renderedVisible_=!0),this.scheduleExpireIconCache(t)}flushDeclutterItems(t){const e=this.declutterLayers_;for(let i=e.length-1;i>=0;--i)e[i].renderDeclutter(t);e.length=0}};class yn extends e{constructor(t,e){super(t),this.layer=e}}const Cn="layers";class xn extends J{constructor(t){t=t||{};const e=Object.assign({},t);delete e.layers;let i=t.layers;super(e),this.on,this.once,this.un,this.layersListenerKeys_=[],this.listenerKeys_={},this.addChangeListener(Cn,this.handleLayersChanged_),i?Array.isArray(i)?i=new ln(i.slice(),{unique:!0}):V("function"==typeof i.getArray,43):i=new ln(void 0,{unique:!0}),this.setLayers(i)}handleLayerChange_(){this.changed()}handleLayersChanged_(){this.layersListenerKeys_.forEach(E),this.layersListenerKeys_.length=0;const t=this.getLayers();this.layersListenerKeys_.push(C(t,sn,this.handleLayersAdd_,this),C(t,on,this.handleLayersRemove_,this));for(const t in this.listenerKeys_)this.listenerKeys_[t].forEach(E);u(this.listenerKeys_);const e=t.getArray();for(let t=0,i=e.length;t<i;t++){const i=e[t];this.registerLayerListeners_(i),this.dispatchEvent(new yn("addlayer",i))}this.changed()}registerLayerListeners_(t){const e=[C(t,i,this.handleLayerChange_,this),C(t,g,this.handleLayerChange_,this)];t instanceof xn&&e.push(C(t,"addlayer",this.handleLayerGroupAdd_,this),C(t,"removelayer",this.handleLayerGroupRemove_,this)),this.listenerKeys_[S(t)]=e}handleLayerGroupAdd_(t){this.dispatchEvent(new yn("addlayer",t.layer))}handleLayerGroupRemove_(t){this.dispatchEvent(new yn("removelayer",t.layer))}handleLayersAdd_(t){const e=t.element;this.registerLayerListeners_(e),this.dispatchEvent(new yn("addlayer",e)),this.changed()}handleLayersRemove_(t){const e=t.element,i=S(e);this.listenerKeys_[i].forEach(E),delete this.listenerKeys_[i],this.dispatchEvent(new yn("removelayer",e)),this.changed()}getLayers(){return this.get(Cn)}setLayers(t){const e=this.getLayers();if(e){const t=e.getArray();for(let e=0,i=t.length;e<i;++e)this.dispatchEvent(new yn("removelayer",t[e]))}this.set(Cn,t)}getLayersArray(t){return t=void 0!==t?t:[],this.getLayers().forEach((function(e){e.getLayersArray(t)})),t}getLayerStatesArray(t){const e=void 0!==t?t:[],i=e.length;this.getLayers().forEach((function(t){t.getLayerStatesArray(e)}));const n=this.getLayerState();let s=n.zIndex;t||void 0!==n.zIndex||(s=0);for(let t=i,o=e.length;t<o;t++){const i=e[t];i.opacity*=n.opacity,i.visible=i.visible&&n.visible,i.maxResolution=Math.min(i.maxResolution,n.maxResolution),i.minResolution=Math.max(i.minResolution,n.minResolution),i.minZoom=Math.max(i.minZoom,n.minZoom),i.maxZoom=Math.min(i.maxZoom,n.maxZoom),void 0!==n.extent&&(void 0!==i.extent?i.extent=Vt(i.extent,n.extent):i.extent=n.extent),void 0===i.zIndex&&(i.zIndex=s)}return e}getSourceState(){return"ready"}}const En=xn,Tn=class extends e{constructor(t,e,i){super(t),this.map=e,this.frameState=void 0!==i?i:null}},wn=class extends Tn{constructor(t,e,i,n,s,o){super(t,e,s),this.originalEvent=i,this.pixel_=null,this.coordinate_=null,this.dragging=void 0!==n&&n,this.activePointers=o}get pixel(){return this.pixel_||(this.pixel_=this.map.getEventPixel(this.originalEvent)),this.pixel_}set pixel(t){this.pixel_=t}get coordinate(){return this.coordinate_||(this.coordinate_=this.map.getCoordinateFromPixel(this.pixel)),this.coordinate_}set coordinate(t){this.coordinate_=t}preventDefault(){super.preventDefault(),"preventDefault"in this.originalEvent&&this.originalEvent.preventDefault()}stopPropagation(){super.stopPropagation(),"stopPropagation"in this.originalEvent&&this.originalEvent.stopPropagation()}},bn={SINGLECLICK:"singleclick",CLICK:m,DBLCLICK:"dblclick",POINTERDRAG:"pointerdrag",POINTERMOVE:"pointermove",POINTERDOWN:"pointerdown",POINTERUP:"pointerup",POINTEROVER:"pointerover",POINTEROUT:"pointerout",POINTERENTER:"pointerenter",POINTERLEAVE:"pointerleave",POINTERCANCEL:"pointercancel"},Rn="pointermove",Sn="pointerdown",Pn=class extends d{constructor(t,e){super(t),this.map_=t,this.clickTimeoutId_,this.emulateClicks_=!1,this.dragging_=!1,this.dragListenerKeys_=[],this.moveTolerance_=void 0===e?1:e,this.down_=null;const i=this.map_.getViewport();this.activePointers_=[],this.trackedTouches_={},this.element_=i,this.pointerdownListenerKey_=C(i,Sn,this.handlePointerDown_,this),this.originalPointerMoveEvent_,this.relayedListenerKey_=C(i,Rn,this.relayMoveEvent_,this),this.boundHandleTouchMove_=this.handleTouchMove_.bind(this),this.element_.addEventListener(v,this.boundHandleTouchMove_,!!Ve&&{passive:!1})}emulateClick_(t){let e=new wn(bn.CLICK,this.map_,t);this.dispatchEvent(e),void 0!==this.clickTimeoutId_?(clearTimeout(this.clickTimeoutId_),this.clickTimeoutId_=void 0,e=new wn(bn.DBLCLICK,this.map_,t),this.dispatchEvent(e)):this.clickTimeoutId_=setTimeout((()=>{this.clickTimeoutId_=void 0;const e=new wn(bn.SINGLECLICK,this.map_,t);this.dispatchEvent(e)}),250)}updateActivePointers_(t){const e=t,i=e.pointerId;if(e.type==bn.POINTERUP||e.type==bn.POINTERCANCEL){delete this.trackedTouches_[i];for(const t in this.trackedTouches_)if(this.trackedTouches_[t].target!==e.target){delete this.trackedTouches_[t];break}}else e.type!=bn.POINTERDOWN&&e.type!=bn.POINTERMOVE||(this.trackedTouches_[i]=e);this.activePointers_=Object.values(this.trackedTouches_)}handlePointerUp_(t){this.updateActivePointers_(t);const e=new wn(bn.POINTERUP,this.map_,t,void 0,void 0,this.activePointers_);this.dispatchEvent(e),this.emulateClicks_&&!e.defaultPrevented&&!this.dragging_&&this.isMouseActionButton_(t)&&this.emulateClick_(this.down_),0===this.activePointers_.length&&(this.dragListenerKeys_.forEach(E),this.dragListenerKeys_.length=0,this.dragging_=!1,this.down_=null)}isMouseActionButton_(t){return 0===t.button}handlePointerDown_(t){this.emulateClicks_=0===this.activePointers_.length,this.updateActivePointers_(t);const e=new wn(bn.POINTERDOWN,this.map_,t,void 0,void 0,this.activePointers_);if(this.dispatchEvent(e),this.down_=new PointerEvent(t.type,t),Object.defineProperty(this.down_,"target",{writable:!1,value:t.target}),0===this.dragListenerKeys_.length){const t=this.map_.getOwnerDocument();this.dragListenerKeys_.push(C(t,bn.POINTERMOVE,this.handlePointerMove_,this),C(t,bn.POINTERUP,this.handlePointerUp_,this),C(this.element_,bn.POINTERCANCEL,this.handlePointerUp_,this)),this.element_.getRootNode&&this.element_.getRootNode()!==t&&this.dragListenerKeys_.push(C(this.element_.getRootNode(),bn.POINTERUP,this.handlePointerUp_,this))}}handlePointerMove_(t){if(this.isMoving_(t)){this.updateActivePointers_(t),this.dragging_=!0;const e=new wn(bn.POINTERDRAG,this.map_,t,this.dragging_,void 0,this.activePointers_);this.dispatchEvent(e)}}relayMoveEvent_(t){this.originalPointerMoveEvent_=t;const e=!(!this.down_||!this.isMoving_(t));this.dispatchEvent(new wn(bn.POINTERMOVE,this.map_,t,e))}handleTouchMove_(t){const e=this.originalPointerMoveEvent_;e&&!e.defaultPrevented||"boolean"==typeof t.cancelable&&!0!==t.cancelable||t.preventDefault()}isMoving_(t){return this.dragging_||Math.abs(t.clientX-this.down_.clientX)>this.moveTolerance_||Math.abs(t.clientY-this.down_.clientY)>this.moveTolerance_}disposeInternal(){this.relayedListenerKey_&&(E(this.relayedListenerKey_),this.relayedListenerKey_=null),this.element_.removeEventListener(v,this.boundHandleTouchMove_),this.pointerdownListenerKey_&&(E(this.pointerdownListenerKey_),this.pointerdownListenerKey_=null),this.dragListenerKeys_.forEach(E),this.dragListenerKeys_.length=0,this.element_=null,super.disposeInternal()}},Mn="postrender",In="loadstart",Ln="loadend",Fn="layergroup",An="size",On="target",kn="view",zn=1/0,Nn=class{constructor(t,e){this.priorityFunction_=t,this.keyFunction_=e,this.elements_=[],this.priorities_=[],this.queuedElements_={}}clear(){this.elements_.length=0,this.priorities_.length=0,u(this.queuedElements_)}dequeue(){const t=this.elements_,e=this.priorities_,i=t[0];1==t.length?(t.length=0,e.length=0):(t[0]=t.pop(),e[0]=e.pop(),this.siftUp_(0));const n=this.keyFunction_(i);return delete this.queuedElements_[n],i}enqueue(t){V(!(this.keyFunction_(t)in this.queuedElements_),31);const e=this.priorityFunction_(t);return e!=zn&&(this.elements_.push(t),this.priorities_.push(e),this.queuedElements_[this.keyFunction_(t)]=!0,this.siftDown_(0,this.elements_.length-1),!0)}getCount(){return this.elements_.length}getLeftChildIndex_(t){return 2*t+1}getRightChildIndex_(t){return 2*t+2}getParentIndex_(t){return t-1>>1}heapify_(){let t;for(t=(this.elements_.length>>1)-1;t>=0;t--)this.siftUp_(t)}isEmpty(){return 0===this.elements_.length}isKeyQueued(t){return t in this.queuedElements_}isQueued(t){return this.isKeyQueued(this.keyFunction_(t))}siftUp_(t){const e=this.elements_,i=this.priorities_,n=e.length,s=e[t],o=i[t],r=t;for(;t<n>>1;){const s=this.getLeftChildIndex_(t),o=this.getRightChildIndex_(t),r=o<n&&i[o]<i[s]?o:s;e[t]=e[r],i[t]=i[r],t=r}e[t]=s,i[t]=o,this.siftDown_(r,t)}siftDown_(t,e){const i=this.elements_,n=this.priorities_,s=i[e],o=n[e];for(;e>t;){const t=this.getParentIndex_(e);if(!(n[t]>o))break;i[e]=i[t],n[e]=n[t],e=t}i[e]=s,n[e]=o}reprioritize(){const t=this.priorityFunction_,e=this.elements_,i=this.priorities_;let n=0;const s=e.length;let o,r,a;for(r=0;r<s;++r)o=e[r],a=t(o),a==zn?delete this.queuedElements_[this.keyFunction_(o)]:(i[n]=a,e[n++]=o);e.length=n,i.length=n,this.heapify_()}},Dn=class extends Nn{constructor(t,e){super((function(e){return t.apply(null,e)}),(function(t){return t[0].getKey()})),this.boundHandleTileChange_=this.handleTileChange.bind(this),this.tileChangeCallback_=e,this.tilesLoading_=0,this.tilesLoadingKeys_={}}enqueue(t){const e=super.enqueue(t);return e&&t[0].addEventListener(g,this.boundHandleTileChange_),e}getTilesLoading(){return this.tilesLoading_}handleTileChange(t){const e=t.target,i=e.getState();if(2===i||3===i||4===i){3!==i&&e.removeEventListener(g,this.boundHandleTileChange_);const t=e.getKey();t in this.tilesLoadingKeys_&&(delete this.tilesLoadingKeys_[t],--this.tilesLoading_),this.tileChangeCallback_()}}loadMoreTiles(t,e){let i,n,s,o=0;for(;this.tilesLoading_<t&&o<e&&this.getCount()>0;)n=this.dequeue()[0],s=n.getKey(),i=n.getState(),0!==i||s in this.tilesLoadingKeys_||(this.tilesLoadingKeys_[s]=!0,++this.tilesLoading_,++o,n.load())}},jn=class extends M{constructor(t){super();const e=t.element;!e||t.target||e.style.pointerEvents||(e.style.pointerEvents="auto"),this.element=e||null,this.target_=null,this.map_=null,this.listenerKeys=[],t.render&&(this.render=t.render),t.target&&this.setTarget(t.target)}disposeInternal(){ji(this.element),super.disposeInternal()}getMap(){return this.map_}setMap(t){this.map_&&ji(this.element);for(let t=0,e=this.listenerKeys.length;t<e;++t)E(this.listenerKeys[t]);this.listenerKeys.length=0,this.map_=t,t&&((this.target_?this.target_:t.getOverlayContainerStopEvent()).appendChild(this.element),this.render!==c&&this.listenerKeys.push(C(t,Mn,this.render,this)),t.render())}render(t){}setTarget(t){this.target_="string"==typeof t?document.getElementById(t):t}},Gn=class extends jn{constructor(t){t=t||{},super({element:document.createElement("div"),render:t.render,target:t.target}),this.ulElement_=document.createElement("ul"),this.collapsed_=void 0===t.collapsed||t.collapsed,this.userCollapsed_=this.collapsed_,this.overrideCollapsible_=void 0!==t.collapsible,this.collapsible_=void 0===t.collapsible||t.collapsible,this.collapsible_||(this.collapsed_=!1);const e=void 0!==t.className?t.className:"ol-attribution",i=void 0!==t.tipLabel?t.tipLabel:"Attributions",n=void 0!==t.expandClassName?t.expandClassName:e+"-expand",s=void 0!==t.collapseLabel?t.collapseLabel:"›",o=void 0!==t.collapseClassName?t.collapseClassName:e+"-collapse";"string"==typeof s?(this.collapseLabel_=document.createElement("span"),this.collapseLabel_.textContent=s,this.collapseLabel_.className=o):this.collapseLabel_=s;const r=void 0!==t.label?t.label:"i";"string"==typeof r?(this.label_=document.createElement("span"),this.label_.textContent=r,this.label_.className=n):this.label_=r;const a=this.collapsible_&&!this.collapsed_?this.collapseLabel_:this.label_;this.toggleButton_=document.createElement("button"),this.toggleButton_.setAttribute("type","button"),this.toggleButton_.setAttribute("aria-expanded",String(!this.collapsed_)),this.toggleButton_.title=i,this.toggleButton_.appendChild(a),this.toggleButton_.addEventListener(m,this.handleClick_.bind(this),!1);const l=e+" "+pn+" "+mn+(this.collapsed_&&this.collapsible_?" "+_n:"")+(this.collapsible_?"":" ol-uncollapsible"),h=this.element;h.className=l,h.appendChild(this.toggleButton_),h.appendChild(this.ulElement_),this.renderedAttributions_=[],this.renderedVisible_=!0}collectSourceAttributions_(t){const e=Array.from(new Set(this.getMap().getAllLayers().flatMap((e=>e.getAttributions(t))))),i=!this.getMap().getAllLayers().some((t=>t.getSource()&&!1===t.getSource().getAttributionsCollapsible()));return this.overrideCollapsible_||this.setCollapsible(i),e}updateElement_(t){if(!t)return void(this.renderedVisible_&&(this.element.style.display="none",this.renderedVisible_=!1));const e=this.collectSourceAttributions_(t),i=e.length>0;if(this.renderedVisible_!=i&&(this.element.style.display=i?"":"none",this.renderedVisible_=i),!a(e,this.renderedAttributions_)){!function(t){for(;t.lastChild;)t.removeChild(t.lastChild)}(this.ulElement_);for(let t=0,i=e.length;t<i;++t){const i=document.createElement("li");i.innerHTML=e[t],this.ulElement_.appendChild(i)}this.renderedAttributions_=e}}handleClick_(t){t.preventDefault(),this.handleToggle_(),this.userCollapsed_=this.collapsed_}handleToggle_(){this.element.classList.toggle(_n),this.collapsed_?Di(this.collapseLabel_,this.label_):Di(this.label_,this.collapseLabel_),this.collapsed_=!this.collapsed_,this.toggleButton_.setAttribute("aria-expanded",String(!this.collapsed_))}getCollapsible(){return this.collapsible_}setCollapsible(t){this.collapsible_!==t&&(this.collapsible_=t,this.element.classList.toggle("ol-uncollapsible"),this.userCollapsed_&&this.handleToggle_())}setCollapsed(t){this.userCollapsed_=t,this.collapsible_&&this.collapsed_!==t&&this.handleToggle_()}getCollapsed(){return this.collapsed_}render(t){this.updateElement_(t.frameState)}},Kn=class extends jn{constructor(t){t=t||{},super({element:document.createElement("div"),render:t.render,target:t.target});const e=void 0!==t.className?t.className:"ol-rotate",i=void 0!==t.label?t.label:"⇧",n=void 0!==t.compassClassName?t.compassClassName:"ol-compass";this.label_=null,"string"==typeof i?(this.label_=document.createElement("span"),this.label_.className=n,this.label_.textContent=i):(this.label_=i,this.label_.classList.add(n));const s=t.tipLabel?t.tipLabel:"Reset rotation",o=document.createElement("button");o.className=e+"-reset",o.setAttribute("type","button"),o.title=s,o.appendChild(this.label_),o.addEventListener(m,this.handleClick_.bind(this),!1);const r=e+" "+pn+" "+mn,a=this.element;a.className=r,a.appendChild(o),this.callResetNorth_=t.resetNorth?t.resetNorth:void 0,this.duration_=void 0!==t.duration?t.duration:250,this.autoHide_=void 0===t.autoHide||t.autoHide,this.rotation_=void 0,this.autoHide_&&this.element.classList.add(gn)}handleClick_(t){t.preventDefault(),void 0!==this.callResetNorth_?this.callResetNorth_():this.resetNorth_()}resetNorth_(){const t=this.getMap().getView();if(!t)return;const e=t.getRotation();void 0!==e&&(this.duration_>0&&e%(2*Math.PI)!=0?t.animate({rotation:0,duration:this.duration_,easing:Fe}):t.setRotation(0))}render(t){const e=t.frameState;if(!e)return;const i=e.viewState.rotation;if(i!=this.rotation_){const t="rotate("+i+"rad)";if(this.autoHide_){const t=this.element.classList.contains(gn);t||0!==i?t&&0!==i&&this.element.classList.remove(gn):this.element.classList.add(gn)}this.label_.style.transform=t}this.rotation_=i}},Vn=class extends jn{constructor(t){t=t||{},super({element:document.createElement("div"),target:t.target});const e=void 0!==t.className?t.className:"ol-zoom",i=void 0!==t.delta?t.delta:1,n=void 0!==t.zoomInClassName?t.zoomInClassName:e+"-in",s=void 0!==t.zoomOutClassName?t.zoomOutClassName:e+"-out",o=void 0!==t.zoomInLabel?t.zoomInLabel:"+",r=void 0!==t.zoomOutLabel?t.zoomOutLabel:"–",a=void 0!==t.zoomInTipLabel?t.zoomInTipLabel:"Zoom in",l=void 0!==t.zoomOutTipLabel?t.zoomOutTipLabel:"Zoom out",h=document.createElement("button");h.className=n,h.setAttribute("type","button"),h.title=a,h.appendChild("string"==typeof o?document.createTextNode(o):o),h.addEventListener(m,this.handleClick_.bind(this,i),!1);const c=document.createElement("button");c.className=s,c.setAttribute("type","button"),c.title=l,c.appendChild("string"==typeof r?document.createTextNode(r):r),c.addEventListener(m,this.handleClick_.bind(this,-i),!1);const u=e+" "+pn+" "+mn,d=this.element;d.className=u,d.appendChild(h),d.appendChild(c),this.duration_=void 0!==t.duration?t.duration:250}handleClick_(t,e){e.preventDefault(),this.zoomByDelta_(t)}zoomByDelta_(t){const e=this.getMap().getView();if(!e)return;const i=e.getZoom();if(void 0!==i){const n=e.getConstrainedZoom(i+t);this.duration_>0?(e.getAnimating()&&e.cancelAnimations(),e.animate({zoom:n,duration:this.duration_,easing:Fe})):e.setZoom(n)}}},Zn="active";function Bn(t,e,i,n){const s=t.getZoom();if(void 0===s)return;const o=t.getConstrainedZoom(s+e),r=t.getResolutionForZoom(o);t.getAnimating()&&t.cancelAnimations(),t.animate({resolution:r,anchor:i,duration:void 0!==n?n:250,easing:Fe})}const Un=class extends M{constructor(t){super(),this.on,this.once,this.un,t&&t.handleEvent&&(this.handleEvent=t.handleEvent),this.map_=null,this.setActive(!0)}getActive(){return this.get(Zn)}getMap(){return this.map_}handleEvent(t){return!0}setActive(t){this.set(Zn,t)}setMap(t){this.map_=t}},Xn=class extends Un{constructor(t){super(),t=t||{},this.delta_=t.delta?t.delta:1,this.duration_=void 0!==t.duration?t.duration:250}handleEvent(t){let e=!1;if(t.type==bn.DBLCLICK){const i=t.originalEvent,n=t.map,s=t.coordinate,o=i.shiftKey?-this.delta_:this.delta_;Bn(n.getView(),o,s,this.duration_),i.preventDefault(),e=!0}return!e}};function Hn(t){const e=t.length;let i=0,n=0;for(let s=0;s<e;s++)i+=t[s].clientX,n+=t[s].clientY;return{clientX:i/e,clientY:n/e}}const Wn=class extends Un{constructor(t){super(t=t||{}),t.handleDownEvent&&(this.handleDownEvent=t.handleDownEvent),t.handleDragEvent&&(this.handleDragEvent=t.handleDragEvent),t.handleMoveEvent&&(this.handleMoveEvent=t.handleMoveEvent),t.handleUpEvent&&(this.handleUpEvent=t.handleUpEvent),t.stopDown&&(this.stopDown=t.stopDown),this.handlingDownUpSequence=!1,this.targetPointers=[]}getPointerCount(){return this.targetPointers.length}handleDownEvent(t){return!1}handleDragEvent(t){}handleEvent(t){if(!t.originalEvent)return!0;let e=!1;if(this.updateTrackedPointers_(t),this.handlingDownUpSequence){if(t.type==bn.POINTERDRAG)this.handleDragEvent(t),t.originalEvent.preventDefault();else if(t.type==bn.POINTERUP){const e=this.handleUpEvent(t);this.handlingDownUpSequence=e&&this.targetPointers.length>0}}else if(t.type==bn.POINTERDOWN){const i=this.handleDownEvent(t);this.handlingDownUpSequence=i,e=this.stopDown(i)}else t.type==bn.POINTERMOVE&&this.handleMoveEvent(t);return!e}handleMoveEvent(t){}handleUpEvent(t){return!1}stopDown(t){return t}updateTrackedPointers_(t){t.activePointers&&(this.targetPointers=t.activePointers)}};function Yn(t){const e=arguments;return function(t){let i=!0;for(let n=0,s=e.length;n<s&&(i=i&&e[n](t),i);++n);return i}}const qn=function(t){const e=t.originalEvent;return e.altKey&&!(e.metaKey||e.ctrlKey)&&e.shiftKey},Qn=function(t){return!t.map.getTargetElement().hasAttribute("tabindex")||function(t){const e=t.map.getTargetElement(),i=t.map.getOwnerDocument().activeElement;return e.contains(i)}(t)},$n=l,Jn=function(t){const e=t.originalEvent;return 0==e.button&&!(Ne&&De&&e.ctrlKey)},ts=function(t){const e=t.originalEvent;return!e.altKey&&!(e.metaKey||e.ctrlKey)&&!e.shiftKey},es=function(t){const e=t.originalEvent;return!e.altKey&&!(e.metaKey||e.ctrlKey)&&e.shiftKey},is=function(t){const e=t.originalEvent,i=e.target.tagName;return"INPUT"!==i&&"SELECT"!==i&&"TEXTAREA"!==i&&!e.target.isContentEditable},ns=function(t){const e=t.originalEvent;return V(void 0!==e,56),"mouse"==e.pointerType},ss=function(t){const e=t.originalEvent;return V(void 0!==e,56),e.isPrimary&&0===e.button},os=class extends Wn{constructor(t){super({stopDown:h}),t=t||{},this.kinetic_=t.kinetic,this.lastCentroid=null,this.lastPointersCount_,this.panning_=!1;const e=t.condition?t.condition:Yn(ts,ss);this.condition_=t.onFocusOnly?Yn(Qn,e):e,this.noKinetic_=!1}handleDragEvent(t){const e=t.map;this.panning_||(this.panning_=!0,e.getView().beginInteraction());const i=this.targetPointers,n=e.getEventPixel(Hn(i));if(i.length==this.lastPointersCount_){if(this.kinetic_&&this.kinetic_.update(n[0],n[1]),this.lastCentroid){const e=[this.lastCentroid[0]-n[0],n[1]-this.lastCentroid[1]],i=t.map.getView();s=e,o=i.getResolution(),s[0]*=o,s[1]*=o,Yt(e,i.getRotation()),i.adjustCenterInternal(e)}}else this.kinetic_&&this.kinetic_.begin();var s,o;this.lastCentroid=n,this.lastPointersCount_=i.length,t.originalEvent.preventDefault()}handleUpEvent(t){const e=t.map,i=e.getView();if(0===this.targetPointers.length){if(!this.noKinetic_&&this.kinetic_&&this.kinetic_.end()){const t=this.kinetic_.getDistance(),n=this.kinetic_.getAngle(),s=i.getCenterInternal(),o=e.getPixelFromCoordinateInternal(s),r=e.getCoordinateFromPixelInternal([o[0]-t*Math.cos(n),o[1]-t*Math.sin(n)]);i.animateInternal({center:i.getConstrainedCenter(r),duration:500,easing:Fe})}return this.panning_&&(this.panning_=!1,i.endInteraction()),!1}return this.kinetic_&&this.kinetic_.begin(),this.lastCentroid=null,!0}handleDownEvent(t){if(this.targetPointers.length>0&&this.condition_(t)){const e=t.map.getView();return this.lastCentroid=null,e.getAnimating()&&e.cancelAnimations(),this.kinetic_&&this.kinetic_.begin(),this.noKinetic_=this.targetPointers.length>1,!0}return!1}},rs=class extends Wn{constructor(t){t=t||{},super({stopDown:h}),this.condition_=t.condition?t.condition:qn,this.lastAngle_=void 0,this.duration_=void 0!==t.duration?t.duration:250}handleDragEvent(t){if(!ns(t))return;const e=t.map,i=e.getView();if(i.getConstraints().rotation===Me)return;const n=e.getSize(),s=t.pixel,o=Math.atan2(n[1]/2-s[1],s[0]-n[0]/2);if(void 0!==this.lastAngle_){const t=o-this.lastAngle_;i.adjustRotationInternal(-t)}this.lastAngle_=o}handleUpEvent(t){return!ns(t)||(t.map.getView().endInteraction(this.duration_),!1)}handleDownEvent(t){return!!ns(t)&&(!(!Jn(t)||!this.condition_(t))&&(t.map.getView().beginInteraction(),this.lastAngle_=void 0,!0))}},as=class extends n{constructor(t){super(),this.geometry_=null,this.element_=document.createElement("div"),this.element_.style.position="absolute",this.element_.style.pointerEvents="auto",this.element_.className="ol-box "+t,this.map_=null,this.startPixel_=null,this.endPixel_=null}disposeInternal(){this.setMap(null)}render_(){const t=this.startPixel_,e=this.endPixel_,i="px",n=this.element_.style;n.left=Math.min(t[0],e[0])+i,n.top=Math.min(t[1],e[1])+i,n.width=Math.abs(e[0]-t[0])+i,n.height=Math.abs(e[1]-t[1])+i}setMap(t){if(this.map_){this.map_.getOverlayContainer().removeChild(this.element_);const t=this.element_.style;t.left="inherit",t.top="inherit",t.width="inherit",t.height="inherit"}this.map_=t,this.map_&&this.map_.getOverlayContainer().appendChild(this.element_)}setPixels(t,e){this.startPixel_=t,this.endPixel_=e,this.createOrUpdateGeometry(),this.render_()}createOrUpdateGeometry(){const t=this.startPixel_,e=this.endPixel_,i=[t,[t[0],e[1]],e,[e[0],t[1]]].map(this.map_.getCoordinateFromPixelInternal,this.map_);i[4]=i[0].slice(),this.geometry_?this.geometry_.setCoordinates([i]):this.geometry_=new vi([i])}getGeometry(){return this.geometry_}};class ls extends e{constructor(t,e,i){super(t),this.coordinate=e,this.mapBrowserEvent=i}}const hs=class extends Wn{constructor(t){super(),this.on,this.once,this.un,t=t||{},this.box_=new as(t.className||"ol-dragbox"),this.minArea_=void 0!==t.minArea?t.minArea:64,t.onBoxEnd&&(this.onBoxEnd=t.onBoxEnd),this.startPixel_=null,this.condition_=t.condition?t.condition:Jn,this.boxEndCondition_=t.boxEndCondition?t.boxEndCondition:this.defaultBoxEndCondition}defaultBoxEndCondition(t,e,i){const n=i[0]-e[0],s=i[1]-e[1];return n*n+s*s>=this.minArea_}getGeometry(){return this.box_.getGeometry()}handleDragEvent(t){this.box_.setPixels(this.startPixel_,t.pixel),this.dispatchEvent(new ls("boxdrag",t.coordinate,t))}handleUpEvent(t){this.box_.setMap(null);const e=this.boxEndCondition_(t,this.startPixel_,t.pixel);return e&&this.onBoxEnd(t),this.dispatchEvent(new ls(e?"boxend":"boxcancel",t.coordinate,t)),!1}handleDownEvent(t){return!!this.condition_(t)&&(this.startPixel_=t.pixel,this.box_.setMap(t.map),this.box_.setPixels(this.startPixel_,this.startPixel_),this.dispatchEvent(new ls("boxstart",t.coordinate,t)),!0)}onBoxEnd(t){}},cs=class extends hs{constructor(t){super({condition:(t=t||{}).condition?t.condition:es,className:t.className||"ol-dragzoom",minArea:t.minArea}),this.duration_=void 0!==t.duration?t.duration:200,this.out_=void 0!==t.out&&t.out}onBoxEnd(t){const e=this.getMap().getView();let i=this.getGeometry();if(this.out_){const t=e.rotatedExtentForGeometry(i),n=e.getResolutionForExtentInternal(t),s=e.getResolution()/n;i=i.clone(),i.scale(s*s)}e.fitInternal(i,{duration:this.duration_,easing:Fe})}},us="ArrowLeft",ds="ArrowRight",gs="ArrowDown",ps=class extends Un{constructor(t){super(),t=t||{},this.defaultCondition_=function(t){return ts(t)&&is(t)},this.condition_=void 0!==t.condition?t.condition:this.defaultCondition_,this.duration_=void 0!==t.duration?t.duration:100,this.pixelDelta_=void 0!==t.pixelDelta?t.pixelDelta:128}handleEvent(t){let e=!1;if(t.type==_){const i=t.originalEvent,n=i.key;if(this.condition_(t)&&(n==gs||n==us||n==ds||"ArrowUp"==n)){const s=t.map.getView(),o=s.getResolution()*this.pixelDelta_;let r=0,a=0;n==gs?a=-o:n==us?r=-o:n==ds?r=o:a=o;const l=[r,a];Yt(l,s.getRotation()),function(t,e,i){const n=t.getCenterInternal();if(n){const s=[n[0]+e[0],n[1]+e[1]];t.animateInternal({duration:void 0!==i?i:250,easing:Oe,center:t.getConstrainedCenter(s)})}}(s,l,this.duration_),i.preventDefault(),e=!0}}return!e}},ms=class extends Un{constructor(t){super(),t=t||{},this.condition_=t.condition?t.condition:function(t){return!function(t){const e=t.originalEvent;return De?e.metaKey:e.ctrlKey}(t)&&is(t)},this.delta_=t.delta?t.delta:1,this.duration_=void 0!==t.duration?t.duration:100}handleEvent(t){let e=!1;if(t.type==_||t.type==f){const i=t.originalEvent,n=i.key;if(this.condition_(t)&&("+"===n||"-"===n)){const s=t.map,o="+"===n?this.delta_:-this.delta_;Bn(s.getView(),o,void 0,this.duration_),i.preventDefault(),e=!0}}return!e}},_s=class{constructor(t,e,i){this.decay_=t,this.minVelocity_=e,this.delay_=i,this.points_=[],this.angle_=0,this.initialVelocity_=0}begin(){this.points_.length=0,this.angle_=0,this.initialVelocity_=0}update(t,e){this.points_.push(t,e,Date.now())}end(){if(this.points_.length<6)return!1;const t=Date.now()-this.delay_,e=this.points_.length-3;if(this.points_[e+2]<t)return!1;let i=e-3;for(;i>0&&this.points_[i+2]>t;)i-=3;const n=this.points_[e+2]-this.points_[i+2];if(n<1e3/60)return!1;const s=this.points_[e]-this.points_[i],o=this.points_[e+1]-this.points_[i+1];return this.angle_=Math.atan2(o,s),this.initialVelocity_=Math.sqrt(s*s+o*o)/n,this.initialVelocity_>this.minVelocity_}getDistance(){return(this.minVelocity_-this.initialVelocity_)/this.decay_}getAngle(){return this.angle_}},fs=class extends Un{constructor(t){super(t=t||{}),this.totalDelta_=0,this.lastDelta_=0,this.maxDelta_=void 0!==t.maxDelta?t.maxDelta:1,this.duration_=void 0!==t.duration?t.duration:250,this.timeout_=void 0!==t.timeout?t.timeout:80,this.useAnchor_=void 0===t.useAnchor||t.useAnchor,this.constrainResolution_=void 0!==t.constrainResolution&&t.constrainResolution;const e=t.condition?t.condition:$n;this.condition_=t.onFocusOnly?Yn(Qn,e):e,this.lastAnchor_=null,this.startTime_=void 0,this.timeoutId_,this.mode_=void 0,this.trackpadEventGap_=400,this.trackpadTimeoutId_,this.deltaPerZoom_=300}endInteraction_(){this.trackpadTimeoutId_=void 0;const t=this.getMap();t&&t.getView().endInteraction(void 0,this.lastDelta_?this.lastDelta_>0?1:-1:0,this.lastAnchor_)}handleEvent(t){if(!this.condition_(t))return!0;if(t.type!==y)return!0;const e=t.map,i=t.originalEvent;let n;if(i.preventDefault(),this.useAnchor_&&(this.lastAnchor_=t.coordinate),t.type==y&&(n=i.deltaY,ze&&i.deltaMode===WheelEvent.DOM_DELTA_PIXEL&&(n/=je),i.deltaMode===WheelEvent.DOM_DELTA_LINE&&(n*=40)),0===n)return!1;this.lastDelta_=n;const s=Date.now();void 0===this.startTime_&&(this.startTime_=s),(!this.mode_||s-this.startTime_>this.trackpadEventGap_)&&(this.mode_=Math.abs(n)<4?"trackpad":"wheel");const o=e.getView();if("trackpad"===this.mode_&&!o.getConstrainResolution()&&!this.constrainResolution_)return this.trackpadTimeoutId_?clearTimeout(this.trackpadTimeoutId_):(o.getAnimating()&&o.cancelAnimations(),o.beginInteraction()),this.trackpadTimeoutId_=setTimeout(this.endInteraction_.bind(this),this.timeout_),o.adjustZoom(-n/this.deltaPerZoom_,this.lastAnchor_),this.startTime_=s,!1;this.totalDelta_+=n;const r=Math.max(this.timeout_-(s-this.startTime_),0);return clearTimeout(this.timeoutId_),this.timeoutId_=setTimeout(this.handleWheelZoom_.bind(this,e),r),!1}handleWheelZoom_(t){const e=t.getView();e.getAnimating()&&e.cancelAnimations();let i=-Z(this.totalDelta_,-this.maxDelta_*this.deltaPerZoom_,this.maxDelta_*this.deltaPerZoom_)/this.deltaPerZoom_;(e.getConstrainResolution()||this.constrainResolution_)&&(i=i?i>0?1:-1:0),Bn(e,i,this.lastAnchor_,this.duration_),this.mode_=void 0,this.totalDelta_=0,this.lastAnchor_=null,this.startTime_=void 0,this.timeoutId_=void 0}setMouseAnchor(t){this.useAnchor_=t,t||(this.lastAnchor_=null)}},vs=class extends Wn{constructor(t){const e=t=t||{};e.stopDown||(e.stopDown=h),super(e),this.anchor_=null,this.lastAngle_=void 0,this.rotating_=!1,this.rotationDelta_=0,this.threshold_=void 0!==t.threshold?t.threshold:.3,this.duration_=void 0!==t.duration?t.duration:250}handleDragEvent(t){let e=0;const i=this.targetPointers[0],n=this.targetPointers[1],s=Math.atan2(n.clientY-i.clientY,n.clientX-i.clientX);if(void 0!==this.lastAngle_){const t=s-this.lastAngle_;this.rotationDelta_+=t,!this.rotating_&&Math.abs(this.rotationDelta_)>this.threshold_&&(this.rotating_=!0),e=t}this.lastAngle_=s;const o=t.map,r=o.getView();r.getConstraints().rotation!==Me&&(this.anchor_=o.getCoordinateFromPixelInternal(o.getEventPixel(Hn(this.targetPointers))),this.rotating_&&(o.render(),r.adjustRotationInternal(e,this.anchor_)))}handleUpEvent(t){return!(this.targetPointers.length<2)||(t.map.getView().endInteraction(this.duration_),!1)}handleDownEvent(t){if(this.targetPointers.length>=2){const e=t.map;return this.anchor_=null,this.lastAngle_=void 0,this.rotating_=!1,this.rotationDelta_=0,this.handlingDownUpSequence||e.getView().beginInteraction(),!0}return!1}},ys=class extends Wn{constructor(t){const e=t=t||{};e.stopDown||(e.stopDown=h),super(e),this.anchor_=null,this.duration_=void 0!==t.duration?t.duration:400,this.lastDistance_=void 0,this.lastScaleDelta_=1}handleDragEvent(t){let e=1;const i=this.targetPointers[0],n=this.targetPointers[1],s=i.clientX-n.clientX,o=i.clientY-n.clientY,r=Math.sqrt(s*s+o*o);void 0!==this.lastDistance_&&(e=this.lastDistance_/r),this.lastDistance_=r;const a=t.map,l=a.getView();1!=e&&(this.lastScaleDelta_=e),this.anchor_=a.getCoordinateFromPixelInternal(a.getEventPixel(Hn(this.targetPointers))),a.render(),l.adjustResolutionInternal(e,this.anchor_)}handleUpEvent(t){if(this.targetPointers.length<2){const e=t.map.getView(),i=this.lastScaleDelta_>1?1:-1;return e.endInteraction(this.duration_,i),!1}return!0}handleDownEvent(t){if(this.targetPointers.length>=2){const e=t.map;return this.anchor_=null,this.lastDistance_=void 0,this.lastScaleDelta_=1,this.handlingDownUpSequence||e.getView().beginInteraction(),!0}return!1}};function Cs(t){t instanceof bi?t.setMapInternal(null):t instanceof En&&t.getLayers().forEach(Cs)}function xs(t,e){if(t instanceof bi)t.setMapInternal(e);else if(t instanceof En){const i=t.getLayers().getArray();for(let t=0,n=i.length;t<n;++t)xs(i[t],e)}}class Es extends jn{constructor(t,e){const i=e||{};if(!i.element){const t=document.createElement("div");t.className="bgis-composite",i.element=t}let n;n=t instanceof jn?[t]:t,n.forEach((t=>{t.setTarget(i.element)})),super(i),this.childControls=n}setMap(t){super.setMap(t),t&&this.childControls.forEach((e=>{e.setMap(t)}))}getChildControls(){return this.childControls}setChildControls(t){this.childControls=t}getElement(){return this.element}}class Ts extends Es{constructor(t){const e=t.element?t.element:document.createElement("div");e.classList.add(t.styleClass),t.element=e,super(t.childControls,t),this.styleClass=t.styleClass}getStyleClass(){return this.styleClass}}const ws=t=>Array.isArray(t)?t:[t];class bs extends Es{constructor(t,e){var i;t.tooltipAsTextElement=null===(i=t.tooltipAsTextElement)||void 0===i||i,t.unicode=t.unicode||null,t.iconClassName=t.iconClassName||null,null===t.unicode&&null===t.iconClassName&&(t.unicode=59651),t.tooltip=t.tooltip||"";const n=t.element?t.element:document.createElement("div");n.className=t.containerClassName?t.containerClassName:"ol-control bgis-control",n.title=t.tooltip;const s=document.createElement("button");if(s.className="bgis-icon-button",null!==t.unicode?s.appendChild(bs.getIconElementForUnicode(t.unicode)):null!==t.iconClassName&&s.appendChild(bs.getIconElementForIconClassName(t.iconClassName)),s.title=t.tooltip,t.tooltip.length>0&&s.setAttribute("aria-label",t.tooltip),n.append(s),t.tooltipAsTextElement){const e=document.createElement("div");e.className="bgis-control-button-text-container";const i=document.createElement("span");i.textContent=t.tooltip,i.className="bgis-control-button-text",e.appendChild(i),n.appendChild(e)}super(e||[],Object.assign(Object.assign({},t),{element:n})),this.unicode=t.unicode,this.iconClassName=t.iconClassName,this.button=s,this.element.addEventListener("click",(()=>this.dispatchEvent("click")),!1),t.preventDefault||this.on("click",this.handleEvent)}handleEvent(t){return!0}getButton(){return this.button}setButtonUnicode(t){this.getButton().textContent="",this.getButton().innerHTML="",this.getButton().appendChild(bs.getIconElementForUnicode(t))}setButtonIconClassName(t){this.getButton().textContent="",this.getButton().innerHTML="",this.getButton().appendChild(bs.getIconElementForIconClassName(t))}static getIconElementForIconClassName(t){const e=document.createElement("i");return e.className="bgis-icon "+t,e}static getIconElementForUnicode(t){const e=document.createElement("i");return e.className="bgis-icon",e.textContent=String.fromCodePoint(t),e}}class Rs extends e{constructor(t,e){super(t),this.isToggled=e}}class Ss extends bs{constructor(t){super(t||{},t.containerToToggle),this._isToggled=!1,this.containerToToggle=t.containerToToggle,this.unicodeToggled=t.unicodeToggled||null,this.iconClassNameToggled=t.iconClassNameToggled||null,null===this.unicodeToggled&&null===this.iconClassNameToggled&&(this.unicodeToggled=59651)}handleEvent(t){if(t.type===m){this.isToggled=!this.isToggled,this.dispatchEvent(new Rs("toggle",this.isToggled));const t=this.getParentElement();if(t){const n=t.querySelector(".ol-overlaycontainer-stopevent");this.isToggled?(n.style.zIndex="unset","div",i="bgis-overlay-bg",null!=(e=n)?e.querySelector(`.${i}`)||e.appendChild(((t,e)=>{const i=document.createElement(t);return i.className=e,i})("div",i)):console.log("Enclosing element is null")):(n.style.zIndex="0",((t,e)=>{if(null!=t){const e=t.querySelectorAll(".bgis-overlay-bg");null!=e&&e.length>0&&e.forEach((t=>t.parentElement&&t.parentElement.removeChild(t)))}})(n))}this.isToggled?null!==this.unicodeToggled?this.setButtonUnicode(this.unicodeToggled):null!==this.iconClassNameToggled&&this.setButtonIconClassName(this.iconClassNameToggled):null!==this.unicode?this.setButtonUnicode(this.unicode):null!==this.iconClassName&&this.setButtonIconClassName(this.iconClassName),((t,e,i=document)=>{ws(t).forEach((t=>{const n=i.querySelector(t);n&&ws(e).forEach((t=>null==n?void 0:n.classList.toggle(t)))}))})("."+this.containerToToggle.getStyleClass(),"show",t||document)}var e,i;return!0}set isToggled(t){this._isToggled=t}get isToggled(){return this._isToggled}getContainerToToggle(){return this.containerToToggle}getParentElement(){let t=this.element.closest(".bgis");return t||(t=this.element.closest(".bgis-map")),t}}const Ps='"Source Sans 3",sans-serif';class Ms extends Ts{constructor(t){let e=null;t.verticalControls&&t.verticalControls.length>0&&(e=Ms.createToggle(t.verticalControls),t.horizontalControls.push(e));const i=t||{};super(Object.assign(Object.assign({},i),{styleClass:"bgis-bottom-right-horizontal",childControls:t.horizontalControls})),this.horizontalControls=[],this.horizontalControls=t.horizontalControls,this.toggleButton=e,null!=this.toggleButton&&this.toggleButton.addEventListener("toggle",(t=>(this.dispatchEvent(t),!0)))}getToggleButton(){return this.toggleButton}setMap(t){const e=t.getOwnerDocument().defaultView;e&&C(e,"resize",(()=>{this.handleHorizontalControlsForSize()}),this),super.setMap(t),this.handleHorizontalControlsForSize()}handleHorizontalControlsForSize(){var t,i,n,s,o;const r=this.getMap();if(r)if(r.getOwnerDocument().documentElement.clientWidth>="768"){if(null===(t=this.toggleButton)||void 0===t?void 0:t.getContainerToToggle()){const t=this.toggleButton.getContainerToToggle().getChildControls().filter((t=>!0===t.get(Ms.MOVED_FROM_HORIZONTAL_KEY)));if(t.length>0)if(this.getElement().innerHTML="",t.forEach((t=>{t.unset(Ms.MOVED_FROM_HORIZONTAL_KEY),t.setTarget(this.getElement()),t.setMap(r)})),this.horizontalControls=t,this.toggleButton.getContainerToToggle().setChildControls(this.toggleButton.getContainerToToggle().getChildControls().filter((e=>!t.includes(e)))),this.toggleButton.getContainerToToggle().getChildControls().length>0){const t=this.toggleButton.isToggled,i=Ms.createToggle(this.toggleButton.getContainerToToggle().getChildControls());i.setTarget(this.getElement()),i.setMap(r),this.toggleButton=i,this.horizontalControls.push(i),t&&this.toggleButton.handleEvent(new e(m))}else this.toggleButton=null}}else{const t=this.horizontalControls.filter((t=>!(t instanceof Ss)&&!0!==t.get(Ms.MOVED_FROM_HORIZONTAL_KEY)));((null===(i=this.toggleButton)||void 0===i?void 0:i.getContainerToToggle().getChildControls())&&(null===(n=this.toggleButton)||void 0===n?void 0:n.getContainerToToggle().getChildControls().length)>0||t.length>1)&&((null===(s=this.toggleButton)||void 0===s?void 0:s.getContainerToToggle())||(this.toggleButton=Ms.createToggle([]),this.toggleButton.setTarget(this.getElement()),this.toggleButton.setMap(r)),t.forEach((t=>{t.set(Ms.MOVED_FROM_HORIZONTAL_KEY,!0),this.toggleButton&&t.setTarget(this.toggleButton.getContainerToToggle().getElement()),t.setMap(r)})),null===(o=this.toggleButton)||void 0===o||o.getContainerToToggle().getChildControls().push(...t),this.horizontalControls=this.horizontalControls.filter((e=>!t.includes(e))))}}static createToggle(t){const e=new Ts({styleClass:"bgis-bottom-right-vertical",childControls:t});return new Ss({containerToToggle:e,containerClassName:"ol-control bgis-control bgis-bottom-right-overlay",iconClassName:"bgis-icon-more-four",iconClassNameToggled:"bgis-icon-times",tooltip:"mehr..."})}}Ms.MOVED_FROM_HORIZONTAL_KEY="bgis-moved-from-horizontal";const Is="accuracy",Ls="accuracyGeometry",Fs="altitude",As="altitudeAccuracy",Os="heading",ks="position",zs="projection",Ns="speed",Ds="tracking",js="trackingOptions";class Gs extends e{constructor(t){super("error"),this.code=t.code,this.message=t.message}}const Ks=class extends M{constructor(t){super(),this.on,this.once,this.un,t=t||{},this.position_=null,this.transform_=re,this.watchId_=void 0,this.addChangeListener(zs,this.handleProjectionChanged_),this.addChangeListener(Ds,this.handleTrackingChanged_),void 0!==t.projection&&this.setProjection(t.projection),void 0!==t.trackingOptions&&this.setTrackingOptions(t.trackingOptions),this.setTracking(void 0!==t.tracking&&t.tracking)}disposeInternal(){this.setTracking(!1),super.disposeInternal()}handleProjectionChanged_(){const t=this.getProjection();t&&(this.transform_=ge(le("EPSG:4326"),t),this.position_&&this.set(ks,this.transform_(this.position_)))}handleTrackingChanged_(){if("geolocation"in navigator){const t=this.getTracking();t&&void 0===this.watchId_?this.watchId_=navigator.geolocation.watchPosition(this.positionChange_.bind(this),this.positionError_.bind(this),this.getTrackingOptions()):t||void 0===this.watchId_||(navigator.geolocation.clearWatch(this.watchId_),this.watchId_=void 0)}}positionChange_(t){const e=t.coords;this.set(Is,e.accuracy),this.set(Fs,null===e.altitude?void 0:e.altitude),this.set(As,null===e.altitudeAccuracy?void 0:e.altitudeAccuracy),this.set(Os,null===e.heading?void 0:H(e.heading)),this.position_?(this.position_[0]=e.longitude,this.position_[1]=e.latitude):this.position_=[e.longitude,e.latitude];const i=this.transform_(this.position_);this.set(ks,i.slice()),this.set(Ns,null===e.speed?void 0:e.speed);const n=function(t,e,i,n){i=i||32;const s=[];for(let n=0;n<i;++n)r(s,Jt(t,e,2*Math.PI*n/i,undefined));return s.push(s[0],s[1]),new fi(s,"XY",[s.length])}(this.position_,e.accuracy);n.applyTransform(this.transform_),this.set(Ls,n),this.changed()}positionError_(t){this.dispatchEvent(new Gs(t))}getAccuracy(){return this.get(Is)}getAccuracyGeometry(){return this.get(Ls)||null}getAltitude(){return this.get(Fs)}getAltitudeAccuracy(){return this.get(As)}getHeading(){return this.get(Os)}getPosition(){return this.get(ks)}getProjection(){return this.get(zs)}getSpeed(){return this.get(Ns)}getTracking(){return this.get(Ds)}getTrackingOptions(){return this.get(js)}setProjection(t){this.set(zs,le(t))}setTracking(t){this.set(Ds,t)}setTrackingOptions(t){this.set(js,t)}};class Vs extends e{constructor(t,e){super(t),this.position=e}}const Zs="projection",Bs="coordinateFormat",Us=class extends jn{constructor(t){t=t||{};const e=document.createElement("div");e.className=void 0!==t.className?t.className:"ol-mouse-position",super({element:e,render:t.render,target:t.target}),this.on,this.once,this.un,this.addChangeListener(Zs,this.handleProjectionChanged_),t.coordinateFormat&&this.setCoordinateFormat(t.coordinateFormat),t.projection&&this.setProjection(t.projection),this.renderOnMouseOut_=void 0!==t.placeholder,this.placeholder_=this.renderOnMouseOut_?t.placeholder:"&#160;",this.renderedHTML_=e.innerHTML,this.mapProjection_=null,this.transform_=null,this.wrapX_=!1!==t.wrapX}handleProjectionChanged_(){this.transform_=null}getCoordinateFormat(){return this.get(Bs)}getProjection(){return this.get(Zs)}handleMouseMove(t){const e=this.getMap();this.updateHTML_(e.getEventPixel(t))}handleMouseOut(t){this.updateHTML_(null)}setMap(t){if(super.setMap(t),t){const e=t.getViewport();this.listenerKeys.push(C(e,Rn,this.handleMouseMove,this)),this.renderOnMouseOut_&&this.listenerKeys.push(C(e,"pointerout",this.handleMouseOut,this)),this.updateHTML_(null)}}setCoordinateFormat(t){this.set(Bs,t)}setProjection(t){this.set(Zs,le(t))}updateHTML_(t){let e=this.placeholder_;if(t&&this.mapProjection_){if(!this.transform_){const t=this.getProjection();this.transform_=t?ge(this.mapProjection_,t):re}const i=this.getMap().getCoordinateFromPixelInternal(t);if(i){const t=fe();t&&(this.transform_=ge(this.mapProjection_,t)),this.transform_(i,i),this.wrapX_&&qt(i,t||this.getProjection()||this.mapProjection_);const n=this.getCoordinateFormat();e=n?n(i):i.toString()}}this.renderedHTML_&&e===this.renderedHTML_||(this.element.innerHTML=e,this.renderedHTML_=e)}render(t){const e=t.frameState;e?this.mapProjection_!=e.viewState.projection&&(this.mapProjection_=e.viewState.projection,this.transform_=null):this.mapProjection_=null}},Xs=25.4/.28,Hs=[1,2,5];class Ws extends e{constructor(t,e){super(t),this.originalEvent=e}}class Ys extends jn{constructor(t){const e=t||{},i=document.createElement("div");i.className="bgis-overview-image";const n=document.createElement("figure");n.innerHTML=Ys.SVG_CODE,i.appendChild(n),e.element=i,super(e),this.preventDefault=e.preventDefault||!1,this.overviewContainerElement=i,this.extent=Et([[101e4,579e4],[196e4,633e4]]),this.overviewContainerElement.addEventListener("click",(t=>this.dispatchEvent(new Ws("click",t))),!1),this.preventDefault||this.on("click",this.onOverviewImageClick),this.svgElement=n.firstChild,this.backgroundSVGRectElement=document.createElementNS("http://www.w3.org/2000/svg","rect"),this.backgroundSVGRectElement.setAttribute("class","bgis-overviewmap-svg-background"),this.backgroundSVGRectElement.setAttribute("x",String(0)),this.backgroundSVGRectElement.setAttribute("y",String(0)),this.backgroundSVGRectElement.setAttribute("rx",String(8)),this.backgroundSVGRectElement.setAttribute("ry",String(8)),this.backgroundSVGRectElement.setAttribute("width",String(Ys.SVG_WIDTH)),this.backgroundSVGRectElement.setAttribute("height",String(Ys.SVG_HEIGHT)),this.backgroundSVGRectElement.setAttribute("style","stroke-width:0"),this.backgroundSVGRectElement.setAttribute("fill",Ys.BACKGROUND_COLOR),this.svgElement.prepend(this.backgroundSVGRectElement)}setMap(t){super.setMap(t),t&&(this.preventDefault||t.on("moveend",(t=>this.updateCrosshair(t))))}updateCrosshair(t){var e;const i=[Ys.SVG_WIDTH,Ys.SVG_HEIGHT],n=this.getOverviewPxFromLonLat(null===(e=t.map.getView())||void 0===e?void 0:e.getCenter());if(n[0]>i[0]?n[0]=i[0]:n[0]<0&&(n[0]=0),n[1]>i[1]?n[1]=i[1]:n[1]<0&&(n[1]=0),this.svgElement){const t=this.svgElement.getElementsByClassName("bgis-overviewmap-svg-crosshair");if(t)for(const e of Array.from(t))this.svgElement.removeChild(e);this.svgElement.appendChild(Ys.getCrosshair(n[0],0,n[0],Ys.SVG_HEIGHT,"bgis-overviewmap-svg-crosshair-x")),this.svgElement.appendChild(Ys.getCrosshair(0,n[1],Ys.SVG_WIDTH,n[1],"bgis-overviewmap-svg-crosshair-y"))}}static getCrosshair(t,e,i,n,s){const o=document.createElementNS("http://www.w3.org/2000/svg","line");return o.setAttribute("x1",String(t)),o.setAttribute("y1",String(e)),o.setAttribute("x2",String(i)),o.setAttribute("y2",String(n)),o.setAttribute("style","fill: none; stroke: black; stroke-width: 1px;"),o.setAttribute("class","bgis-overviewmap-svg-crosshair "+s),o}static calculateResolutionFromWidth(t,e,i){return Math.abs(t-e)/i}getOverviewPxFromLonLat(t){if(t){const e=[Ys.SVG_WIDTH,Ys.SVG_HEIGHT],i=[Ys.calculateResolutionFromWidth(this.extent[0],this.extent[2],e[0]),Ys.calculateResolutionFromWidth(this.extent[1],this.extent[3],e[1])];return[Math.round(1/i[0]*(t[0]-this.extent[0])),Math.round(1/i[1]*(this.extent[3]-t[1]))]}return[0,0]}onOverviewImageClick(t){var e,i;const n=this.overviewContainerElement.getBoundingClientRect(),s=t.originalEvent.clientX-n.left,o=t.originalEvent.clientY-n.top,r=this.getLonLatFromOverviewPx([s,o]);null===(i=null===(e=this.getMap())||void 0===e?void 0:e.getView())||void 0===i||i.animate({center:r,duration:300})}getLonLatFromOverviewPx(t){const e=[this.overviewContainerElement.clientWidth,this.overviewContainerElement.clientHeight],i=[Ys.calculateResolutionFromWidth(this.extent[0],this.extent[2],e[0]),Ys.calculateResolutionFromWidth(this.extent[1],this.extent[3],e[1])];return[t[0]*i[0]+this.extent[0],this.extent[3]-t[1]*i[1]]}getOverviewContainerElement(){return this.overviewContainerElement}getSVGElement(){return this.svgElement}getBackgroundRectElement(){return this.backgroundSVGRectElement}}Ys.BACKGROUND_COLOR="#e5ecf0",Ys.SVG_HEIGHT=216,Ys.SVG_WIDTH=380,Ys.SVG_CODE="<svg xmlns='http://www.w3.org/2000/svg' class='bgis-overviewmap-svg' xmlns:xlink='http://www.w3.org/1999/xlink' viewBox='0 0 "+Ys.SVG_WIDTH+" "+Ys.SVG_HEIGHT+"' preserveAspectRatio='xMidYMid meet' height='100%' width='100%' color-interpolation='auto' fill='black' fill-opacity='1'  stroke='black' stroke-dasharray='none' stroke-dashoffset='0' stroke-linecap='square' stroke-linejoin='miter' stroke-miterlimit='10' stroke-opacity='1' stroke-width='1' xmlns:v='https://vecta.io/nano'><style><![CDATA[.B{clip-path:url(#A)}.C{fill-rule:evenodd}.D{stroke:none}.E{fill:#999}.F{fill:none}.G{stroke-miterlimit:1}.H{stroke-width:2.5}]]></style><defs><clipPath id='A'><path d='M0 0h380v216H0V0z'/></clipPath><path id='B' d='M356 82l-.4 5.2 4.4 1.6-3.2 2.4v6.4l-3.6.8 2.8 3.6.8 6.8-9.6 1.2-.4-2-1.6 2.4h-3.6l-1.6-3.6-4.8-1.6-8 6.4 6.4 3.2 3.2-.8 1.2 4.8 2 .8-2.8 2.8.4 3.2-3.6 3.2-2.8-.4-.8 1.6-2.4-1.6-.4 4 2.4 4.8-2.4 1.6-.8 4 2 .8-.4 2.4 2.8-.4.8 1.6-3.2 1.6 2.8 2.8-4 2 3.6 1.6-10-.8-.4 3.2-4 1.6-2.4 4.4-6.4 2.8.8-3.6 6.4-6.8-3.2-5.2 1.6-4.8-4.8-14.8 13.2-6.8v-6l2.8-4-.8-3.6-2.4-1.2-1.2-7.6 3.2.8 2-2.8-2-1.6 2.8-.8 2-4 3.2-.4 2.4 4 5.6-5.6v-2.8l5.6-1.2 2.4-3.2L352 88l1.6-3.6-2-2 2.8 1.6 1.6-2z'/><path id='C' d='M162.4 146.8l.4 2 8.4 1.2 1.6 2.8 4.4 1.6 8-2 .4-2.8 4.8-.8 2 2 10.8.8 8.4 9.6 5.6-2 2.4-4 8.4-4.8 1.6 3.2h6l.8 3.2 4.8-3.2 5.6 2 10-3.6 8 8.8-2 8.8 2.4.8-.4 6.4 2 1.2-3.6 3.2-1.2-2-1.6 2-2.4-.4-2.4 6.4-4.8.8-.4 2.4-4.8 1.6-.8 4-2.4-3.6-2 1.2-2-2.4-12.4.8-1.2-2.8h-5.2l-4-2.8-5.6 1.2-18-4.8-6.8 1.6-6.4-3.2H168l-2.4-2.8-4.8-.4v-3.2h1.6V172l9.2-1.2 1.6-2.4-5.6-4v-3.2l-4.4-3.2-.8-2.4 2-3.2h-2.8l-2.4-3.6 3.2-2z'/><path id='D' d='M264.8 20.8l5.6 1.6.4 4 4.4-.8 1.6-2.8 8.8 3.2.8 2 8 4 6.8-1.6V32l5.2 2 .4 2.4 5.6 3.2 12.8 1.2 3.6-5.6 3.6-.4 2.4 2.4 2.8-.4 1.2 4 10.4 1.6 1.6 10.8-4.8 6-.8 4.8 5.6 7.6.8 6.4 4.4 3.2-1.6 2.8-2.8-1.6 2 2L352 88l-4.4-3.6-2.4 3.2-5.6 1.2v2.8l-5.6 5.6-2.4-4-3.2.4-1.6 3.6-3.2 1.2 2 1.2-2 3.2-3.2-.8 1.2 7.6 2.4 1.2.8 3.6-2.8 4 1.2 4-5.2 5.2h-2.8l-2-6.8-2.4 2.8-1.2-2-4.8-.8-1.2-2.8-2 .4.4-4-5.2-.4-1.2-5.6-1.6 1.2-3.2-3.6-4.4.4v-1.6H284l-4.4-4-2.4.4-.4 2-3.2-.4-.8 3.2-10.4.4-2 2.4-4-2.4-3.2 1.2-2.4-4v-4.4l2.8-1.6-.4-1.6-1.6-2.4-1.6.8-8.4-4.4-2-3.2v-3.6l1.6-.8-.8-6.4 2-2.4 6.8 5.2 7.2-2L258 74h3.2l1.2 2.4.8-8.4h-2l.8-4.8-2 .4 1.6-1.6-4-4.8 2.8-1.6-10.4-5.2 1.6-7.2 3.6-2.8.4-3.6 7.2 1.2V23.2l2-2.4zm62 47.2l-7.2 5.6-2.4-1.6-.8 6 1.6 3.2 9.6.4 2-2.8 4.4 1.6-2-2.4.8-6-2-2-1.6 1.2-2.4-3.2z'/><path id='E' d='M212.4 38l9.6 6.4-2.4 2 2.4 3.2h6l6.4 2.8 2-2.8h2.4L240 46l4 3.2 2.4-2 5.6 5.2 7.2 2 1.2 1.2-2.8 1.6.4 2 3.6 2.8-1.6 1.6 2-.4-.8 4.8h2v4.4l-.8 4-1.2-2.4H258l-1.6 2.8-6 2-6.8-5.2-3.2 2.4.8 6.4-1.6.8v3.6l6.4 6 5.6.8 2 3.2-2.8 2.4 1.6 6.8-2.4-.8-2 2.4-5.2.8-.8 2.4-8.4 4.8-3.2-.4-2-2.8-6.8 2.4v-3.6l-2-2-10.4-1.2-3.6 5.6 2.8 8.4-1.6 3.2h-2.4l-8.4-4 2-6.4-1.6-2 2.8-4.4-5.2-2 1.2-2.8 3.2.8v-1.6l-6.4.4-4.4-2-.4-8.8 3.6 1.2.4-2.8-4-2-6 2.8v-2l-3.2-.4-1.2-2.4h-4.4l-3.2 3.2-5.2-5.2-.4-3.2 12-9.6 14-4 4.8-7.2-.4-8.8 2 .4 1.2-2.4 10 5.2 4.4-7.2.4-5.6-2-.8 2.4-3.6z'/><path id='F' d='M176.4 86.8l1.6 2.4 3.2.4v2l6-2.8 4 2-.4 2.8-3.6-1.2.4 8.8 11.2 2.4h-3.6l-1.2 3.2 5.2 1.6-2.8 4.4 1.6 2-2 6.4 5.2 3.2-1.6 3.2 1.6 8.8 5.2 2 5.2-2.4.8 4.4 6.8 6.4-5.2 1.2 1.2 2.8-4.4 8-5.2-3.6v-2.4l-10.4-2.8-2.8.8-1.6-2-5.2.8-.4 2.8-7.2 2-5.2-1.6-1.6-2.8-8.4-1.2v-2l-4 2-6-3.6H148l-6.4 5.6-6-1.2-2-12.8 1.6-1.6 6.8.4 1.2-2 8.4.4v-3.6l4.4-.8 2.4-4.8 2.8-.8-3.2-4.8 2-2-4.4-1.6 1.2-4.4h8.4l-1.2 1.6 2.8 2.4-2 2 .8 2 7.6 5.2 3.6-1.2-.4-5.6 2.8-3.6-.8-4-2.4-2h-5.6l4.4-9.2-6.4-8.4 4-3.6h4z'/><path id='G' d='M279.2 101.2l7.2 3.6v1.6l4.4-.4 3.2 3.6 1.6-1.2 1.2 5.6 5.2.4-.8 3.2 2.4.4 1.2 2.8 4.8.8 1.2 2 1.6-2.8 1.2.8-.4 2.8 2.8 3.2-7.2 3.6 4.8 14.8-1.6 4.8 3.2 4.8-7.6 10.8v6l2.4 5.2-6.8-4h-3.6l-9.6 2-2 1.2v2.8l-3.2 1.2-2.8-3.2-14.8.8-2.4-1.6.4-6.4-2.4-.8 2-8.8-8-8.8-10 3.6-5.6-2-4.8 3.2-.8-3.2h-6l-1.6-3.2-8.4 4.8-2.4 4-4.4 2-3.2-1.6 5.6-8.8-1.2-2.8 5.2-1.2-6.8-6.4-.8-4.4-5.2 2.4-4.8-1.6-2-8.4 1.6-4.4 5.6 1.2 1.6-3.2-2.8-8.4 3.6-5.6 10.4 1.2 2 2v3.6l6.8-2.4 2 2.8 3.2.4 16.4-10.4 3.2 2.4 3.2-1.2 4 2.4 2-2.4 10.4-.4.8-3.2 3.2.4.4-2h2z'/><path id='H' d='M151.6 145.2l6.4 2.4 3.6 4.8h2.8l-2 3.2.8 2.4 4.4 3.2v3.2l5.6 4-1.6 2.4-9.2 1.2-1.6 5.6-5.6.4-8-4-1.2-4-3.2-.4-.4-6.8-2.8.8-3.2-2.8 1.2-1.6-2-4.8 3.6-.8 7.2-7.6 5.2-.8z'/><path id='I' d='M61.2 118.8l5.6 1.6 2-2.4 6.8 3.6 5.2-1.6 1.2 1.6-2.4 2h3.2l2 6h6l4-2.8 2 .4-.8 2.4 2.4-.4 2-3.2 4 .4-1.6-2.4 2.4-2.8 6 .4 2.4-5.2 9.6.8 6.8-2.8 9.2 1.2-2-6.4 4.4-2.8v4.4l8-1.2 2.8 4.8 3.2-.8v2l4 1.2-1.6 2.4 3.2 4.8-2.8.8-2.4 4.8-4.4.8v3.6l-8.4-.4-1.2 2-6.8-.4-1.6 1.6 2.4 13.6-8 2-9.2 5.2-5.2-3.2-3.6 2-3.2-1.6-2.4 2.8-2.4-1.6-9.2 1.6.4 1.6-3.2 1.6-3.2 10h-7.2l-6-1.6 1.6-2.4-4-3.2L66 166l-4-1.2.8-5.6-2.8-.8-1.6-3.2-3.6 3.2.4 2-3.6-.4v4l-4 1.2-1.6-2.8-.4-2.4 2.8-3.6-2-2.4 1.6-1.2-1.2-2.8 4-4 .4-7.2-2.4-1.2 6.8-2 4.8-5.2 2-3.2-2-4 .8-4.4z'/><path id='J' d='M31.2 116.4l2 .4-.4 2.8h6.8l1.2 4 4.4 1.6.4 2.4-1.6.8 1.6 3.6 6-2-.8 5.2-2 1.2 2.4 2.4-.4 7.2-4 4 1.2 2.8-1.6 1.2 2 2.4-2.8 3.6 2 3.6-1.2 2-3.2-1.2-1.2-2.8-6.4-2V154l-12-2.4 1.2-4.8-3.2-2.4.4-4.8-2-2 6.4-8-.4-4-2.8-.4-1.6-2.8 7.6-2 2-4z'/><path id='K' d='M327.6 68.4l.4 2 2.8-.4 2 2-.8 6 2 2.4-4.4-1.6-2 2.8-9.6-.4-1.6-3.2.8-6 2.4 1.6 1.6-2.4 3.6-.4.4-2.8 2.4.4z'/></defs><g text-rendering='optimizeLegibility'><use xlink:href='#B' class='B C D E'/><g stroke='silver'><use xlink:href='#B' class='B F G H'/><use xlink:href='#C' class='B C D E'/><use xlink:href='#C' class='B F G H'/><use xlink:href='#D' class='B C D E'/><use xlink:href='#D' class='B F G H'/><use xlink:href='#E' class='B C D E'/><use xlink:href='#E' class='B F G H'/><use xlink:href='#F' class='B C D E'/><use xlink:href='#F' class='B F G H'/><use xlink:href='#G' class='B C D E'/><use xlink:href='#G' class='B F G H'/><use xlink:href='#H' class='B C D E'/><use xlink:href='#H' class='B F G H'/><path d='M61.2 118.8l-1.2-1.2 2.4-.8-1.2 2z' class='B C D E'/><path d='M61.2 118.8l-1.2-1.2 2.4-.8-1.2 2z' class='B F G H'/><use xlink:href='#I' class='B C D E'/><use xlink:href='#I' class='B F G H'/><use xlink:href='#J' class='B C D E'/><use xlink:href='#J' class='B F G H'/><use xlink:href='#K' class='B C D E'/><use xlink:href='#K' class='B F G H'/></g></g></svg>";class qs extends bs{constructor(t){const e=t||{};super(Object.assign({iconClassName:"bgis-icon-share",tooltip:qs.DEFAULT_TOOLTIP_TEXT},e))}}qs.DEFAULT_TOOLTIP_TEXT="Ansicht teilen",qs.DEFAULT_UNICODE=59692;const Qs=class{constructor(t){this.highWaterMark=void 0!==t?t:2048,this.count_=0,this.entries_={},this.oldest_=null,this.newest_=null}canExpireCache(){return this.highWaterMark>0&&this.getCount()>this.highWaterMark}expireCache(t){for(;this.canExpireCache();)this.pop()}clear(){this.count_=0,this.entries_={},this.oldest_=null,this.newest_=null}containsKey(t){return this.entries_.hasOwnProperty(t)}forEach(t){let e=this.oldest_;for(;e;)t(e.value_,e.key_,this),e=e.newer}get(t,e){const i=this.entries_[t];return V(void 0!==i,15),i===this.newest_||(i===this.oldest_?(this.oldest_=this.oldest_.newer,this.oldest_.older=null):(i.newer.older=i.older,i.older.newer=i.newer),i.newer=null,i.older=this.newest_,this.newest_.newer=i,this.newest_=i),i.value_}remove(t){const e=this.entries_[t];return V(void 0!==e,15),e===this.newest_?(this.newest_=e.older,this.newest_&&(this.newest_.newer=null)):e===this.oldest_?(this.oldest_=e.newer,this.oldest_&&(this.oldest_.older=null)):(e.newer.older=e.older,e.older.newer=e.newer),delete this.entries_[t],--this.count_,e.value_}getCount(){return this.count_}getKeys(){const t=new Array(this.count_);let e,i=0;for(e=this.newest_;e;e=e.older)t[i++]=e.key_;return t}getValues(){const t=new Array(this.count_);let e,i=0;for(e=this.newest_;e;e=e.older)t[i++]=e.value_;return t}peekLast(){return this.oldest_.value_}peekLastKey(){return this.oldest_.key_}peekFirstKey(){return this.newest_.key_}peek(t){if(this.containsKey(t))return this.entries_[t].value_}pop(){const t=this.oldest_;return delete this.entries_[t.key_],t.newer&&(t.newer.older=null),this.oldest_=t.newer,this.oldest_||(this.newest_=null),--this.count_,t.value_}replace(t,e){this.get(t),this.entries_[t].value_=e}set(t,e){V(!(t in this.entries_),16);const i={key_:t,newer:null,older:this.newest_,value_:e};this.newest_?this.newest_.newer=i:this.oldest_=i,this.newest_=i,this.entries_[t]=i,++this.count_}setSize(t){this.highWaterMark=t}};function $s(t,e,i,n){return void 0!==n?(n[0]=t,n[1]=e,n[2]=i,n):[t,e,i]}function Js(t,e,i){return t+"/"+e+"/"+i}function to(t){return Js(t[0],t[1],t[2])}const eo=class extends Qs{clear(){for(;this.getCount()>0;)this.pop().release();super.clear()}expireCache(t){for(;this.canExpireCache()&&!(this.peekLast().getKey()in t);)this.pop().release()}pruneExceptNewestZ(){if(0===this.getCount())return;const t=this.peekFirstKey().split("/").map(Number)[0];this.forEach((e=>{e.tileCoord[0]!==t&&(this.remove(to(e.tileCoord)),e.release())}))}};function io(t){return t?Array.isArray(t)?function(e){return t}:"function"==typeof t?t:function(e){return[t]}:null}const no=class extends M{constructor(t){super(),this.projection=le(t.projection),this.attributions_=io(t.attributions),this.attributionsCollapsible_=void 0===t.attributionsCollapsible||t.attributionsCollapsible,this.loading=!1,this.state_=void 0!==t.state?t.state:"ready",this.wrapX_=void 0!==t.wrapX&&t.wrapX,this.interpolate_=!!t.interpolate,this.viewResolver=null,this.viewRejector=null;const e=this;this.viewPromise_=new Promise((function(t,i){e.viewResolver=t,e.viewRejector=i}))}getAttributions(){return this.attributions_}getAttributionsCollapsible(){return this.attributionsCollapsible_}getProjection(){return this.projection}getResolutions(t){return null}getView(){return this.viewPromise_}getState(){return this.state_}getWrapX(){return this.wrapX_}getInterpolate(){return this.interpolate_}refresh(){this.changed()}setAttributions(t){this.attributions_=io(t),this.changed()}setState(t){this.state_=t,this.changed()}},so=[0,0,0],oo=class{constructor(t){let e;if(this.minZoom=void 0!==t.minZoom?t.minZoom:0,this.resolutions_=t.resolutions,V(function(t,e,i){const n=function(t,e){return e-t}||s;return t.every((function(e,i){if(0===i)return!0;const s=n(t[i-1],e);return!(s>0||0===s)}))}(this.resolutions_),17),!t.origins)for(let t=0,i=this.resolutions_.length-1;t<i;++t)if(e){if(this.resolutions_[t]/this.resolutions_[t+1]!==e){e=void 0;break}}else e=this.resolutions_[t]/this.resolutions_[t+1];this.zoomFactor_=e,this.maxZoom=this.resolutions_.length-1,this.origin_=void 0!==t.origin?t.origin:null,this.origins_=null,void 0!==t.origins&&(this.origins_=t.origins,V(this.origins_.length==this.resolutions_.length,20));const i=t.extent;void 0===i||this.origin_||this.origins_||(this.origin_=Zt(i)),V(!this.origin_&&this.origins_||this.origin_&&!this.origins_,18),this.tileSizes_=null,void 0!==t.tileSizes&&(this.tileSizes_=t.tileSizes,V(this.tileSizes_.length==this.resolutions_.length,19)),this.tileSize_=void 0!==t.tileSize?t.tileSize:this.tileSizes_?null:st,V(!this.tileSize_&&this.tileSizes_||this.tileSize_&&!this.tileSizes_,22),this.extent_=void 0!==i?i:null,this.fullTileRanges_=null,this.tmpSize_=[0,0],this.tmpExtent_=[0,0,0,0],void 0!==t.sizes?this.fullTileRanges_=t.sizes.map((function(t,e){const n=new Ji(Math.min(0,t[0]),Math.max(t[0]-1,-1),Math.min(0,t[1]),Math.max(t[1]-1,-1));if(i){const t=this.getTileRangeForExtentAndZ(i,e);n.minX=Math.max(t.minX,n.minX),n.maxX=Math.min(t.maxX,n.maxX),n.minY=Math.max(t.minY,n.minY),n.maxY=Math.min(t.maxY,n.maxY)}return n}),this):i&&this.calculateTileRanges_(i)}forEachTileCoord(t,e,i){const n=this.getTileRangeForExtentAndZ(t,e);for(let t=n.minX,s=n.maxX;t<=s;++t)for(let s=n.minY,o=n.maxY;s<=o;++s)i([e,t,s])}forEachTileCoordParentTileRange(t,e,i,n){let s,o,r,a=null,l=t[0]-1;for(2===this.zoomFactor_?(o=t[1],r=t[2]):a=this.getTileCoordExtent(t,n);l>=this.minZoom;){if(2===this.zoomFactor_?(o=Math.floor(o/2),r=Math.floor(r/2),s=$i(o,o,r,r,i)):s=this.getTileRangeForExtentAndZ(a,l,i),e(l,s))return!0;--l}return!1}getExtent(){return this.extent_}getMaxZoom(){return this.maxZoom}getMinZoom(){return this.minZoom}getOrigin(t){return this.origin_?this.origin_:this.origins_[t]}getResolution(t){return this.resolutions_[t]}getResolutions(){return this.resolutions_}getTileCoordChildTileRange(t,e,i){if(t[0]<this.maxZoom){if(2===this.zoomFactor_){const i=2*t[1],n=2*t[2];return $i(i,i+1,n,n+1,e)}const n=this.getTileCoordExtent(t,i||this.tmpExtent_);return this.getTileRangeForExtentAndZ(n,t[0]+1,e)}return null}getTileRangeForTileCoordAndZ(t,e,i){if(e>this.maxZoom||e<this.minZoom)return null;const n=t[0],s=t[1],o=t[2];if(e===n)return $i(s,o,s,o,i);if(this.zoomFactor_){const t=Math.pow(this.zoomFactor_,e-n),r=Math.floor(s*t),a=Math.floor(o*t);return e<n?$i(r,r,a,a,i):$i(r,Math.floor(t*(s+1))-1,a,Math.floor(t*(o+1))-1,i)}const r=this.getTileCoordExtent(t,this.tmpExtent_);return this.getTileRangeForExtentAndZ(r,e,i)}getTileRangeForExtentAndZ(t,e,i){this.getTileCoordForXYAndZ_(t[0],t[3],e,!1,so);const n=so[1],s=so[2];return this.getTileCoordForXYAndZ_(t[2],t[1],e,!0,so),$i(n,so[1],s,so[2],i)}getTileCoordCenter(t){const e=this.getOrigin(t[0]),i=this.getResolution(t[0]),n=en(this.getTileSize(t[0]),this.tmpSize_);return[e[0]+(t[1]+.5)*n[0]*i,e[1]-(t[2]+.5)*n[1]*i]}getTileCoordExtent(t,e){const i=this.getOrigin(t[0]),n=this.getResolution(t[0]),s=en(this.getTileSize(t[0]),this.tmpSize_),o=i[0]+t[1]*s[0]*n,r=i[1]-(t[2]+1)*s[1]*n;return St(o,r,o+s[0]*n,r+s[1]*n,e)}getTileCoordForCoordAndResolution(t,e,i){return this.getTileCoordForXYAndResolution_(t[0],t[1],e,!1,i)}getTileCoordForXYAndResolution_(t,e,i,n,s){const o=this.getZForResolution(i),r=i/this.getResolution(o),a=this.getOrigin(o),l=en(this.getTileSize(o),this.tmpSize_);let h=r*(t-a[0])/i/l[0],c=r*(a[1]-e)/i/l[1];return n?(h=$(h,5)-1,c=$(c,5)-1):(h=Q(h,5),c=Q(c,5)),$s(o,h,c,s)}getTileCoordForXYAndZ_(t,e,i,n,s){const o=this.getOrigin(i),r=this.getResolution(i),a=en(this.getTileSize(i),this.tmpSize_);let l=(t-o[0])/r/a[0],h=(o[1]-e)/r/a[1];return n?(l=$(l,5)-1,h=$(h,5)-1):(l=Q(l,5),h=Q(h,5)),$s(i,l,h,s)}getTileCoordForCoordAndZ(t,e,i){return this.getTileCoordForXYAndZ_(t[0],t[1],e,!1,i)}getTileCoordResolution(t){return this.resolutions_[t[0]]}getTileSize(t){return this.tileSize_?this.tileSize_:this.tileSizes_[t]}getFullTileRange(t){return this.fullTileRanges_?this.fullTileRanges_[t]:this.extent_?this.getTileRangeForExtentAndZ(this.extent_,t):null}getZForResolution(t,e){return Z(o(this.resolutions_,t,e||0),this.minZoom,this.maxZoom)}tileCoordIntersectsViewport(t,e){return gi(e,0,e.length,2,this.getTileCoordExtent(t))}calculateTileRanges_(t){const e=this.resolutions_.length,i=new Array(e);for(let n=this.minZoom;n<e;++n)i[n]=this.getTileRangeForExtentAndZ(t,n);this.fullTileRanges_=i}};function ro(t){let e=t.getDefaultTileGrid();return e||(e=function(t,e,i,n){return function(t,e,i,n){n=void 0!==n?n:"top-left";const s=ao(t,undefined,i);return new oo({extent:t,origin:Dt(t,n),resolutions:s,tileSize:i})}(lo(t),0,void 0,void 0)}(t),t.setDefaultTileGrid(e)),e}function ao(t,e,i,n){e=void 0!==e?e:nt,i=en(void 0!==i?i:st);const s=Kt(t),o=Ut(t);n=n>0?n:Math.max(o/i[0],s/i[1]);const r=e+1,a=new Array(r);for(let t=0;t<r;++t)a[t]=n/Math.pow(2,t);return a}function lo(t){let e=(t=le(t)).getExtent();if(!e){const i=180*ot.degrees/t.getMetersPerUnit();e=St(-i,-i,i,i)}return e}class ho extends e{constructor(t,e){super(t),this.tile=e}}const co=class extends no{constructor(t){super({attributions:t.attributions,attributionsCollapsible:t.attributionsCollapsible,projection:t.projection,state:t.state,wrapX:t.wrapX,interpolate:t.interpolate}),this.on,this.once,this.un,this.opaque_=void 0!==t.opaque&&t.opaque,this.tilePixelRatio_=void 0!==t.tilePixelRatio?t.tilePixelRatio:1,this.tileGrid=void 0!==t.tileGrid?t.tileGrid:null;this.tileGrid&&en(this.tileGrid.getTileSize(this.tileGrid.getMinZoom()),[256,256]),this.tileCache=new eo(t.cacheSize||0),this.tmpSize=[0,0],this.key_=t.key||"",this.tileOptions={transition:t.transition,interpolate:t.interpolate},this.zDirection=t.zDirection?t.zDirection:0}canExpireCache(){return this.tileCache.canExpireCache()}expireCache(t,e){const i=this.getTileCacheForProjection(t);i&&i.expireCache(e)}forEachLoadedTile(t,e,i,n){const s=this.getTileCacheForProjection(t);if(!s)return!1;let o,r,a,l=!0;for(let t=i.minX;t<=i.maxX;++t)for(let h=i.minY;h<=i.maxY;++h)r=Js(e,t,h),a=!1,s.containsKey(r)&&(o=s.get(r),a=2===o.getState(),a&&(a=!1!==n(o))),a||(l=!1);return l}getGutterForProjection(t){return 0}getKey(){return this.key_}setKey(t){this.key_!==t&&(this.key_=t,this.changed())}getOpaque(t){return this.opaque_}getResolutions(t){const e=t?this.getTileGridForProjection(t):this.tileGrid;return e?e.getResolutions():null}getTile(t,e,i,n,s){return b()}getTileGrid(){return this.tileGrid}getTileGridForProjection(t){return this.tileGrid?this.tileGrid:ro(t)}getTileCacheForProjection(t){const e=this.getProjection();return V(null===e||de(e,t),68),this.tileCache}getTilePixelRatio(t){return this.tilePixelRatio_}getTilePixelSize(t,e,i){const n=this.getTileGridForProjection(i),s=this.getTilePixelRatio(e),o=en(n.getTileSize(t),this.tmpSize);return 1==s?o:(r=o,a=s,void 0===(l=this.tmpSize)&&(l=[0,0]),l[0]=r[0]*a+.5|0,l[1]=r[1]*a+.5|0,l);var r,a,l}getTileCoordForTileUrlFunction(t,e){e=void 0!==e?e:this.getProjection();const i=this.getTileGridForProjection(e);return this.getWrapX()&&e.isGlobal()&&(t=function(t,e,i){const n=e[0],s=t.getTileCoordCenter(e),o=lo(i);if(!wt(o,s)){const e=Ut(o),i=Math.ceil((o[0]-s[0])/e);return s[0]+=e*i,t.getTileCoordForCoordAndZ(s,n)}return e}(i,t,e)),function(t,e){const i=t[0],n=t[1],s=t[2];if(e.getMinZoom()>i||i>e.getMaxZoom())return!1;const o=e.getFullTileRange(i);return!o||o.containsXY(n,s)}(t,i)?t:null}clear(){this.tileCache.clear()}refresh(){this.clear(),super.refresh()}updateCacheSize(t,e){const i=this.getTileCacheForProjection(e);t>i.highWaterMark&&(i.highWaterMark=t)}useTile(t,e,i,n){}};function uo(t,e){const i=/\{z\}/g,n=/\{x\}/g,s=/\{y\}/g,o=/\{-y\}/g;return function(r,a,l){if(r)return t.replace(i,r[0].toString()).replace(n,r[1].toString()).replace(s,r[2].toString()).replace(o,(function(){const t=r[0],i=e.getFullTileRange(t);return V(i,55),(i.getHeight()-r[2]-1).toString()}))}}class go extends co{constructor(t){super({attributions:t.attributions,cacheSize:t.cacheSize,opaque:t.opaque,projection:t.projection,state:t.state,tileGrid:t.tileGrid,tilePixelRatio:t.tilePixelRatio,wrapX:t.wrapX,transition:t.transition,interpolate:t.interpolate,key:t.key,attributionsCollapsible:t.attributionsCollapsible,zDirection:t.zDirection}),this.generateTileUrlFunction_=this.tileUrlFunction===go.prototype.tileUrlFunction,this.tileLoadFunction=t.tileLoadFunction,t.tileUrlFunction&&(this.tileUrlFunction=t.tileUrlFunction),this.urls=null,t.urls?this.setUrls(t.urls):t.url&&this.setUrl(t.url),this.tileLoadingKeys_={}}getTileLoadFunction(){return this.tileLoadFunction}getTileUrlFunction(){return Object.getPrototypeOf(this).tileUrlFunction===this.tileUrlFunction?this.tileUrlFunction.bind(this):this.tileUrlFunction}getUrls(){return this.urls}handleTileChange(t){const e=t.target,i=S(e),n=e.getState();let s;1==n?(this.tileLoadingKeys_[i]=!0,s="tileloadstart"):i in this.tileLoadingKeys_&&(delete this.tileLoadingKeys_[i],s=3==n?"tileloaderror":2==n?"tileloadend":void 0),null!=s&&this.dispatchEvent(new ho(s,e))}setTileLoadFunction(t){this.tileCache.clear(),this.tileLoadFunction=t,this.changed()}setTileUrlFunction(t,e){this.tileUrlFunction=t,this.tileCache.pruneExceptNewestZ(),void 0!==e?this.setKey(e):this.changed()}setUrl(t){const e=function(t){const e=[];let i=/\{([a-z])-([a-z])\}/.exec(t);if(i){const n=i[1].charCodeAt(0),s=i[2].charCodeAt(0);let o;for(o=n;o<=s;++o)e.push(t.replace(i[0],String.fromCharCode(o)));return e}if(i=/\{(\d+)-(\d+)\}/.exec(t),i){const n=parseInt(i[2],10);for(let s=parseInt(i[1],10);s<=n;s++)e.push(t.replace(i[0],s.toString()));return e}return e.push(t),e}(t);this.urls=e,this.setUrls(e)}setUrls(t){this.urls=t;const e=t.join("\n");this.generateTileUrlFunction_?this.setTileUrlFunction(function(t,e){const i=t.length,n=new Array(i);for(let s=0;s<i;++s)n[s]=uo(t[s],e);return function(t){return 1===t.length?t[0]:function(e,i,n){if(!e)return;const s=function(t){return(t[1]<<t[0])+t[2]}(e),o=W(s,t.length);return t[o](e,i,n)}}(n)}(t,this.tileGrid),e):this.setKey(e)}tileUrlFunction(t,e,i){}useTile(t,e,i){const n=Js(t,e,i);this.tileCache.containsKey(n)&&this.tileCache.get(n)}}const po=go;function mo(t,e){t.getImage().src=e}const _o=class extends po{constructor(t){super({attributions:t.attributions,cacheSize:t.cacheSize,opaque:t.opaque,projection:t.projection,state:t.state,tileGrid:t.tileGrid,tileLoadFunction:t.tileLoadFunction?t.tileLoadFunction:mo,tilePixelRatio:t.tilePixelRatio,tileUrlFunction:t.tileUrlFunction,url:t.url,urls:t.urls,wrapX:t.wrapX,transition:t.transition,interpolate:void 0===t.interpolate||t.interpolate,key:t.key,attributionsCollapsible:t.attributionsCollapsible,zDirection:t.zDirection}),this.crossOrigin=void 0!==t.crossOrigin?t.crossOrigin:null,this.tileClass=void 0!==t.tileClass?t.tileClass:Zi,this.tileCacheForProjection={},this.tileGridForProjection={},this.reprojectionErrorThreshold_=t.reprojectionErrorThreshold,this.renderReprojectionEdges_=!1}canExpireCache(){if(this.tileCache.canExpireCache())return!0;for(const t in this.tileCacheForProjection)if(this.tileCacheForProjection[t].canExpireCache())return!0;return!1}expireCache(t,e){const i=this.getTileCacheForProjection(t);this.tileCache.expireCache(this.tileCache==i?e:{});for(const t in this.tileCacheForProjection){const n=this.tileCacheForProjection[t];n.expireCache(n==i?e:{})}}getGutterForProjection(t){return this.getProjection()&&t&&!de(this.getProjection(),t)?0:this.getGutter()}getGutter(){return 0}getKey(){let t=super.getKey();return this.getInterpolate()||(t+=":disable-interpolation"),t}getOpaque(t){return!(this.getProjection()&&t&&!de(this.getProjection(),t))&&super.getOpaque(t)}getTileGridForProjection(t){const e=this.getProjection();if(this.tileGrid&&(!e||de(e,t)))return this.tileGrid;const i=S(t);return i in this.tileGridForProjection||(this.tileGridForProjection[i]=ro(t)),this.tileGridForProjection[i]}getTileCacheForProjection(t){const e=this.getProjection();if(!e||de(e,t))return this.tileCache;const i=S(t);return i in this.tileCacheForProjection||(this.tileCacheForProjection[i]=new eo(this.tileCache.highWaterMark)),this.tileCacheForProjection[i]}createTile_(t,e,i,n,s,o){const r=[t,e,i],a=this.getTileCoordForTileUrlFunction(r,s),l=a?this.tileUrlFunction(a,n,s):void 0,h=new this.tileClass(r,void 0!==l?0:4,void 0!==l?l:"",this.crossOrigin,this.tileLoadFunction,this.tileOptions);return h.key=o,h.addEventListener(g,this.handleTileChange.bind(this)),h}getTile(t,e,i,n,s){const o=this.getProjection();if(!o||!s||de(o,s))return this.getTileInternal(t,e,i,n,o||s);const r=this.getTileCacheForProjection(s),a=[t,e,i];let l;const h=to(a);r.containsKey(h)&&(l=r.get(h));const c=this.getKey();if(l&&l.key==c)return l;const u=this.getTileGridForProjection(o),d=this.getTileGridForProjection(s),g=this.getTileCoordForTileUrlFunction(a,s),p=new qi(o,u,s,d,a,g,this.getTilePixelRatio(n),this.getGutter(),((t,e,i,n)=>this.getTileInternal(t,e,i,n,o)),this.reprojectionErrorThreshold_,this.renderReprojectionEdges_,this.getInterpolate());return p.key=c,l?(p.interimTile=l,p.refreshInterimChain(),r.replace(h,p)):r.set(h,p),p}getTileInternal(t,e,i,n,s){let o=null;const r=Js(t,e,i),a=this.getKey();if(this.tileCache.containsKey(r)){if(o=this.tileCache.get(r),o.key!=a){const l=o;o=this.createTile_(t,e,i,n,s,a),0==l.getState()?o.interimTile=l.interimTile:o.interimTile=l,o.refreshInterimChain(),this.tileCache.replace(r,o)}}else o=this.createTile_(t,e,i,n,s,a),this.tileCache.set(r,o);return o}setRenderReprojectionEdges(t){if(this.renderReprojectionEdges_!=t){this.renderReprojectionEdges_=t;for(const t in this.tileCacheForProjection)this.tileCacheForProjection[t].clear();this.changed()}}setTileGridForProjection(t,e){const i=le(t);if(i){const t=S(i);t in this.tileGridForProjection||(this.tileGridForProjection[t]=e)}}clear(){super.clear();for(const t in this.tileCacheForProjection)this.tileCacheForProjection[t].clear()}},fo=class extends _o{constructor(t){const e=void 0!==(t=t||{}).projection?t.projection:"EPSG:3857",i=void 0!==t.tileGrid?t.tileGrid:function(t){const e=t||{},i=e.extent||le("EPSG:3857").getExtent(),n={extent:i,minZoom:e.minZoom,tileSize:e.tileSize,resolutions:ao(i,e.maxZoom,e.tileSize,e.maxResolution)};return new oo(n)}({extent:lo(e),maxResolution:t.maxResolution,maxZoom:t.maxZoom,minZoom:t.minZoom,tileSize:t.tileSize});super({attributions:t.attributions,cacheSize:t.cacheSize,crossOrigin:t.crossOrigin,interpolate:t.interpolate,opaque:t.opaque,projection:e,reprojectionErrorThreshold:t.reprojectionErrorThreshold,tileGrid:i,tileLoadFunction:t.tileLoadFunction,tilePixelRatio:t.tilePixelRatio,tileUrlFunction:t.tileUrlFunction,url:t.url,urls:t.urls,wrapX:void 0===t.wrapX||t.wrapX,transition:t.transition,attributionsCollapsible:t.attributionsCollapsible,zDirection:t.zDirection}),this.gutter_=void 0!==t.gutter?t.gutter:0}getGutter(){return this.gutter_}},vo={geolandbasemap:"https://mapsneu.wien.gv.at/basemap/geolandbasemap/normal/google3857/{z}/{y}/{x}.png",bmapgrau:"https://mapsneu.wien.gv.at/basemap/bmapgrau/normal/google3857/{z}/{y}/{x}.png",bmaporthofoto30cm:"https://mapsneu.wien.gv.at/basemap/bmaporthofoto30cm/normal/google3857/{z}/{y}/{x}.jpeg",bmapgelaende:"https://mapsneu.wien.gv.at/basemap/bmapgelaende/grau/google3857/{z}/{y}/{x}.jpeg",bmapoberflaeche:"https://mapsneu.wien.gv.at/basemap/bmapoberflaeche/grau/google3857/{z}/{y}/{x}.jpeg",bmapoverlay:"https://mapsneu.wien.gv.at/basemap/bmapoverlay/normal/google3857/{z}/{y}/{x}.png"};return new class extends M{constructor(t){super(),t=t||{},this.on,this.once,this.un;const e=function(t){let e=null;void 0!==t.keyboardEventTarget&&(e="string"==typeof t.keyboardEventTarget?document.getElementById(t.keyboardEventTarget):t.keyboardEventTarget);const i={},n=t.layers&&"function"==typeof t.layers.getLayers?t.layers:new En({layers:t.layers});let s,o,r;return i[Fn]=n,i[On]=t.target,i[kn]=t.view instanceof Ti?t.view:new Ti,void 0!==t.controls&&(Array.isArray(t.controls)?s=new ln(t.controls.slice()):(V("function"==typeof t.controls.getArray,47),s=t.controls)),void 0!==t.interactions&&(Array.isArray(t.interactions)?o=new ln(t.interactions.slice()):(V("function"==typeof t.interactions.getArray,48),o=t.interactions)),void 0!==t.overlays?Array.isArray(t.overlays)?r=new ln(t.overlays.slice()):(V("function"==typeof t.overlays.getArray,49),r=t.overlays):r=new ln,{controls:s,interactions:o,keyboardEventTarget:e,overlays:r,values:i}}(t);this.renderComplete_,this.loaded_=!0,this.boundHandleBrowserEvent_=this.handleBrowserEvent.bind(this),this.maxTilesLoading_=void 0!==t.maxTilesLoading?t.maxTilesLoading:16,this.pixelRatio_=void 0!==t.pixelRatio?t.pixelRatio:je,this.postRenderTimeoutHandle_,this.animationDelayKey_,this.animationDelay_=this.animationDelay_.bind(this),this.coordinateToPixelTransform_=[1,0,0,1,0,0],this.pixelToCoordinateTransform_=[1,0,0,1,0,0],this.frameIndex_=0,this.frameState_=null,this.previousExtent_=null,this.viewPropertyListenerKey_=null,this.viewChangeListenerKey_=null,this.layerGroupPropertyListenerKeys_=null,this.viewport_=document.createElement("div"),this.viewport_.className="ol-viewport"+("ontouchstart"in window?" ol-touch":""),this.viewport_.style.position="relative",this.viewport_.style.overflow="hidden",this.viewport_.style.width="100%",this.viewport_.style.height="100%",this.overlayContainer_=document.createElement("div"),this.overlayContainer_.style.position="absolute",this.overlayContainer_.style.zIndex="0",this.overlayContainer_.style.width="100%",this.overlayContainer_.style.height="100%",this.overlayContainer_.style.pointerEvents="none",this.overlayContainer_.className="ol-overlaycontainer",this.viewport_.appendChild(this.overlayContainer_),this.overlayContainerStopEvent_=document.createElement("div"),this.overlayContainerStopEvent_.style.position="absolute",this.overlayContainerStopEvent_.style.zIndex="0",this.overlayContainerStopEvent_.style.width="100%",this.overlayContainerStopEvent_.style.height="100%",this.overlayContainerStopEvent_.style.pointerEvents="none",this.overlayContainerStopEvent_.className="ol-overlaycontainer-stopevent",this.viewport_.appendChild(this.overlayContainerStopEvent_),this.mapBrowserEventHandler_=null,this.moveTolerance_=t.moveTolerance,this.keyboardEventTarget_=e.keyboardEventTarget,this.targetChangeHandlerKeys_=null,this.targetElement_=null,this.resizeObserver_=new ResizeObserver((()=>this.updateSize())),this.controls=e.controls||function(t){t=t||{};const e=new ln;return(void 0===t.zoom||t.zoom)&&e.push(new Vn(t.zoomOptions)),(void 0===t.rotate||t.rotate)&&e.push(new Kn(t.rotateOptions)),(void 0===t.attribution||t.attribution)&&e.push(new Gn(t.attributionOptions)),e}(),this.interactions=e.interactions||function(t){t=t||{};const e=new ln,i=new _s(-.005,.05,100);return(void 0===t.altShiftDragRotate||t.altShiftDragRotate)&&e.push(new rs),(void 0===t.doubleClickZoom||t.doubleClickZoom)&&e.push(new Xn({delta:t.zoomDelta,duration:t.zoomDuration})),(void 0===t.dragPan||t.dragPan)&&e.push(new os({onFocusOnly:t.onFocusOnly,kinetic:i})),(void 0===t.pinchRotate||t.pinchRotate)&&e.push(new vs),(void 0===t.pinchZoom||t.pinchZoom)&&e.push(new ys({duration:t.zoomDuration})),(void 0===t.keyboard||t.keyboard)&&(e.push(new ps),e.push(new ms({delta:t.zoomDelta,duration:t.zoomDuration}))),(void 0===t.mouseWheelZoom||t.mouseWheelZoom)&&e.push(new fs({onFocusOnly:t.onFocusOnly,duration:t.zoomDuration})),(void 0===t.shiftDragZoom||t.shiftDragZoom)&&e.push(new cs({duration:t.zoomDuration})),e}({onFocusOnly:!0}),this.overlays_=e.overlays,this.overlayIdIndex_={},this.renderer_=null,this.postRenderFunctions_=[],this.tileQueue_=new Dn(this.getTilePriority.bind(this),this.handleTileChange_.bind(this)),this.addChangeListener(Fn,this.handleLayerGroupChanged_),this.addChangeListener(kn,this.handleViewChanged_),this.addChangeListener(An,this.handleSizeChanged_),this.addChangeListener(On,this.handleTargetChanged_),this.setProperties(e.values);const i=this;!t.view||t.view instanceof Ti||t.view.then((function(t){i.setView(new Ti(t))})),this.controls.addEventListener(sn,(t=>{t.element.setMap(this)})),this.controls.addEventListener(on,(t=>{t.element.setMap(null)})),this.interactions.addEventListener(sn,(t=>{t.element.setMap(this)})),this.interactions.addEventListener(on,(t=>{t.element.setMap(null)})),this.overlays_.addEventListener(sn,(t=>{this.addOverlayInternal_(t.element)})),this.overlays_.addEventListener(on,(t=>{const e=t.element.getId();void 0!==e&&delete this.overlayIdIndex_[e.toString()],t.element.setMap(null)})),this.controls.forEach((t=>{t.setMap(this)})),this.interactions.forEach((t=>{t.setMap(this)})),this.overlays_.forEach(this.addOverlayInternal_.bind(this))}addControl(t){this.getControls().push(t)}addInteraction(t){this.getInteractions().push(t)}addLayer(t){this.getLayerGroup().getLayers().push(t)}handleLayerAdd_(t){xs(t.layer,this)}addOverlay(t){this.getOverlays().push(t)}addOverlayInternal_(t){const e=t.getId();void 0!==e&&(this.overlayIdIndex_[e.toString()]=t),t.setMap(this)}disposeInternal(){this.controls.clear(),this.interactions.clear(),this.overlays_.clear(),this.resizeObserver_.disconnect(),this.setTarget(null),super.disposeInternal()}forEachFeatureAtPixel(t,e,i){if(!this.frameState_||!this.renderer_)return;const n=this.getCoordinateFromPixelInternal(t),s=void 0!==(i=void 0!==i?i:{}).hitTolerance?i.hitTolerance:0,o=void 0!==i.layerFilter?i.layerFilter:l,r=!1!==i.checkWrapped;return this.renderer_.forEachFeatureAtCoordinate(n,this.frameState_,s,r,e,null,o,null)}getFeaturesAtPixel(t,e){const i=[];return this.forEachFeatureAtPixel(t,(function(t){i.push(t)}),e),i}getAllLayers(){const t=[];return function e(i){i.forEach((function(i){i instanceof En?e(i.getLayers()):t.push(i)}))}(this.getLayers()),t}hasFeatureAtPixel(t,e){if(!this.frameState_||!this.renderer_)return!1;const i=this.getCoordinateFromPixelInternal(t),n=void 0!==(e=void 0!==e?e:{}).layerFilter?e.layerFilter:l,s=void 0!==e.hitTolerance?e.hitTolerance:0,o=!1!==e.checkWrapped;return this.renderer_.hasFeatureAtCoordinate(i,this.frameState_,s,o,n,null)}getEventCoordinate(t){return this.getCoordinateFromPixel(this.getEventPixel(t))}getEventCoordinateInternal(t){return this.getCoordinateFromPixelInternal(this.getEventPixel(t))}getEventPixel(t){const e=this.viewport_.getBoundingClientRect(),i=this.getSize(),n=e.width/i[0],s=e.height/i[1],o="changedTouches"in t?t.changedTouches[0]:t;return[(o.clientX-e.left)/n,(o.clientY-e.top)/s]}getTarget(){return this.get(On)}getTargetElement(){return this.targetElement_}getCoordinateFromPixel(t){return ve(this.getCoordinateFromPixelInternal(t),this.getView().getProjection())}getCoordinateFromPixelInternal(t){const e=this.frameState_;return e?Ze(e.pixelToCoordinateTransform,t.slice()):null}getControls(){return this.controls}getOverlays(){return this.overlays_}getOverlayById(t){const e=this.overlayIdIndex_[t.toString()];return void 0!==e?e:null}getInteractions(){return this.interactions}getLayerGroup(){return this.get(Fn)}setLayers(t){const e=this.getLayerGroup();if(t instanceof ln)return void e.setLayers(t);const i=e.getLayers();i.clear(),i.extend(t)}getLayers(){return this.getLayerGroup().getLayers()}getLoadingOrNotReady(){const t=this.getLayerGroup().getLayerStatesArray();for(let e=0,i=t.length;e<i;++e){const i=t[e];if(!i.visible)continue;const n=i.layer.getRenderer();if(n&&!n.ready)return!0;const s=i.layer.getSource();if(s&&s.loading)return!0}return!1}getPixelFromCoordinate(t){const e=ye(t,this.getView().getProjection());return this.getPixelFromCoordinateInternal(e)}getPixelFromCoordinateInternal(t){const e=this.frameState_;return e?Ze(e.coordinateToPixelTransform,t.slice(0,2)):null}getRenderer(){return this.renderer_}getSize(){return this.get(An)}getView(){return this.get(kn)}getViewport(){return this.viewport_}getOverlayContainer(){return this.overlayContainer_}getOverlayContainerStopEvent(){return this.overlayContainerStopEvent_}getOwnerDocument(){const t=this.getTargetElement();return t?t.ownerDocument:document}getTilePriority(t,e,i,n){return function(t,e,i,n,s){if(!t||!(i in t.wantedTiles))return zn;if(!t.wantedTiles[i][e.getKey()])return zn;const o=t.viewState.center,r=n[0]-o[0],a=n[1]-o[1];return 65536*Math.log(s)+Math.sqrt(r*r+a*a)/s}(this.frameState_,t,e,i,n)}handleBrowserEvent(t,e){e=e||t.type;const i=new wn(e,this,t);this.handleMapBrowserEvent(i)}handleMapBrowserEvent(t){if(!this.frameState_)return;const e=t.originalEvent,i=e.type;if(i===Sn||i===y||i===_){const t=this.getOwnerDocument(),i=this.viewport_.getRootNode?this.viewport_.getRootNode():t,n=e.target;if(this.overlayContainerStopEvent_.contains(n)||!(i===t?t.documentElement:i).contains(n))return}if(t.frameState=this.frameState_,!1!==this.dispatchEvent(t)){const e=this.getInteractions().getArray().slice();for(let i=e.length-1;i>=0;i--){const n=e[i];if(n.getMap()===this&&n.getActive()&&this.getTargetElement()&&(!n.handleEvent(t)||t.propagationStopped))break}}}handlePostRender(){const t=this.frameState_,e=this.tileQueue_;if(!e.isEmpty()){let i=this.maxTilesLoading_,n=i;if(t){const e=t.viewHints;if(e[0]||e[1]){const e=Date.now()-t.time>8;i=e?0:8,n=e?0:2}}e.getTilesLoading()<i&&(e.reprioritize(),e.loadMoreTiles(i,n))}t&&this.renderer_&&!t.animate&&(!0===this.renderComplete_?(this.hasListener(et)&&this.renderer_.dispatchRenderEvent(et,t),!1===this.loaded_&&(this.loaded_=!0,this.dispatchEvent(new Tn(Ln,this,t)))):!0===this.loaded_&&(this.loaded_=!1,this.dispatchEvent(new Tn(In,this,t))));const i=this.postRenderFunctions_;for(let e=0,n=i.length;e<n;++e)i[e](this,t);i.length=0}handleSizeChanged_(){this.getView()&&!this.getView().getAnimating()&&this.getView().resolveConstraints(0),this.render()}handleTargetChanged_(){if(this.mapBrowserEventHandler_){for(let t=0,e=this.targetChangeHandlerKeys_.length;t<e;++t)E(this.targetChangeHandlerKeys_[t]);this.targetChangeHandlerKeys_=null,this.viewport_.removeEventListener(p,this.boundHandleBrowserEvent_),this.viewport_.removeEventListener(y,this.boundHandleBrowserEvent_),this.mapBrowserEventHandler_.dispose(),this.mapBrowserEventHandler_=null,ji(this.viewport_)}if(this.targetElement_){this.resizeObserver_.unobserve(this.targetElement_);const t=this.targetElement_.getRootNode();t instanceof ShadowRoot&&this.resizeObserver_.unobserve(t.host),this.setSize(void 0)}const t=this.getTarget(),e="string"==typeof t?document.getElementById(t):t;if(this.targetElement_=e,e){e.appendChild(this.viewport_),this.renderer_||(this.renderer_=new vn(this)),this.mapBrowserEventHandler_=new Pn(this,this.moveTolerance_);for(const t in bn)this.mapBrowserEventHandler_.addEventListener(bn[t],this.handleMapBrowserEvent.bind(this));this.viewport_.addEventListener(p,this.boundHandleBrowserEvent_,!1),this.viewport_.addEventListener(y,this.boundHandleBrowserEvent_,!!Ve&&{passive:!1});const t=this.keyboardEventTarget_?this.keyboardEventTarget_:e;this.targetChangeHandlerKeys_=[C(t,_,this.handleBrowserEvent,this),C(t,f,this.handleBrowserEvent,this)];const i=e.getRootNode();i instanceof ShadowRoot&&this.resizeObserver_.observe(i.host),this.resizeObserver_.observe(e)}else this.renderer_&&(clearTimeout(this.postRenderTimeoutHandle_),this.postRenderTimeoutHandle_=void 0,this.postRenderFunctions_.length=0,this.renderer_.dispose(),this.renderer_=null),this.animationDelayKey_&&(cancelAnimationFrame(this.animationDelayKey_),this.animationDelayKey_=void 0);this.updateSize()}handleTileChange_(){this.render()}handleViewPropertyChanged_(){this.render()}handleViewChanged_(){this.viewPropertyListenerKey_&&(E(this.viewPropertyListenerKey_),this.viewPropertyListenerKey_=null),this.viewChangeListenerKey_&&(E(this.viewChangeListenerKey_),this.viewChangeListenerKey_=null);const t=this.getView();t&&(this.updateViewportSize_(),this.viewPropertyListenerKey_=C(t,i,this.handleViewPropertyChanged_,this),this.viewChangeListenerKey_=C(t,g,this.handleViewPropertyChanged_,this),t.resolveConstraints(0)),this.render()}handleLayerGroupChanged_(){this.layerGroupPropertyListenerKeys_&&(this.layerGroupPropertyListenerKeys_.forEach(E),this.layerGroupPropertyListenerKeys_=null);const t=this.getLayerGroup();t&&(this.handleLayerAdd_(new yn("addlayer",t)),this.layerGroupPropertyListenerKeys_=[C(t,i,this.render,this),C(t,g,this.render,this),C(t,"addlayer",this.handleLayerAdd_,this),C(t,"removelayer",this.handleLayerRemove_,this)]),this.render()}isRendered(){return!!this.frameState_}animationDelay_(){this.animationDelayKey_=void 0,this.renderFrame_(Date.now())}renderSync(){this.animationDelayKey_&&cancelAnimationFrame(this.animationDelayKey_),this.animationDelay_()}redrawText(){const t=this.getLayerGroup().getLayerStatesArray();for(let e=0,i=t.length;e<i;++e){const i=t[e].layer;i.hasRenderer()&&i.getRenderer().handleFontsChanged()}}render(){this.renderer_&&void 0===this.animationDelayKey_&&(this.animationDelayKey_=requestAnimationFrame(this.animationDelay_))}flushDeclutterItems(){const t=this.frameState_;t&&this.renderer_.flushDeclutterItems(t)}removeControl(t){return this.getControls().remove(t)}removeInteraction(t){return this.getInteractions().remove(t)}removeLayer(t){return this.getLayerGroup().getLayers().remove(t)}handleLayerRemove_(t){Cs(t.layer)}removeOverlay(t){return this.getOverlays().remove(t)}renderFrame_(t){const e=this.getSize(),i=this.getView(),n=this.frameState_;let s=null;if(void 0!==e&&tn(e)&&i&&i.isDef()){const n=i.getHints(this.frameState_?this.frameState_.viewHints:void 0),o=i.getState();if(s={animate:!1,coordinateToPixelTransform:this.coordinateToPixelTransform_,declutterTree:null,extent:jt(o.center,o.resolution,o.rotation,e),index:this.frameIndex_++,layerIndex:0,layerStatesArray:this.getLayerGroup().getLayerStatesArray(),pixelRatio:this.pixelRatio_,pixelToCoordinateTransform:this.pixelToCoordinateTransform_,postRenderFunctions:[],size:e,tileQueue:this.tileQueue_,time:t,usedTiles:{},viewState:o,viewHints:n,wantedTiles:{},mapId:S(this),renderTargets:{}},o.nextCenter&&o.nextResolution){const t=isNaN(o.nextRotation)?o.rotation:o.nextRotation;s.nextExtent=jt(o.nextCenter,o.nextResolution,t,e)}}var o,r;this.frameState_=s,this.renderer_.renderFrame(s),s&&(s.animate&&this.render(),Array.prototype.push.apply(this.postRenderFunctions_,s.postRenderFunctions),n&&(!this.previousExtent_||!Ht(this.previousExtent_)&&!Mt(s.extent,this.previousExtent_))&&(this.dispatchEvent(new Tn("movestart",this,n)),this.previousExtent_=Pt(this.previousExtent_)),this.previousExtent_&&!s.viewHints[0]&&!s.viewHints[1]&&!Mt(s.extent,this.previousExtent_)&&(this.dispatchEvent(new Tn("moveend",this,s)),o=s.extent,(r=this.previousExtent_)?(r[0]=o[0],r[1]=o[1],r[2]=o[2],r[3]=o[3]):o.slice())),this.dispatchEvent(new Tn(Mn,this,s)),this.renderComplete_=this.hasListener(In)||this.hasListener(Ln)||this.hasListener(et)?!this.tileQueue_.getTilesLoading()&&!this.tileQueue_.getCount()&&!this.getLoadingOrNotReady():void 0,this.postRenderTimeoutHandle_||(this.postRenderTimeoutHandle_=setTimeout((()=>{this.postRenderTimeoutHandle_=void 0,this.handlePostRender()}),0))}setLayerGroup(t){const e=this.getLayerGroup();e&&this.handleLayerRemove_(new yn("removelayer",e)),this.set(Fn,t)}setSize(t){this.set(An,t)}setTarget(t){this.set(On,t)}setView(t){if(!t||t instanceof Ti)return void this.set(kn,t);this.set(kn,new Ti);const e=this;t.then((function(t){e.setView(new Ti(t))}))}updateSize(){const t=this.getTargetElement();let e;if(t){const i=getComputedStyle(t),n=t.offsetWidth-parseFloat(i.borderLeftWidth)-parseFloat(i.paddingLeft)-parseFloat(i.paddingRight)-parseFloat(i.borderRightWidth),s=t.offsetHeight-parseFloat(i.borderTopWidth)-parseFloat(i.paddingTop)-parseFloat(i.paddingBottom)-parseFloat(i.borderBottomWidth);isNaN(n)||isNaN(s)||(e=[n,s],!tn(e)&&(t.offsetWidth||t.offsetHeight||t.getClientRects().length)&&ie("No map visible because the map container's width or height are 0."))}const i=this.getSize();!e||i&&a(e,i)||(this.setSize(e),this.updateViewportSize_())}updateViewportSize_(){const t=this.getView();if(t){let e;const i=getComputedStyle(this.viewport_);i.width&&i.height&&(e=[parseInt(i.width,10),parseInt(i.height,10)]),t.setViewportSize(e)}}}({target:"bgis-map",layers:[new class extends Pi{constructor(t){super(t)}createRenderer(){return new nn(this)}}({source:new class extends fo{constructor(t){var e;const i=(null==t?void 0:t.variant)||"geolandbasemap";super({url:vo[i],attributions:null!==(e=null==t?void 0:t.attributions)&&void 0!==e?e:'Grundkarte: <a href="https://basemap.at/">basemap.at</a>',crossOrigin:"Anonymous"})}}})],controls:[new class extends Ts{constructor(t,e){const i=e||{};super(Object.assign(Object.assign({},i),{styleClass:"bgis-footer",childControls:t}))}}([new class extends jn{constructor(t){const e=t||{},i=e.className?e.className:"bgis-scaleline";super({element:document.createElement("div"),target:e.target}),this.viewState=null,this._minWidth=void 0!==e.minWidth?e.minWidth:64,this.renderedVisible=!1,this.renderedWidth=void 0,this.renderedSVG=void 0,this.dpi=e.dpi||void 0,this.element.className=i}render(t){const e=t.frameState;this.viewState=e?e.viewState:null,this.updateElement()}updateElement(){const t=this.viewState;if(!t)return void(this.renderedVisible&&(this.element.style.display="none",this.renderedVisible=!1));const e=t.center,i=t.projection,n="degrees"==this.getUnits()?"degrees":"m";let s=he(i,t.resolution,e,n);const o=this._minWidth*(this.dpi||Xs)/Xs,r=o*s;let a;r<.001?(a="μm",s*=1e6):r<1?(a="mm",s*=1e3):r<1e3?a="m":(a="km",s/=1e3);let l,h,c,u=3*Math.floor(Math.log(o*s)/Math.log(10));for(;;){c=Math.floor(u/3);const t=Math.pow(10,c);if(l=Hs[(u%3+3)%3]*t,h=Math.round(l/s),isNaN(h))return this.element.style.display="none",void(this.renderedVisible=!1);if(h>=o)break;++u}let d=null;l&&c>=0&&(d=this.getGeneratedSVG(l.toFixed(c<0?-c:0)+" "+a,h)),d&&this.renderedSVG!=d&&(this.element.innerHTML="",this.element.appendChild(d),this.renderedSVG=d),this.renderedWidth!=h&&(this.element.style.width=h+"px",d&&d.setAttribute("width",String(h)),this.renderedWidth=h),this.renderedVisible||(this.element.style.display="",this.renderedVisible=!0)}getUnits(){return this.get("units")}getGeneratedSVG(t,e){const i=document.createElementNS("http://www.w3.org/2000/svg","svg");i.setAttribute("id","bgis-scaleline-svg"),i.setAttribute("viewBox","0 0 "+e+" 18"),i.setAttribute("width",String(e)),i.setAttribute("height","100%");const n=document.createElementNS("http://www.w3.org/2000/svg","rect");n.setAttribute("id","bgis-scaleline-svg-background"),n.setAttribute("x",String(0)),n.setAttribute("y",String(0)),n.setAttribute("width","100%"),n.setAttribute("height","100%"),n.setAttribute("fill","#e5ecf0"),n.setAttribute("fill-opacity",".5"),n.setAttribute("stroke","black"),n.setAttribute("stroke-width","1"),n.setAttribute("stroke-dasharray","0 "+e+" "+(e+36)),i.appendChild(n);const s=document.createElementNS("http://www.w3.org/2000/svg","text");return s.textContent=t,s.setAttribute("x",String(e/2)),s.setAttribute("y",String(12)),s.setAttribute("text-anchor","middle"),s.setAttribute("font-size","1em"),s.setAttribute("style","font-size: 0.75rem; font-family: "+Ps),s.setAttribute("font-family",Ps),s.setAttribute("fill","black"),i.appendChild(s),i}setMinWidth(t){this._minWidth=t}getMinWidth(){return this._minWidth}},new class extends Us{constructor(t){const e=t||{};e.projection=e.projection?e.projection:"EPSG:4326",e.coordinateFormat=e.coordinateFormat?e.coordinateFormat:t=>t?function(t,e,i){return t?e.replace("{x}",t[0].toFixed(i)).replace("{y}",t[1].toFixed(i)):""}(t,"{y}°N/{x}°E",5):"",e.placeholder=e.placeholder?e.placeholder:"&nbsp;-&nbsp;°N/&nbsp;-&nbsp;°E",e.className=e.className?e.className:"ol-control ol-mouse-position bgis-mouseposition",super(e)}},new class extends Gn{constructor(t){super(t||{collapsed:!1,collapsible:!1}),this.element.className+=" bgis-copyright"}}]),new Ms({horizontalControls:[new class extends bs{constructor(t){const e=t||{};super(Object.assign({iconClassName:"bgis-icon-layer-group",tooltip:"Begleitkarten verwalten"},e))}},new class extends bs{constructor(t){const e=t||{};super(Object.assign({iconClassName:"bgis-icon-list",tooltip:"Liste anzeigen"},e))}}],verticalControls:[new class extends bs{constructor(t){const e=t||{};super(Object.assign({iconClassName:"bgis-icon-print",tooltip:"Ansicht drucken"},e))}},new qs,new class extends bs{constructor(t){const e=t||{};super(Object.assign({iconClassName:"bgis-icon-tools",tooltip:"Toolbox einblenden"},e))}}]}),new class extends Ts{constructor(t,e){const i=e||{};super(Object.assign(Object.assign({},i),{styleClass:"bgis-top-right",childControls:t}))}}([new class extends bs{constructor(t){const e=t||{};super(Object.assign({unicode:59702,containerClassName:"ol-control bgis-control ol-geolocate",tooltip:"Standort zentrieren"},e));const i=t||{};this._geoLocation=new Ks(i)}handleEvent(t){var e,i;return t.type===m&&this.geoLocation&&(null===(i=null===(e=this.getMap())||void 0===e?void 0:e.getView())||void 0===i?void 0:i.getProjection())&&(this.geoLocation.once("change",(()=>{var t,e;this.geoLocation.setTracking(!1),null===(t=this.getMap())||void 0===t||t.getView().animate({center:(e=this.geoLocation.getPosition(),se(),me(e,"EPSG:4326","EPSG:3857")),duration:300});const i=this.geoLocation.getPosition();i&&this.dispatchEvent(new Vs("location_retrieved",i))})),this.geoLocation.setTracking(!0)),!0}get geoLocation(){return this._geoLocation}},new class extends Vn{constructor(t){const e=t||{};super(Object.assign(Object.assign({},e),{zoomInLabel:String.fromCodePoint(59700),zoomOutLabel:String.fromCodePoint(59701)})),this.element.className="ol-control bgis-control zoom-container"}}]),new Ys],view:new Ti({center:Nt([106e4,5838030,1913530,6281290]),constrainOnlyCenter:!0,constrainResolution:!1,extent:[106e4,5838030,1913530,6281290],maxZoom:15,minZoom:6,zoom:7})}),t})()));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,